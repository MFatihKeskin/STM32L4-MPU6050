
mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008478  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08008628  08008628  00018628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e8  080089e8  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f0  080089f0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  080089f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000100  08008af8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08008af8  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec91  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e38  00000000  00000000  0002edc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00030c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029762  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7b9  00000000  00000000  0005bc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000facc2  00000000  00000000  0006b3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001660b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  00166108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008610 	.word	0x08008610

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	08008610 	.word	0x08008610

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MPU6050_Init>:
        .R_measure = 0.03f,
};

/************************MPU6050 FUNCTİONS*********************************/

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8000f74:	2364      	movs	r3, #100	; 0x64
 8000f76:	9302      	str	r3, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f107 030f 	add.w	r3, r7, #15
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2301      	movs	r3, #1
 8000f84:	2275      	movs	r2, #117	; 0x75
 8000f86:	21d0      	movs	r1, #208	; 0xd0
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fd3f 	bl	8002a0c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b68      	cmp	r3, #104	; 0x68
 8000f92:	d13d      	bne.n	8001010 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f107 030e 	add.w	r3, r7, #14
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	226b      	movs	r2, #107	; 0x6b
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 fc19 	bl	80027e4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	f107 030e 	add.w	r3, r7, #14
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	2219      	movs	r2, #25
 8000fc8:	21d0      	movs	r1, #208	; 0xd0
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f001 fc0a 	bl	80027e4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	221c      	movs	r2, #28
 8000fe6:	21d0      	movs	r1, #208	; 0xd0
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 fbfb 	bl	80027e4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000ff2:	2364      	movs	r3, #100	; 0x64
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030e 	add.w	r3, r7, #14
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	221b      	movs	r2, #27
 8001004:	21d0      	movs	r1, #208	; 0xd0
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 fbec 	bl	80027e4 <HAL_I2C_Mem_Write>
        return 0;
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <MPU6050_Init+0xa6>
    }
    return 1;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	0000      	movs	r0, r0
 800101c:	0000      	movs	r0, r0
	...

08001020 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2306      	movs	r3, #6
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	223b      	movs	r2, #59	; 0x3b
 800103c:	21d0      	movs	r1, #208	; 0xd0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f001 fce4 	bl	8002a0c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001044:	7a3b      	ldrb	r3, [r7, #8]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	7a7b      	ldrb	r3, [r7, #9]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa5f 	bl	8000544 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MPU6050_Read_Accel+0xd0>)
 800108c:	f7ff fbee 	bl	800086c <__aeabi_ddiv>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa4f 	bl	8000544 <__aeabi_i2d>
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MPU6050_Read_Accel+0xd0>)
 80010ac:	f7ff fbde 	bl	800086c <__aeabi_ddiv>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	6839      	ldr	r1, [r7, #0]
 80010b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa3f 	bl	8000544 <__aeabi_i2d>
 80010c6:	a308      	add	r3, pc, #32	; (adr r3, 80010e8 <MPU6050_Read_Accel+0xc8>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fbce 	bl	800086c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	f3af 8000 	nop.w
 80010e8:	00000000 	.word	0x00000000
 80010ec:	40cc2900 	.word	0x40cc2900
 80010f0:	40d00000 	.word	0x40d00000
 80010f4:	00000000 	.word	0x00000000

080010f8 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2306      	movs	r3, #6
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	2243      	movs	r2, #67	; 0x43
 8001114:	21d0      	movs	r1, #208	; 0xd0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f001 fc78 	bl	8002a0c <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7a7b      	ldrb	r3, [r7, #9]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800112e:	7abb      	ldrb	r3, [r7, #10]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7afb      	ldrb	r3, [r7, #11]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	849a      	strh	r2, [r3, #36]	; 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9f3 	bl	8000544 <__aeabi_i2d>
 800115e:	a318      	add	r3, pc, #96	; (adr r3, 80011c0 <MPU6050_Read_Gyro+0xc8>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fb82 	bl	800086c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	6839      	ldr	r1, [r7, #0]
 800116e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9e3 	bl	8000544 <__aeabi_i2d>
 800117e:	a310      	add	r3, pc, #64	; (adr r3, 80011c0 <MPU6050_Read_Gyro+0xc8>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fb72 	bl	800086c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	6839      	ldr	r1, [r7, #0]
 800118e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9d3 	bl	8000544 <__aeabi_i2d>
 800119e:	a308      	add	r3, pc, #32	; (adr r3, 80011c0 <MPU6050_Read_Gyro+0xc8>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fb62 	bl	800086c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	f3af 8000 	nop.w
 80011c0:	00000000 	.word	0x00000000
 80011c4:	40606000 	.word	0x40606000

080011c8 <MPU6050_Read_Temp>:

void MPU6050_Read_Temp(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af04      	add	r7, sp, #16
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[2];
    int16_t temp;

    // Read 2 BYTES of data starting from TEMP_OUT_H_REG register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, TEMP_OUT_H_REG, 1, Rec_Data, 2, i2c_timeout);
 80011d2:	2364      	movs	r3, #100	; 0x64
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2302      	movs	r3, #2
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2241      	movs	r2, #65	; 0x41
 80011e4:	21d0      	movs	r1, #208	; 0xd0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f001 fc10 	bl	8002a0c <HAL_I2C_Mem_Read>

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	7b7b      	ldrb	r3, [r7, #13]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	81fb      	strh	r3, [r7, #14]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001224 <MPU6050_Read_Temp+0x5c>
 800120a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001228 <MPU6050_Read_Temp+0x60>
 8001212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	43aa0000 	.word	0x43aa0000
 8001228:	42121eb8 	.word	0x42121eb8

0800122c <Kalman_getAngle>:


double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b096      	sub	sp, #88	; 0x58
 8001230:	af00      	add	r7, sp, #0
 8001232:	61f8      	str	r0, [r7, #28]
 8001234:	ed87 0b04 	vstr	d0, [r7, #16]
 8001238:	ed87 1b02 	vstr	d1, [r7, #8]
 800123c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001246:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800124a:	f7ff f82d 	bl	80002a8 <__aeabi_dsub>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800125c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001264:	f7ff f9d8 	bl	8000618 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4620      	mov	r0, r4
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff f81c 	bl	80002ac <__adddf3>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	69f9      	ldr	r1, [r7, #28]
 800127a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800128a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800128e:	f7ff f9c3 	bl	8000618 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80012a0:	f7ff f802 	bl	80002a8 <__aeabi_dsub>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80012b2:	f7fe fff9 	bl	80002a8 <__aeabi_dsub>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7fe fff2 	bl	80002ac <__adddf3>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4610      	mov	r0, r2
 80012ce:	4619      	mov	r1, r3
 80012d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012d4:	f7ff f9a0 	bl	8000618 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ffe4 	bl	80002ac <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	69f9      	ldr	r1, [r7, #28]
 80012ea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80012fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fe:	f7ff f98b 	bl	8000618 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7fe ffcd 	bl	80002a8 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	69f9      	ldr	r1, [r7, #28]
 8001314:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001328:	f7ff f976 	bl	8000618 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4620      	mov	r0, r4
 8001332:	4629      	mov	r1, r5
 8001334:	f7fe ffb8 	bl	80002a8 <__aeabi_dsub>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	69f9      	ldr	r1, [r7, #28]
 800133e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800134e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001352:	f7ff f961 	bl	8000618 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ffa5 	bl	80002ac <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	69f9      	ldr	r1, [r7, #28]
 8001368:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001378:	f7fe ff98 	bl	80002ac <__adddf3>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800138a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800138e:	f7ff fa6d 	bl	800086c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80013a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013a4:	f7ff fa62 	bl	800086c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80013b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ba:	f7fe ff75 	bl	80002a8 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013d4:	f7ff f920 	bl	8000618 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4620      	mov	r0, r4
 80013de:	4629      	mov	r1, r5
 80013e0:	f7fe ff64 	bl	80002ac <__adddf3>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	69f9      	ldr	r1, [r7, #28]
 80013ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80013f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013fc:	f7ff f90c 	bl	8000618 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff50 	bl	80002ac <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	69f9      	ldr	r1, [r7, #28]
 8001412:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800141c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001426:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001430:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001438:	f7ff f8ee 	bl	8000618 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4620      	mov	r0, r4
 8001442:	4629      	mov	r1, r5
 8001444:	f7fe ff30 	bl	80002a8 <__aeabi_dsub>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	69f9      	ldr	r1, [r7, #28]
 800144e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001458:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800145c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001460:	f7ff f8da 	bl	8000618 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f7fe ff1c 	bl	80002a8 <__aeabi_dsub>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	69f9      	ldr	r1, [r7, #28]
 8001476:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001480:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001488:	f7ff f8c6 	bl	8000618 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4620      	mov	r0, r4
 8001492:	4629      	mov	r1, r5
 8001494:	f7fe ff08 	bl	80002a8 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	69f9      	ldr	r1, [r7, #28]
 800149e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80014a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014b0:	f7ff f8b2 	bl	8000618 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe fef4 	bl	80002a8 <__aeabi_dsub>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	69f9      	ldr	r1, [r7, #28]
 80014c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014d0:	ec43 2b17 	vmov	d7, r2, r3
};
 80014d4:	eeb0 0a47 	vmov.f32	s0, s14
 80014d8:	eef0 0a67 	vmov.f32	s1, s15
 80014dc:	3758      	adds	r7, #88	; 0x58
 80014de:	46bd      	mov	sp, r7
 80014e0:	bdb0      	pop	{r4, r5, r7, pc}
 80014e2:	0000      	movs	r0, r0
 80014e4:	0000      	movs	r0, r0
	...

080014e8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b094      	sub	sp, #80	; 0x50
 80014ee:	af04      	add	r7, sp, #16
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80014f4:	2364      	movs	r3, #100	; 0x64
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	230e      	movs	r3, #14
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	223b      	movs	r2, #59	; 0x3b
 8001506:	21d0      	movs	r1, #208	; 0xd0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 fa7f 	bl	8002a0c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800150e:	7a3b      	ldrb	r3, [r7, #8]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	7a7b      	ldrb	r3, [r7, #9]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21a      	sxth	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7afb      	ldrb	r3, [r7, #11]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21a      	sxth	r2, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001532:	7b3b      	ldrb	r3, [r7, #12]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b21a      	sxth	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001552:	7c3b      	ldrb	r3, [r7, #16]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7c7b      	ldrb	r3, [r7, #17]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001564:	7cbb      	ldrb	r3, [r7, #18]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7cfb      	ldrb	r3, [r7, #19]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001576:	7d3b      	ldrb	r3, [r7, #20]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffd8 	bl	8000544 <__aeabi_i2d>
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4bbd      	ldr	r3, [pc, #756]	; (8001890 <MPU6050_Read_All+0x3a8>)
 800159a:	f7ff f967 	bl	800086c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	6839      	ldr	r1, [r7, #0]
 80015a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffc8 	bl	8000544 <__aeabi_i2d>
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4bb5      	ldr	r3, [pc, #724]	; (8001890 <MPU6050_Read_All+0x3a8>)
 80015ba:	f7ff f957 	bl	800086c <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffb8 	bl	8000544 <__aeabi_i2d>
 80015d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001878 <MPU6050_Read_All+0x390>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f947 	bl	800086c <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80015e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001894 <MPU6050_Read_All+0x3ac>
 80015f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001898 <MPU6050_Read_All+0x3b0>
 8001600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff97 	bl	8000544 <__aeabi_i2d>
 8001616:	a39a      	add	r3, pc, #616	; (adr r3, 8001880 <MPU6050_Read_All+0x398>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7ff f926 	bl	800086c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff87 	bl	8000544 <__aeabi_i2d>
 8001636:	a392      	add	r3, pc, #584	; (adr r3, 8001880 <MPU6050_Read_All+0x398>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f916 	bl	800086c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff77 	bl	8000544 <__aeabi_i2d>
 8001656:	a38a      	add	r3, pc, #552	; (adr r3, 8001880 <MPU6050_Read_All+0x398>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f906 	bl	800086c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800166a:	f000 fd6b 	bl	8002144 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	4b8a      	ldr	r3, [pc, #552]	; (800189c <MPU6050_Read_All+0x3b4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff54 	bl	8000524 <__aeabi_ui2d>
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <MPU6050_Read_All+0x3b8>)
 8001682:	f7ff f8f3 	bl	800086c <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800168e:	f000 fd59 	bl	8002144 <HAL_GetTick>
 8001692:	4603      	mov	r3, r0
 8001694:	4a81      	ldr	r2, [pc, #516]	; (800189c <MPU6050_Read_All+0x3b4>)
 8001696:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	461a      	mov	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	fb03 f202 	mul.w	r2, r3, r2
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b0:	4619      	mov	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff40 	bl	8000544 <__aeabi_i2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	ec43 2b10 	vmov	d0, r2, r3
 80016cc:	f006 fdf7 	bl	80082be <sqrt>
 80016d0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016e0:	f7ff fa02 	bl	8000ae8 <__aeabi_dcmpeq>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11f      	bne.n	800172a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff27 	bl	8000544 <__aeabi_i2d>
 80016f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016fa:	f7ff f8b7 	bl	800086c <__aeabi_ddiv>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	ec43 2b17 	vmov	d7, r2, r3
 8001706:	eeb0 0a47 	vmov.f32	s0, s14
 800170a:	eef0 0a67 	vmov.f32	s1, s15
 800170e:	f006 fc2b 	bl	8007f68 <atan>
 8001712:	ec51 0b10 	vmov	r0, r1, d0
 8001716:	a35c      	add	r3, pc, #368	; (adr r3, 8001888 <MPU6050_Read_All+0x3a0>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe ff7c 	bl	8000618 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001728:	e005      	b.n	8001736 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	425b      	negs	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff00 	bl	8000544 <__aeabi_i2d>
 8001744:	4682      	mov	sl, r0
 8001746:	468b      	mov	fp, r1
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fef8 	bl	8000544 <__aeabi_i2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	ec43 2b11 	vmov	d1, r2, r3
 800175c:	ec4b ab10 	vmov	d0, sl, fp
 8001760:	f006 fdab 	bl	80082ba <atan2>
 8001764:	ec51 0b10 	vmov	r0, r1, d0
 8001768:	a347      	add	r3, pc, #284	; (adr r3, 8001888 <MPU6050_Read_All+0x3a0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff53 	bl	8000618 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <MPU6050_Read_All+0x3bc>)
 8001780:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001784:	f7ff f9ba 	bl	8000afc <__aeabi_dcmplt>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <MPU6050_Read_All+0x2bc>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <MPU6050_Read_All+0x3c0>)
 800179a:	f7ff f9cd 	bl	8000b38 <__aeabi_dcmpgt>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d114      	bne.n	80017ce <MPU6050_Read_All+0x2e6>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <MPU6050_Read_All+0x3c0>)
 80017aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017ae:	f7ff f9c3 	bl	8000b38 <__aeabi_dcmpgt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d015      	beq.n	80017e4 <MPU6050_Read_All+0x2fc>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MPU6050_Read_All+0x3bc>)
 80017c4:	f7ff f99a 	bl	8000afc <__aeabi_dcmplt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00a      	beq.n	80017e4 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80017ce:	4937      	ldr	r1, [pc, #220]	; (80018ac <MPU6050_Read_All+0x3c4>)
 80017d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80017e2:	e014      	b.n	800180e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017ea:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80017ee:	eeb0 1a47 	vmov.f32	s2, s14
 80017f2:	eef0 1a67 	vmov.f32	s3, s15
 80017f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80017fa:	482c      	ldr	r0, [pc, #176]	; (80018ac <MPU6050_Read_All+0x3c4>)
 80017fc:	f7ff fd16 	bl	800122c <Kalman_getAngle>
 8001800:	eeb0 7a40 	vmov.f32	s14, s0
 8001804:	eef0 7a60 	vmov.f32	s15, s1
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001814:	4690      	mov	r8, r2
 8001816:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MPU6050_Read_All+0x3c0>)
 8001820:	4640      	mov	r0, r8
 8001822:	4649      	mov	r1, r9
 8001824:	f7ff f988 	bl	8000b38 <__aeabi_dcmpgt>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001834:	4614      	mov	r4, r2
 8001836:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001846:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800184a:	eeb0 1a47 	vmov.f32	s2, s14
 800184e:	eef0 1a67 	vmov.f32	s3, s15
 8001852:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001856:	4816      	ldr	r0, [pc, #88]	; (80018b0 <MPU6050_Read_All+0x3c8>)
 8001858:	f7ff fce8 	bl	800122c <Kalman_getAngle>
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eef0 7a60 	vmov.f32	s15, s1
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800186a:	bf00      	nop
 800186c:	3740      	adds	r7, #64	; 0x40
 800186e:	46bd      	mov	sp, r7
 8001870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	40cc2900 	.word	0x40cc2900
 8001880:	00000000 	.word	0x00000000
 8001884:	40606000 	.word	0x40606000
 8001888:	1a63c1f8 	.word	0x1a63c1f8
 800188c:	404ca5dc 	.word	0x404ca5dc
 8001890:	40d00000 	.word	0x40d00000
 8001894:	43aa0000 	.word	0x43aa0000
 8001898:	42121eb8 	.word	0x42121eb8
 800189c:	200001f4 	.word	0x200001f4
 80018a0:	408f4000 	.word	0x408f4000
 80018a4:	c0568000 	.word	0xc0568000
 80018a8:	40568000 	.word	0x40568000
 80018ac:	20000048 	.word	0x20000048
 80018b0:	20000000 	.word	0x20000000

080018b4 <printMessages>:

void printMessages(char *format, ...)
{
 80018b4:	b40f      	push	{r0, r1, r2, r3}
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b09a      	sub	sp, #104	; 0x68
 80018ba:	af00      	add	r7, sp, #0
	char comingMessage[100];
	va_list vaList;
	va_start(vaList, format);
 80018bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018c0:	603b      	str	r3, [r7, #0]
	vsprintf(comingMessage, format, vaList);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fe19 	bl	8005500 <vsiprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)comingMessage, strlen(comingMessage),HAL_MAX_DELAY);
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc8d 	bl	80001f0 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	1d39      	adds	r1, r7, #4
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <printMessages+0x40>)
 80018e2:	f003 f8a5 	bl	8004a30 <HAL_UART_Transmit>
	va_end(vaList);
}
 80018e6:	bf00      	nop
 80018e8:	3768      	adds	r7, #104	; 0x68
 80018ea:	46bd      	mov	sp, r7
 80018ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018f0:	b004      	add	sp, #16
 80018f2:	4770      	bx	lr
 80018f4:	20000170 	.word	0x20000170

080018f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b0b4      	sub	sp, #208	; 0xd0
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018fe:	f000 fbb8 	bl	8002072 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001902:	f000 f88d 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001906:	f000 f94d 	bl	8001ba4 <MX_GPIO_Init>
  MX_I2C3_Init();
 800190a:	f000 f8db 	bl	8001ac4 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 800190e:	f000 f919 	bl	8001b44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  int init=1, ctr=0;
 8001912:	2301      	movs	r3, #1
 8001914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char bufAngX_1[100],bufAngY_1[100];
	  init = MPU6050_Init(&hi2c3);
 800191e:	4837      	ldr	r0, [pc, #220]	; (80019fc <main+0x104>)
 8001920:	f7ff fb24 	bl	8000f6c <MPU6050_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  if(init==0){
 800192a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f5      	bne.n	800191e <main+0x26>
		  ctr++;
 8001932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001936:	3301      	adds	r3, #1
 8001938:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  MPU6050_Read_Accel(&hi2c3, &MPU6050_1);
 800193c:	4930      	ldr	r1, [pc, #192]	; (8001a00 <main+0x108>)
 800193e:	482f      	ldr	r0, [pc, #188]	; (80019fc <main+0x104>)
 8001940:	f7ff fb6e 	bl	8001020 <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro(&hi2c3, &MPU6050_1);
 8001944:	492e      	ldr	r1, [pc, #184]	; (8001a00 <main+0x108>)
 8001946:	482d      	ldr	r0, [pc, #180]	; (80019fc <main+0x104>)
 8001948:	f7ff fbd6 	bl	80010f8 <MPU6050_Read_Gyro>
		  MPU6050_Read_Temp(&hi2c3, &MPU6050_1);
 800194c:	492c      	ldr	r1, [pc, #176]	; (8001a00 <main+0x108>)
 800194e:	482b      	ldr	r0, [pc, #172]	; (80019fc <main+0x104>)
 8001950:	f7ff fc3a 	bl	80011c8 <MPU6050_Read_Temp>
		  MPU6050_Read_All(&hi2c3, &MPU6050_1);
 8001954:	492a      	ldr	r1, [pc, #168]	; (8001a00 <main+0x108>)
 8001956:	4829      	ldr	r0, [pc, #164]	; (80019fc <main+0x104>)
 8001958:	f7ff fdc6 	bl	80014e8 <MPU6050_Read_All>

		  AngX_1 = MPU6050_1.KalmanAngleX;
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <main+0x108>)
 800195e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f92f 	bl	8000bc8 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <main+0x10c>)
 800196e:	6013      	str	r3, [r2, #0]
		  AngY_1 = MPU6050_1.KalmanAngleY;
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <main+0x108>)
 8001972:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f925 	bl	8000bc8 <__aeabi_d2f>
 800197e:	4603      	mov	r3, r0
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <main+0x110>)
 8001982:	6013      	str	r3, [r2, #0]

		  gcvt (AngX_1, 5, bufAngX_1);
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <main+0x10c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fded 	bl	8000568 <__aeabi_f2d>
 800198e:	4604      	mov	r4, r0
 8001990:	460d      	mov	r5, r1
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	2005      	movs	r0, #5
 8001998:	ec45 4b10 	vmov	d0, r4, r5
 800199c:	f003 fd44 	bl	8005428 <gcvt>
		  gcvt (AngY_1, 5, bufAngY_1);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <main+0x110>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fddf 	bl	8000568 <__aeabi_f2d>
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019b2:	4619      	mov	r1, r3
 80019b4:	2005      	movs	r0, #5
 80019b6:	ec45 4b10 	vmov	d0, r4, r5
 80019ba:	f003 fd35 	bl	8005428 <gcvt>
		  printMessages("*********%d. MEASUREMENT*********\r\n",ctr);
 80019be:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <main+0x114>)
 80019c4:	f7ff ff76 	bl	80018b4 <printMessages>
		  printMessages("X angle:");
 80019c8:	4811      	ldr	r0, [pc, #68]	; (8001a10 <main+0x118>)
 80019ca:	f7ff ff73 	bl	80018b4 <printMessages>
		  printMessages(bufAngX_1);
 80019ce:	463b      	mov	r3, r7
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff6f 	bl	80018b4 <printMessages>
		  printMessages("\r\n");
 80019d6:	480f      	ldr	r0, [pc, #60]	; (8001a14 <main+0x11c>)
 80019d8:	f7ff ff6c 	bl	80018b4 <printMessages>
		  printMessages("Y angle:");
 80019dc:	480e      	ldr	r0, [pc, #56]	; (8001a18 <main+0x120>)
 80019de:	f7ff ff69 	bl	80018b4 <printMessages>
		  printMessages(bufAngY_1);
 80019e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff64 	bl	80018b4 <printMessages>
		  printMessages("\n\n");
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <main+0x124>)
 80019ee:	f7ff ff61 	bl	80018b4 <printMessages>
		  HAL_Delay (500);
 80019f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019f6:	f000 fbb1 	bl	800215c <HAL_Delay>
  {
 80019fa:	e790      	b.n	800191e <main+0x26>
 80019fc:	2000011c 	.word	0x2000011c
 8001a00:	200001f8 	.word	0x200001f8
 8001a04:	20000250 	.word	0x20000250
 8001a08:	20000254 	.word	0x20000254
 8001a0c:	08008628 	.word	0x08008628
 8001a10:	0800864c 	.word	0x0800864c
 8001a14:	08008658 	.word	0x08008658
 8001a18:	0800865c 	.word	0x0800865c
 8001a1c:	08008668 	.word	0x08008668

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b096      	sub	sp, #88	; 0x58
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2244      	movs	r2, #68	; 0x44
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fd48 	bl	80054c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a46:	f001 fc47 	bl	80032d8 <HAL_PWREx_ControlVoltageScaling>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a50:	f000 f8fe 	bl	8001c50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a54:	2310      	movs	r3, #16
 8001a56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a60:	2360      	movs	r3, #96	; 0x60
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a64:	2302      	movs	r3, #2
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a70:	2328      	movs	r3, #40	; 0x28
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fc7d 	bl	8003384 <HAL_RCC_OscConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a90:	f000 f8de 	bl	8001c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a94:	230f      	movs	r3, #15
 8001a96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 f883 	bl	8003bb8 <HAL_RCC_ClockConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ab8:	f000 f8ca 	bl	8001c50 <Error_Handler>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3758      	adds	r7, #88	; 0x58
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_I2C3_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <MX_I2C3_Init+0x7c>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001afe:	480e      	ldr	r0, [pc, #56]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001b00:	f000 fde0 	bl	80026c4 <HAL_I2C_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001b0a:	f000 f8a1 	bl	8001c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4809      	ldr	r0, [pc, #36]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001b12:	f001 fb3b 	bl	800318c <HAL_I2CEx_ConfigAnalogFilter>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001b1c:	f000 f898 	bl	8001c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001b20:	2100      	movs	r1, #0
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_I2C3_Init+0x74>)
 8001b24:	f001 fb7d 	bl	8003222 <HAL_I2CEx_ConfigDigitalFilter>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f000 f88f 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000011c 	.word	0x2000011c
 8001b3c:	40005c00 	.word	0x40005c00
 8001b40:	10909cec 	.word	0x10909cec

08001b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <MX_USART3_UART_Init+0x5c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART3_UART_Init+0x58>)
 8001b88:	f002 ff04 	bl	8004994 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b92:	f000 f85d 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000170 	.word	0x20000170
 8001ba0:	40004800 	.word	0x40004800

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_GPIO_Init+0xa0>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf0:	4815      	ldr	r0, [pc, #84]	; (8001c48 <MX_GPIO_Init+0xa4>)
 8001bf2:	f000 fd4f 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2180      	movs	r1, #128	; 0x80
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_GPIO_Init+0xa8>)
 8001bfc:	f000 fd4a 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	480b      	ldr	r0, [pc, #44]	; (8001c48 <MX_GPIO_Init+0xa4>)
 8001c1a:	f000 fba9 	bl	8002370 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_GPIO_Init+0xa8>)
 8001c36:	f000 fb9b 	bl	8002370 <HAL_GPIO_Init>

}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000400 	.word	0x48000400
 8001c4c:	48000800 	.word	0x48000800

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <Error_Handler+0x8>
	...

08001c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_MspInit+0x44>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0ac      	sub	sp, #176	; 0xb0
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	228c      	movs	r2, #140	; 0x8c
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fbfd 	bl	80054c4 <memset>
  if(hi2c->Instance==I2C3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <HAL_I2C_MspInit+0xb0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d13b      	bne.n	8001d4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 f98c 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cee:	f7ff ffaf 	bl	8001c50 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_I2C_MspInit+0xb4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_I2C_MspInit+0xb4>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_I2C_MspInit+0xb4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d10:	2312      	movs	r3, #18
 8001d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d22:	2304      	movs	r3, #4
 8001d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480b      	ldr	r0, [pc, #44]	; (8001d5c <HAL_I2C_MspInit+0xb8>)
 8001d30:	f000 fb1e 	bl	8002370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_I2C_MspInit+0xb4>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_I2C_MspInit+0xb4>)
 8001d3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_I2C_MspInit+0xb4>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	37b0      	adds	r7, #176	; 0xb0
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40005c00 	.word	0x40005c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48000800 	.word	0x48000800

08001d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0ac      	sub	sp, #176	; 0xb0
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	228c      	movs	r2, #140	; 0x8c
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fb9f 	bl	80054c4 <memset>
  if(huart->Instance==USART3)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_UART_MspInit+0xb0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d13a      	bne.n	8001e06 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d90:	2304      	movs	r3, #4
 8001d92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 f92f 	bl	8004000 <HAL_RCCEx_PeriphCLKConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da8:	f7ff ff52 	bl	8001c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_UART_MspInit+0xb4>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a18      	ldr	r2, [pc, #96]	; (8001e14 <HAL_UART_MspInit+0xb4>)
 8001db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <HAL_UART_MspInit+0xb4>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_UART_MspInit+0xb4>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_UART_MspInit+0xb4>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_UART_MspInit+0xb4>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ddc:	2330      	movs	r3, #48	; 0x30
 8001dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001df4:	2307      	movs	r3, #7
 8001df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_UART_MspInit+0xb8>)
 8001e02:	f000 fab5 	bl	8002370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	37b0      	adds	r7, #176	; 0xb0
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004800 	.word	0x40004800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000800 	.word	0x48000800

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <NMI_Handler+0x4>

08001e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e26:	e7fe      	b.n	8001e26 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <MemManage_Handler+0x4>

08001e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e68:	f000 f958 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
	return 1;
 8001e74:	2301      	movs	r3, #1
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e8a:	f003 faf1 	bl	8005470 <__errno>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2216      	movs	r2, #22
 8001e92:	601a      	str	r2, [r3, #0]
	return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_exit>:

void _exit (int status)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ffe7 	bl	8001e80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eb2:	e7fe      	b.n	8001eb2 <_exit+0x12>

08001eb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	e00a      	b.n	8001edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec6:	f3af 8000 	nop.w
 8001eca:	4601      	mov	r1, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dbf0      	blt.n	8001ec6 <_read+0x12>
	}

return len;
 8001ee4:	687b      	ldr	r3, [r7, #4]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e009      	b.n	8001f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	60ba      	str	r2, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dbf1      	blt.n	8001f00 <_write+0x12>
	}
	return len;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_close>:

int _close(int file)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_isatty>:

int _isatty(int file)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
	return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <_sbrk+0x5c>)
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <_sbrk+0x60>)
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <_sbrk+0x64>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <_sbrk+0x68>)
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d207      	bcs.n	8001fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc0:	f003 fa56 	bl	8005470 <__errno>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	e009      	b.n	8001fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <_sbrk+0x64>)
 8001fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20050000 	.word	0x20050000
 8001ff0:	00000400 	.word	0x00000400
 8001ff4:	20000258 	.word	0x20000258
 8001ff8:	20000270 	.word	0x20000270

08001ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002024:	f7ff ffea 	bl	8001ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <LoopForever+0x6>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	; (8002060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <LoopForever+0xe>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	; (800206c <LoopForever+0x16>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f003 fa15 	bl	800547c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002052:	f7ff fc51 	bl	80018f8 <main>

08002056 <LoopForever>:

LoopForever:
    b LoopForever
 8002056:	e7fe      	b.n	8002056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002058:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002064:	080089f8 	.word	0x080089f8
  ldr r2, =_sbss
 8002068:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800206c:	20000270 	.word	0x20000270

08002070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC1_2_IRQHandler>

08002072 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f943 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f80e 	bl	80020a4 <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	e001      	b.n	8002098 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002094:	f7ff fde2 	bl	8001c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002098:	79fb      	ldrb	r3, [r7, #7]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <HAL_InitTick+0x6c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <HAL_InitTick+0x70>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_InitTick+0x6c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f941 	bl	8002356 <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b0f      	cmp	r3, #15
 80020de:	d809      	bhi.n	80020f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e0:	2200      	movs	r2, #0
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f000 f919 	bl	800231e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_InitTick+0x74>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e007      	b.n	8002104 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e004      	b.n	8002104 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e001      	b.n	8002104 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000098 	.word	0x20000098
 8002114:	20000090 	.word	0x20000090
 8002118:	20000094 	.word	0x20000094

0800211c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x20>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_IncTick+0x24>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000098 	.word	0x20000098
 8002140:	2000025c 	.word	0x2000025c

08002144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return uwTick;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_GetTick+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000025c 	.word	0x2000025c

0800215c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff ffee 	bl	8002144 <HAL_GetTick>
 8002168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d005      	beq.n	8002182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_Delay+0x44>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002182:	bf00      	nop
 8002184:	f7ff ffde 	bl	8002144 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	429a      	cmp	r2, r3
 8002192:	d8f7      	bhi.n	8002184 <HAL_Delay+0x28>
  {
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000098 	.word	0x20000098

080021a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c0:	4013      	ands	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <__NVIC_SetPriorityGrouping+0x44>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	60d3      	str	r3, [r2, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_GetPriorityGrouping+0x18>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f003 0307 	and.w	r3, r3, #7
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff47 	bl	80021a4 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff5c 	bl	80021ec <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffb0 	bl	80022c4 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237e:	e166      	b.n	800264e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2101      	movs	r1, #1
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8158 	beq.w	8002648 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d005      	beq.n	80023b0 <HAL_GPIO_Init+0x40>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d130      	bne.n	8002412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e6:	2201      	movs	r2, #1
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	091b      	lsrs	r3, r3, #4
 80023fc:	f003 0201 	and.w	r2, r3, #1
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b03      	cmp	r3, #3
 800241c:	d017      	beq.n	800244e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	2203      	movs	r2, #3
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d123      	bne.n	80024a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	08da      	lsrs	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3208      	adds	r2, #8
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80b2 	beq.w	8002648 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e4:	4b61      	ldr	r3, [pc, #388]	; (800266c <HAL_GPIO_Init+0x2fc>)
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e8:	4a60      	ldr	r2, [pc, #384]	; (800266c <HAL_GPIO_Init+0x2fc>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6613      	str	r3, [r2, #96]	; 0x60
 80024f0:	4b5e      	ldr	r3, [pc, #376]	; (800266c <HAL_GPIO_Init+0x2fc>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024fc:	4a5c      	ldr	r2, [pc, #368]	; (8002670 <HAL_GPIO_Init+0x300>)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002526:	d02b      	beq.n	8002580 <HAL_GPIO_Init+0x210>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_GPIO_Init+0x304>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d025      	beq.n	800257c <HAL_GPIO_Init+0x20c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a51      	ldr	r2, [pc, #324]	; (8002678 <HAL_GPIO_Init+0x308>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01f      	beq.n	8002578 <HAL_GPIO_Init+0x208>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a50      	ldr	r2, [pc, #320]	; (800267c <HAL_GPIO_Init+0x30c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d019      	beq.n	8002574 <HAL_GPIO_Init+0x204>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a4f      	ldr	r2, [pc, #316]	; (8002680 <HAL_GPIO_Init+0x310>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_GPIO_Init+0x200>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a4e      	ldr	r2, [pc, #312]	; (8002684 <HAL_GPIO_Init+0x314>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00d      	beq.n	800256c <HAL_GPIO_Init+0x1fc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a4d      	ldr	r2, [pc, #308]	; (8002688 <HAL_GPIO_Init+0x318>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <HAL_GPIO_Init+0x1f8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a4c      	ldr	r2, [pc, #304]	; (800268c <HAL_GPIO_Init+0x31c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_GPIO_Init+0x1f4>
 8002560:	2307      	movs	r3, #7
 8002562:	e00e      	b.n	8002582 <HAL_GPIO_Init+0x212>
 8002564:	2308      	movs	r3, #8
 8002566:	e00c      	b.n	8002582 <HAL_GPIO_Init+0x212>
 8002568:	2306      	movs	r3, #6
 800256a:	e00a      	b.n	8002582 <HAL_GPIO_Init+0x212>
 800256c:	2305      	movs	r3, #5
 800256e:	e008      	b.n	8002582 <HAL_GPIO_Init+0x212>
 8002570:	2304      	movs	r3, #4
 8002572:	e006      	b.n	8002582 <HAL_GPIO_Init+0x212>
 8002574:	2303      	movs	r3, #3
 8002576:	e004      	b.n	8002582 <HAL_GPIO_Init+0x212>
 8002578:	2302      	movs	r3, #2
 800257a:	e002      	b.n	8002582 <HAL_GPIO_Init+0x212>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <HAL_GPIO_Init+0x212>
 8002580:	2300      	movs	r3, #0
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	f002 0203 	and.w	r2, r2, #3
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	4093      	lsls	r3, r2
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002592:	4937      	ldr	r1, [pc, #220]	; (8002670 <HAL_GPIO_Init+0x300>)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	089b      	lsrs	r3, r3, #2
 8002598:	3302      	adds	r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_GPIO_Init+0x320>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c4:	4a32      	ldr	r2, [pc, #200]	; (8002690 <HAL_GPIO_Init+0x320>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ca:	4b31      	ldr	r3, [pc, #196]	; (8002690 <HAL_GPIO_Init+0x320>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ee:	4a28      	ldr	r2, [pc, #160]	; (8002690 <HAL_GPIO_Init+0x320>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_GPIO_Init+0x320>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_GPIO_Init+0x320>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_GPIO_Init+0x320>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43db      	mvns	r3, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <HAL_GPIO_Init+0x320>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3301      	adds	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f ae91 	bne.w	8002380 <HAL_GPIO_Init+0x10>
  }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40021000 	.word	0x40021000
 8002670:	40010000 	.word	0x40010000
 8002674:	48000400 	.word	0x48000400
 8002678:	48000800 	.word	0x48000800
 800267c:	48000c00 	.word	0x48000c00
 8002680:	48001000 	.word	0x48001000
 8002684:	48001400 	.word	0x48001400
 8002688:	48001800 	.word	0x48001800
 800268c:	48001c00 	.word	0x48001c00
 8002690:	40010400 	.word	0x40010400

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e081      	b.n	80027da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fada 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e006      	b.n	800274c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800274a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d104      	bne.n	800275e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800275c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800276c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69d9      	ldr	r1, [r3, #28]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1a      	ldr	r2, [r3, #32]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	460b      	mov	r3, r1
 80027f8:	813b      	strh	r3, [r7, #8]
 80027fa:	4613      	mov	r3, r2
 80027fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	f040 80f9 	bne.w	80029fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_I2C_Mem_Write+0x34>
 8002812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ed      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Mem_Write+0x4e>
 800282e:	2302      	movs	r3, #2
 8002830:	e0e6      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283a:	f7ff fc83 	bl	8002144 <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2319      	movs	r3, #25
 8002846:	2201      	movs	r2, #1
 8002848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fac3 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0d1      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002884:	88f8      	ldrh	r0, [r7, #6]
 8002886:	893a      	ldrh	r2, [r7, #8]
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f9d3 	bl	8002c40 <I2C_RequestMemoryWrite>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0a9      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2bff      	cmp	r3, #255	; 0xff
 80028b4:	d90e      	bls.n	80028d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	2300      	movs	r3, #0
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fc2b 	bl	8003128 <I2C_TransferConfig>
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	8979      	ldrh	r1, [r7, #10]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fc1a 	bl	8003128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 faad 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e07b      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d034      	beq.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d130      	bne.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fa3f 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e04d      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2bff      	cmp	r3, #255	; 0xff
 800296c:	d90e      	bls.n	800298c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fbcf 	bl	8003128 <I2C_TransferConfig>
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fbbe 	bl	8003128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d19e      	bne.n	80028f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fa8c 	bl	8002ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01a      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_I2C_Mem_Write+0x224>)
 80029de:	400b      	ands	r3, r1
 80029e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	fe00e800 	.word	0xfe00e800

08002a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	813b      	strh	r3, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	f040 80fd 	bne.w	8002c2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x34>
 8002a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0f1      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x4e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e0ea      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a62:	f7ff fb6f 	bl	8002144 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2319      	movs	r3, #25
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f9af 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0d5      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2222      	movs	r2, #34	; 0x22
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aac:	88f8      	ldrh	r0, [r7, #6]
 8002aae:	893a      	ldrh	r2, [r7, #8]
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4603      	mov	r3, r0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f913 	bl	8002ce8 <I2C_RequestMemoryRead>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0ad      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2bff      	cmp	r3, #255	; 0xff
 8002adc:	d90e      	bls.n	8002afc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b52      	ldr	r3, [pc, #328]	; (8002c38 <HAL_I2C_Mem_Read+0x22c>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fb17 	bl	8003128 <I2C_TransferConfig>
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_I2C_Mem_Read+0x22c>)
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fb06 	bl	8003128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b22:	2200      	movs	r2, #0
 8002b24:	2104      	movs	r1, #4
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f956 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07c      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d034      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x1d0>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d130      	bne.n	8002bdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	2200      	movs	r2, #0
 8002b82:	2180      	movs	r1, #128	; 0x80
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f927 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04d      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2bff      	cmp	r3, #255	; 0xff
 8002b9c:	d90e      	bls.n	8002bbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	8979      	ldrh	r1, [r7, #10]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fab7 	bl	8003128 <I2C_TransferConfig>
 8002bba:	e00f      	b.n	8002bdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 faa6 	bl	8003128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d19a      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f974 	bl	8002ed8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e01a      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_I2C_Mem_Read+0x230>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
  }
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	80002400 	.word	0x80002400
 8002c3c:	fe00e800 	.word	0xfe00e800

08002c40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	460b      	mov	r3, r1
 8002c54:	813b      	strh	r3, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <I2C_RequestMemoryWrite+0xa4>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fa5d 	bl	8003128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f8f0 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02c      	b.n	8002cdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c88:	893b      	ldrh	r3, [r7, #8]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28
 8002c92:	e015      	b.n	8002cc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c94:	893b      	ldrh	r3, [r7, #8]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	69b9      	ldr	r1, [r7, #24]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8d6 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e012      	b.n	8002cdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb6:	893b      	ldrh	r3, [r7, #8]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f884 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	80002000 	.word	0x80002000

08002ce8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	8979      	ldrh	r1, [r7, #10]
 8002d08:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <I2C_RequestMemoryRead+0xa4>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa0a 	bl	8003128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f89d 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e02c      	b.n	8002d82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2e:	893b      	ldrh	r3, [r7, #8]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
 8002d38:	e015      	b.n	8002d66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d3a:	893b      	ldrh	r3, [r7, #8]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f883 	bl	8002e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e012      	b.n	8002d82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d5c:	893b      	ldrh	r3, [r7, #8]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f831 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	80002000 	.word	0x80002000

08002d90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d007      	beq.n	8002dcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	619a      	str	r2, [r3, #24]
  }
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	e022      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d01e      	beq.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7ff f9a7 	bl	8002144 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d113      	bne.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e00f      	b.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d0cd      	beq.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e64:	e02c      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f870 	bl	8002f50 <I2C_IsErrorOccurred>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e02a      	b.n	8002ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d01e      	beq.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7ff f95f 	bl	8002144 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d113      	bne.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d1cb      	bne.n	8002e66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee4:	e028      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f830 	bl	8002f50 <I2C_IsErrorOccurred>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e026      	b.n	8002f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7ff f923 	bl	8002144 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d302      	bcc.n	8002f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d113      	bne.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d1cf      	bne.n	8002ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d075      	beq.n	8003068 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f84:	e056      	b.n	8003034 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d052      	beq.n	8003034 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f8e:	f7ff f8d9 	bl	8002144 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d302      	bcc.n	8002fa4 <I2C_IsErrorOccurred+0x54>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d147      	bne.n	8003034 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc6:	d12e      	bne.n	8003026 <I2C_IsErrorOccurred+0xd6>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fce:	d02a      	beq.n	8003026 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d027      	beq.n	8003026 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fe6:	f7ff f8ad 	bl	8002144 <HAL_GetTick>
 8002fea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fec:	e01b      	b.n	8003026 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fee:	f7ff f8a9 	bl	8002144 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b19      	cmp	r3, #25
 8002ffa:	d914      	bls.n	8003026 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b20      	cmp	r3, #32
 8003032:	d1dc      	bne.n	8002fee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b20      	cmp	r3, #32
 8003040:	d003      	beq.n	800304a <I2C_IsErrorOccurred+0xfa>
 8003042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003046:	2b00      	cmp	r3, #0
 8003048:	d09d      	beq.n	8002f86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800304a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2220      	movs	r2, #32
 8003058:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f043 0301 	orr.w	r3, r3, #1
 8003080:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800308a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00b      	beq.n	80030d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01c      	beq.n	8003118 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff fe56 	bl	8002d90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <I2C_IsErrorOccurred+0x1d4>)
 80030f0:	400b      	ands	r3, r1
 80030f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800311c:	4618      	mov	r0, r3
 800311e:	3728      	adds	r7, #40	; 0x28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	fe00e800 	.word	0xfe00e800

08003128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	817b      	strh	r3, [r7, #10]
 8003136:	4613      	mov	r3, r2
 8003138:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003140:	7a7b      	ldrb	r3, [r7, #9]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003148:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	4313      	orrs	r3, r2
 8003152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003156:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	0d5b      	lsrs	r3, r3, #21
 8003162:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <I2C_TransferConfig+0x60>)
 8003168:	430b      	orrs	r3, r1
 800316a:	43db      	mvns	r3, r3
 800316c:	ea02 0103 	and.w	r1, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	03ff63ff 	.word	0x03ff63ff

0800318c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d138      	bne.n	8003214 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e032      	b.n	8003216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d139      	bne.n	80032ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003242:	2302      	movs	r3, #2
 8003244:	e033      	b.n	80032ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2224      	movs	r2, #36	; 0x24
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003274:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40007000 	.word	0x40007000

080032d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e6:	d130      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e8:	4b23      	ldr	r3, [pc, #140]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f4:	d038      	beq.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003304:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2232      	movs	r2, #50	; 0x32
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331c:	e002      	b.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3b01      	subs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d102      	bne.n	8003338 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f2      	bne.n	800331e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d110      	bne.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00f      	b.n	800336a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d007      	beq.n	8003368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003358:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003360:	4a05      	ldr	r2, [pc, #20]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003366:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40007000 	.word	0x40007000
 800337c:	20000090 	.word	0x20000090
 8003380:	431bde83 	.word	0x431bde83

08003384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f000 bc08 	b.w	8003ba8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003398:	4b96      	ldr	r3, [pc, #600]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a2:	4b94      	ldr	r3, [pc, #592]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80e4 	beq.w	8003582 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4c>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	f040 808b 	bne.w	80034de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	f040 8087 	bne.w	80034de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033d0:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_OscConfig+0x64>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e3df      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_RCC_OscConfig+0x7e>
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003400:	e005      	b.n	800340e <HAL_RCC_OscConfig+0x8a>
 8003402:	4b7c      	ldr	r3, [pc, #496]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340e:	4293      	cmp	r3, r2
 8003410:	d223      	bcs.n	800345a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fd92 	bl	8003f40 <RCC_SetFlashLatencyFromMSIRange>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e3c0      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a72      	ldr	r2, [pc, #456]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	496d      	ldr	r1, [pc, #436]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003444:	4b6b      	ldr	r3, [pc, #428]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	4968      	ldr	r1, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
 8003458:	e025      	b.n	80034a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345a:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003460:	f043 0308 	orr.w	r3, r3, #8
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4960      	ldr	r1, [pc, #384]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003478:	4b5e      	ldr	r3, [pc, #376]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	495b      	ldr	r1, [pc, #364]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fd52 	bl	8003f40 <RCC_SetFlashLatencyFromMSIRange>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e380      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034a6:	f000 fc87 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	4950      	ldr	r1, [pc, #320]	; (80035f8 <HAL_RCC_OscConfig+0x274>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_RCC_OscConfig+0x278>)
 80034c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034c6:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_RCC_OscConfig+0x27c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fdea 	bl	80020a4 <HAL_InitTick>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d052      	beq.n	8003580 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	e364      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d032      	beq.n	800354c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034e6:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a42      	ldr	r2, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f2:	f7fe fe27 	bl	8002144 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034fa:	f7fe fe23 	bl	8002144 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e34d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800350c:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003518:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a35      	ldr	r2, [pc, #212]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800351e:	f043 0308 	orr.w	r3, r3, #8
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4930      	ldr	r1, [pc, #192]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	492b      	ldr	r1, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e01a      	b.n	8003582 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003558:	f7fe fdf4 	bl	8002144 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003560:	f7fe fdf0 	bl	8002144 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e31a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1dc>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d073      	beq.n	8003676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_OscConfig+0x21c>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d10e      	bne.n	80035b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d063      	beq.n	8003674 <HAL_RCC_OscConfig+0x2f0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d15f      	bne.n	8003674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e2f7      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x24c>
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e025      	b.n	800361c <HAL_RCC_OscConfig+0x298>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d114      	bne.n	8003604 <HAL_RCC_OscConfig+0x280>
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a02      	ldr	r2, [pc, #8]	; (80035f4 <HAL_RCC_OscConfig+0x270>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e013      	b.n	800361c <HAL_RCC_OscConfig+0x298>
 80035f4:	40021000 	.word	0x40021000
 80035f8:	0800866c 	.word	0x0800866c
 80035fc:	20000090 	.word	0x20000090
 8003600:	20000094 	.word	0x20000094
 8003604:	4ba0      	ldr	r3, [pc, #640]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a9f      	ldr	r2, [pc, #636]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800360a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b9d      	ldr	r3, [pc, #628]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a9c      	ldr	r2, [pc, #624]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe fd8e 	bl	8002144 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fe fd8a 	bl	8002144 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e2b4      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800363e:	4b92      	ldr	r3, [pc, #584]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x2a8>
 800364a:	e014      	b.n	8003676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fd7a 	bl	8002144 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003654:	f7fe fd76 	bl	8002144 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e2a0      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003666:	4b88      	ldr	r3, [pc, #544]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x2d0>
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d060      	beq.n	8003744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x310>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d119      	bne.n	80036c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d116      	bne.n	80036c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003694:	4b7c      	ldr	r3, [pc, #496]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_OscConfig+0x328>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e27d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	4973      	ldr	r1, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c0:	e040      	b.n	8003744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d023      	beq.n	8003712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ca:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6e      	ldr	r2, [pc, #440]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fd35 	bl	8002144 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036de:	f7fe fd31 	bl	8002144 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e25b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f0:	4b65      	ldr	r3, [pc, #404]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b62      	ldr	r3, [pc, #392]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	495f      	ldr	r1, [pc, #380]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	e018      	b.n	8003744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b5d      	ldr	r3, [pc, #372]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5c      	ldr	r2, [pc, #368]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371e:	f7fe fd11 	bl	8002144 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003726:	f7fe fd0d 	bl	8002144 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e237      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003738:	4b53      	ldr	r3, [pc, #332]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d03c      	beq.n	80037ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01c      	beq.n	8003792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003758:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	4a4a      	ldr	r2, [pc, #296]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe fcec 	bl	8002144 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe fce8 	bl	8002144 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e212      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <HAL_RCC_OscConfig+0x3ec>
 8003790:	e01b      	b.n	80037ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003792:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	4a3b      	ldr	r2, [pc, #236]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a2:	f7fe fccf 	bl	8002144 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037aa:	f7fe fccb 	bl	8002144 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e1f5      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037bc:	4b32      	ldr	r3, [pc, #200]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ef      	bne.n	80037aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80a6 	beq.w	8003924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037dc:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	4a26      	ldr	r2, [pc, #152]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6593      	str	r3, [r2, #88]	; 0x58
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_RCC_OscConfig+0x508>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d118      	bne.n	8003842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_RCC_OscConfig+0x508>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x508>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381c:	f7fe fc92 	bl	8002144 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fe fc8e 	bl	8002144 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1b8      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_RCC_OscConfig+0x508>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d108      	bne.n	800385c <HAL_RCC_OscConfig+0x4d8>
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385a:	e029      	b.n	80038b0 <HAL_RCC_OscConfig+0x52c>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d115      	bne.n	8003890 <HAL_RCC_OscConfig+0x50c>
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	4a03      	ldr	r2, [pc, #12]	; (8003888 <HAL_RCC_OscConfig+0x504>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003884:	e014      	b.n	80038b0 <HAL_RCC_OscConfig+0x52c>
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000
 800388c:	40007000 	.word	0x40007000
 8003890:	4b9d      	ldr	r3, [pc, #628]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	4a9c      	ldr	r2, [pc, #624]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a0:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	4a98      	ldr	r2, [pc, #608]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 80038a8:	f023 0304 	bic.w	r3, r3, #4
 80038ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d016      	beq.n	80038e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fe fc44 	bl	8002144 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fe fc40 	bl	8002144 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e168      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d6:	4b8c      	ldr	r3, [pc, #560]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ed      	beq.n	80038c0 <HAL_RCC_OscConfig+0x53c>
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fe fc2d 	bl	8002144 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe fc29 	bl	8002144 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e151      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003904:	4b80      	ldr	r3, [pc, #512]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1ed      	bne.n	80038ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003912:	7ffb      	ldrb	r3, [r7, #31]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	4a7a      	ldr	r2, [pc, #488]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003922:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03c      	beq.n	80039aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01c      	beq.n	8003972 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003938:	4b73      	ldr	r3, [pc, #460]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 800393a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393e:	4a72      	ldr	r2, [pc, #456]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe fbfc 	bl	8002144 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003950:	f7fe fbf8 	bl	8002144 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e122      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003962:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCC_OscConfig+0x5cc>
 8003970:	e01b      	b.n	80039aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003972:	4b65      	ldr	r3, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003978:	4a63      	ldr	r2, [pc, #396]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fe fbdf 	bl	8002144 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800398a:	f7fe fbdb 	bl	8002144 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e105      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 800399e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ef      	bne.n	800398a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80f9 	beq.w	8003ba6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	f040 80cf 	bne.w	8003b5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039be:	4b52      	ldr	r3, [pc, #328]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d12c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	3b01      	subs	r3, #1
 80039de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d123      	bne.n	8003a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d11b      	bne.n	8003a2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d113      	bne.n	8003a2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	3b01      	subs	r3, #1
 8003a12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d109      	bne.n	8003a2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	3b01      	subs	r3, #1
 8003a26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d071      	beq.n	8003b10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d068      	beq.n	8003b04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a32:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a3e:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0ac      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a5a:	f7fe fb73 	bl	8002144 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe fb6f 	bl	8002144 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e099      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f0      	bne.n	8003a62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x788>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a9a:	0212      	lsls	r2, r2, #8
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aa2:	0852      	lsrs	r2, r2, #1
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0552      	lsls	r2, r2, #21
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aae:	0852      	lsrs	r2, r2, #1
 8003ab0:	3a01      	subs	r2, #1
 8003ab2:	0652      	lsls	r2, r2, #25
 8003ab4:	4311      	orrs	r1, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aba:	06d2      	lsls	r2, r2, #27
 8003abc:	430a      	orrs	r2, r1
 8003abe:	4912      	ldr	r1, [pc, #72]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003adc:	f7fe fb32 	bl	8002144 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fe fb2e 	bl	8002144 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e058      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_RCC_OscConfig+0x784>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b02:	e050      	b.n	8003ba6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e04f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d144      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b34:	f7fe fb06 	bl	8002144 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe fb02 	bl	8002144 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e02c      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4e:	4b18      	ldr	r3, [pc, #96]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x7b8>
 8003b5a:	e024      	b.n	8003ba6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d01f      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fae9 	bl	8002144 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe fae5 	bl	8002144 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e00f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4905      	ldr	r1, [pc, #20]	; (8003bb0 <HAL_RCC_OscConfig+0x82c>)
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_OscConfig+0x830>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
 8003ba0:	e001      	b.n	8003ba6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	feeefffc 	.word	0xfeeefffc

08003bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0e7      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b75      	ldr	r3, [pc, #468]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b72      	ldr	r3, [pc, #456]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	4970      	ldr	r1, [pc, #448]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b6e      	ldr	r3, [pc, #440]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0cf      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d010      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b66      	ldr	r3, [pc, #408]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d908      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4960      	ldr	r1, [pc, #384]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d04c      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	4b5a      	ldr	r3, [pc, #360]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d121      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0a6      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c56:	4b54      	ldr	r3, [pc, #336]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d115      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e09a      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6e:	4b4e      	ldr	r3, [pc, #312]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e08e      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7e:	4b4a      	ldr	r3, [pc, #296]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e086      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4943      	ldr	r1, [pc, #268]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca0:	f7fe fa50 	bl	8002144 <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fe fa4c 	bl	8002144 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e06e      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d208      	bcs.n	8003cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	492b      	ldr	r1, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d210      	bcs.n	8003d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 0207 	bic.w	r2, r3, #7
 8003d14:	4923      	ldr	r1, [pc, #140]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <HAL_RCC_ClockConfig+0x1ec>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e036      	b.n	8003d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4918      	ldr	r1, [pc, #96]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4910      	ldr	r1, [pc, #64]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d6c:	f000 f824 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	490b      	ldr	r1, [pc, #44]	; (8003dac <HAL_RCC_ClockConfig+0x1f4>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1fc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe f987 	bl	80020a4 <HAL_InitTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40021000 	.word	0x40021000
 8003dac:	0800866c 	.word	0x0800866c
 8003db0:	20000090 	.word	0x20000090
 8003db4:	20000094 	.word	0x20000094

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d121      	bne.n	8003e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d11e      	bne.n	8003e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dec:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	e005      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e08:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e14:	4a2b      	ldr	r2, [pc, #172]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d102      	bne.n	8003e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	e004      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d134      	bne.n	8003eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e46:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d003      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0xac>
 8003e5c:	e005      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e60:	617b      	str	r3, [r7, #20]
      break;
 8003e62:	e005      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e66:	617b      	str	r3, [r7, #20]
      break;
 8003e68:	e002      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	617b      	str	r3, [r7, #20]
      break;
 8003e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	fb03 f202 	mul.w	r2, r3, r2
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e96:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	0e5b      	lsrs	r3, r3, #25
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	08008684 	.word	0x08008684
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200

08003ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000090 	.word	0x20000090

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4904      	ldr	r1, [pc, #16]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	0800867c 	.word	0x0800867c

08003f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f18:	f7ff ffda 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0adb      	lsrs	r3, r3, #11
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800867c 	.word	0x0800867c

08003f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f58:	f7ff f9b0 	bl	80032bc <HAL_PWREx_GetVoltageRange>
 8003f5c:	6178      	str	r0, [r7, #20]
 8003f5e:	e014      	b.n	8003f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f60:	4b25      	ldr	r3, [pc, #148]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	4a24      	ldr	r2, [pc, #144]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6c:	4b22      	ldr	r3, [pc, #136]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f78:	f7ff f9a0 	bl	80032bc <HAL_PWREx_GetVoltageRange>
 8003f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d10b      	bne.n	8003faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b80      	cmp	r3, #128	; 0x80
 8003f96:	d919      	bls.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f9c:	d902      	bls.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e013      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	e010      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d902      	bls.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e00a      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d102      	bne.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e004      	b.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b70      	cmp	r3, #112	; 0x70
 8003fc6:	d101      	bne.n	8003fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 0207 	bic.w	r2, r3, #7
 8003fd4:	4909      	ldr	r1, [pc, #36]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40022000 	.word	0x40022000

08004000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004008:	2300      	movs	r3, #0
 800400a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800400c:	2300      	movs	r3, #0
 800400e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004018:	2b00      	cmp	r3, #0
 800401a:	d041      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004024:	d02a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800402a:	d824      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800402c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004030:	d008      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004036:	d81e      	bhi.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800403c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004040:	d010      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004042:	e018      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004044:	4b86      	ldr	r3, [pc, #536]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a85      	ldr	r2, [pc, #532]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004050:	e015      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f000 facd 	bl	80045f8 <RCCEx_PLLSAI1_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004062:	e00c      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3320      	adds	r3, #32
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fbb6 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004074:	e003      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	74fb      	strb	r3, [r7, #19]
      break;
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800407c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004084:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004092:	4973      	ldr	r1, [pc, #460]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d041      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040b4:	d02a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040ba:	d824      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c0:	d008      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040c6:	d81e      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d0:	d010      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040d2:	e018      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040d4:	4b62      	ldr	r3, [pc, #392]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a61      	ldr	r2, [pc, #388]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040e0:	e015      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fa85 	bl	80045f8 <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040f2:	e00c      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3320      	adds	r3, #32
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb6e 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004104:	e003      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	74fb      	strb	r3, [r7, #19]
      break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800410c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004114:	4b52      	ldr	r3, [pc, #328]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004122:	494f      	ldr	r1, [pc, #316]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800412a:	e001      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a0 	beq.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413e:	2300      	movs	r3, #0
 8004140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b41      	ldr	r3, [pc, #260]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	4a40      	ldr	r2, [pc, #256]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	6593      	str	r3, [r2, #88]	; 0x58
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004170:	2301      	movs	r3, #1
 8004172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004174:	4b3b      	ldr	r3, [pc, #236]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3a      	ldr	r2, [pc, #232]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800417a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004180:	f7fd ffe0 	bl	8002144 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004186:	e009      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004188:	f7fd ffdc 	bl	8002144 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d902      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	74fb      	strb	r3, [r7, #19]
        break;
 800419a:	e005      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800419c:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d15c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041ae:	4b2c      	ldr	r3, [pc, #176]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01f      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d019      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041cc:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	4a20      	ldr	r2, [pc, #128]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041e8:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd ff9b 	bl	8002144 <HAL_GetTick>
 800420e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004210:	e00b      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd ff97 	bl	8002144 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d902      	bls.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	74fb      	strb	r3, [r7, #19]
            break;
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ec      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10c      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	4904      	ldr	r1, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004256:	e009      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	74bb      	strb	r3, [r7, #18]
 800425c:	e006      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000
 8004264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	7cfb      	ldrb	r3, [r7, #19]
 800426a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800426c:	7c7b      	ldrb	r3, [r7, #17]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004272:	4ba6      	ldr	r3, [pc, #664]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	4aa5      	ldr	r2, [pc, #660]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800427c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800428a:	4ba0      	ldr	r3, [pc, #640]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f023 0203 	bic.w	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	499c      	ldr	r1, [pc, #624]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ac:	4b97      	ldr	r3, [pc, #604]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f023 020c 	bic.w	r2, r3, #12
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	4994      	ldr	r1, [pc, #592]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ce:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	498b      	ldr	r1, [pc, #556]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042f0:	4b86      	ldr	r3, [pc, #536]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	4983      	ldr	r1, [pc, #524]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004312:	4b7e      	ldr	r3, [pc, #504]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004320:	497a      	ldr	r1, [pc, #488]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004334:	4b75      	ldr	r3, [pc, #468]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004342:	4972      	ldr	r1, [pc, #456]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004356:	4b6d      	ldr	r3, [pc, #436]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	4969      	ldr	r1, [pc, #420]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004378:	4b64      	ldr	r3, [pc, #400]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004386:	4961      	ldr	r1, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800439a:	4b5c      	ldr	r3, [pc, #368]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	4958      	ldr	r1, [pc, #352]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043bc:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	4950      	ldr	r1, [pc, #320]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043de:	4b4b      	ldr	r3, [pc, #300]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	4947      	ldr	r1, [pc, #284]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004400:	4b42      	ldr	r3, [pc, #264]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004406:	f023 0203 	bic.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440e:	493f      	ldr	r1, [pc, #252]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d028      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004422:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4936      	ldr	r1, [pc, #216]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004440:	d106      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004442:	4b32      	ldr	r3, [pc, #200]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4a31      	ldr	r2, [pc, #196]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004448:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444c:	60d3      	str	r3, [r2, #12]
 800444e:	e011      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f8c9 	bl	80045f8 <RCCEx_PLLSAI1_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d028      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004480:	4b22      	ldr	r3, [pc, #136]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448e:	491f      	ldr	r1, [pc, #124]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800449e:	d106      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a19      	ldr	r2, [pc, #100]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044aa:	60d3      	str	r3, [r2, #12]
 80044ac:	e011      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b6:	d10c      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	2101      	movs	r1, #1
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f89a 	bl	80045f8 <RCCEx_PLLSAI1_Config>
 80044c4:	4603      	mov	r3, r0
 80044c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fc:	d108      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044fe:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4a02      	ldr	r2, [pc, #8]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004508:	60d3      	str	r3, [r2, #12]
 800450a:	e013      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800450c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004518:	d10c      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3304      	adds	r3, #4
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 f869 	bl	80045f8 <RCCEx_PLLSAI1_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d02f      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004540:	4b2c      	ldr	r3, [pc, #176]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454e:	4929      	ldr	r1, [pc, #164]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800455a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800455e:	d10d      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2102      	movs	r1, #2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f846 	bl	80045f8 <RCCEx_PLLSAI1_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
 800457a:	e011      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004584:	d10c      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3320      	adds	r3, #32
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f925 	bl	80047dc <RCCEx_PLLSAI2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045bc:	490d      	ldr	r1, [pc, #52]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e0:	4904      	ldr	r1, [pc, #16]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000

080045f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004606:	4b74      	ldr	r3, [pc, #464]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004612:	4b71      	ldr	r3, [pc, #452]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0203 	and.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d10d      	bne.n	800463e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
       ||
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800462a:	4b6b      	ldr	r3, [pc, #428]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
       ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d047      	beq.n	80046ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	e044      	b.n	80046ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d018      	beq.n	800467e <RCCEx_PLLSAI1_Config+0x86>
 800464c:	2b03      	cmp	r3, #3
 800464e:	d825      	bhi.n	800469c <RCCEx_PLLSAI1_Config+0xa4>
 8004650:	2b01      	cmp	r3, #1
 8004652:	d002      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x62>
 8004654:	2b02      	cmp	r3, #2
 8004656:	d009      	beq.n	800466c <RCCEx_PLLSAI1_Config+0x74>
 8004658:	e020      	b.n	800469c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800465a:	4b5f      	ldr	r3, [pc, #380]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11d      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466a:	e01a      	b.n	80046a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800466c:	4b5a      	ldr	r3, [pc, #360]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d116      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467c:	e013      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467e:	4b56      	ldr	r3, [pc, #344]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800468a:	4b53      	ldr	r3, [pc, #332]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800469a:	e006      	b.n	80046aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      break;
 80046a0:	e004      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046b2:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	430b      	orrs	r3, r1
 80046c8:	4943      	ldr	r1, [pc, #268]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d17c      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046d4:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e0:	f7fd fd30 	bl	8002144 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e6:	e009      	b.n	80046fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e8:	f7fd fd2c 	bl	8002144 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d902      	bls.n	80046fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	73fb      	strb	r3, [r7, #15]
        break;
 80046fa:	e005      	b.n	8004708 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046fc:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ef      	bne.n	80046e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d15f      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d110      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004714:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800471c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6892      	ldr	r2, [r2, #8]
 8004724:	0211      	lsls	r1, r2, #8
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	06d2      	lsls	r2, r2, #27
 800472c:	430a      	orrs	r2, r1
 800472e:	492a      	ldr	r1, [pc, #168]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	610b      	str	r3, [r1, #16]
 8004734:	e027      	b.n	8004786 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d112      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473c:	4b26      	ldr	r3, [pc, #152]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6892      	ldr	r2, [r2, #8]
 800474c:	0211      	lsls	r1, r2, #8
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6912      	ldr	r2, [r2, #16]
 8004752:	0852      	lsrs	r2, r2, #1
 8004754:	3a01      	subs	r2, #1
 8004756:	0552      	lsls	r2, r2, #21
 8004758:	430a      	orrs	r2, r1
 800475a:	491f      	ldr	r1, [pc, #124]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	610b      	str	r3, [r1, #16]
 8004760:	e011      	b.n	8004786 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800476a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	0211      	lsls	r1, r2, #8
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6952      	ldr	r2, [r2, #20]
 8004778:	0852      	lsrs	r2, r2, #1
 800477a:	3a01      	subs	r2, #1
 800477c:	0652      	lsls	r2, r2, #25
 800477e:	430a      	orrs	r2, r1
 8004780:	4915      	ldr	r1, [pc, #84]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004782:	4313      	orrs	r3, r2
 8004784:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004790:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fcd7 	bl	8002144 <HAL_GetTick>
 8004796:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004798:	e009      	b.n	80047ae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800479a:	f7fd fcd3 	bl	8002144 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d902      	bls.n	80047ae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	73fb      	strb	r3, [r7, #15]
          break;
 80047ac:	e005      	b.n	80047ba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ef      	beq.n	800479a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000

080047dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ea:	4b69      	ldr	r3, [pc, #420]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047f6:	4b66      	ldr	r3, [pc, #408]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d10d      	bne.n	8004822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
       ||
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800480e:	4b60      	ldr	r3, [pc, #384]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	091b      	lsrs	r3, r3, #4
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
       ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d047      	beq.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
 8004826:	e044      	b.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b03      	cmp	r3, #3
 800482e:	d018      	beq.n	8004862 <RCCEx_PLLSAI2_Config+0x86>
 8004830:	2b03      	cmp	r3, #3
 8004832:	d825      	bhi.n	8004880 <RCCEx_PLLSAI2_Config+0xa4>
 8004834:	2b01      	cmp	r3, #1
 8004836:	d002      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x62>
 8004838:	2b02      	cmp	r3, #2
 800483a:	d009      	beq.n	8004850 <RCCEx_PLLSAI2_Config+0x74>
 800483c:	e020      	b.n	8004880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800483e:	4b54      	ldr	r3, [pc, #336]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d11d      	bne.n	8004886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800484e:	e01a      	b.n	8004886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004850:	4b4f      	ldr	r3, [pc, #316]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d116      	bne.n	800488a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004860:	e013      	b.n	800488a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004862:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800486e:	4b48      	ldr	r3, [pc, #288]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800487e:	e006      	b.n	800488e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
      break;
 8004884:	e004      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800488e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004896:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	430b      	orrs	r3, r1
 80048ac:	4938      	ldr	r1, [pc, #224]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d166      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048b8:	4b35      	ldr	r3, [pc, #212]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a34      	ldr	r2, [pc, #208]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c4:	f7fd fc3e 	bl	8002144 <HAL_GetTick>
 80048c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ca:	e009      	b.n	80048e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048cc:	f7fd fc3a 	bl	8002144 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d902      	bls.n	80048e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	73fb      	strb	r3, [r7, #15]
        break;
 80048de:	e005      	b.n	80048ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e0:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ef      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d149      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d110      	bne.n	800491a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6892      	ldr	r2, [r2, #8]
 8004908:	0211      	lsls	r1, r2, #8
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	06d2      	lsls	r2, r2, #27
 8004910:	430a      	orrs	r2, r1
 8004912:	491f      	ldr	r1, [pc, #124]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	614b      	str	r3, [r1, #20]
 8004918:	e011      	b.n	800493e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004922:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6892      	ldr	r2, [r2, #8]
 800492a:	0211      	lsls	r1, r2, #8
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6912      	ldr	r2, [r2, #16]
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0652      	lsls	r2, r2, #25
 8004936:	430a      	orrs	r2, r1
 8004938:	4915      	ldr	r1, [pc, #84]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a13      	ldr	r2, [pc, #76]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494a:	f7fd fbfb 	bl	8002144 <HAL_GetTick>
 800494e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004950:	e009      	b.n	8004966 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004952:	f7fd fbf7 	bl	8002144 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d902      	bls.n	8004966 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	73fb      	strb	r3, [r7, #15]
          break;
 8004964:	e005      	b.n	8004972 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ef      	beq.n	8004952 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	4903      	ldr	r1, [pc, #12]	; (8004990 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000

08004994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e040      	b.n	8004a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd f9d2 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f8c0 	bl	8004b58 <UART_SetConfig>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e022      	b.n	8004a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fb6c 	bl	80050c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fbf3 	bl	800520c <UART_CheckIdleState>
 8004a26:	4603      	mov	r3, r0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b08a      	sub	sp, #40	; 0x28
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	f040 8082 	bne.w	8004b4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_UART_Transmit+0x26>
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e07a      	b.n	8004b50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_UART_Transmit+0x38>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e073      	b.n	8004b50 <HAL_UART_Transmit+0x120>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2221      	movs	r2, #33	; 0x21
 8004a7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a7e:	f7fd fb61 	bl	8002144 <HAL_GetTick>
 8004a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	d108      	bne.n	8004ab0 <HAL_UART_Transmit+0x80>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e003      	b.n	8004ab8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ac0:	e02d      	b.n	8004b1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 fbe6 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e039      	b.n	8004b50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aee:	b292      	uxth	r2, r2
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	3302      	adds	r3, #2
 8004af6:	61bb      	str	r3, [r7, #24]
 8004af8:	e008      	b.n	8004b0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b292      	uxth	r2, r2
 8004b04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1cb      	bne.n	8004ac2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2140      	movs	r1, #64	; 0x40
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fbb2 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e005      	b.n	8004b50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b08a      	sub	sp, #40	; 0x28
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	4ba4      	ldr	r3, [pc, #656]	; (8004e18 <UART_SetConfig+0x2c0>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a99      	ldr	r2, [pc, #612]	; (8004e1c <UART_SetConfig+0x2c4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a90      	ldr	r2, [pc, #576]	; (8004e20 <UART_SetConfig+0x2c8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d126      	bne.n	8004c30 <UART_SetConfig+0xd8>
 8004be2:	4b90      	ldr	r3, [pc, #576]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d81b      	bhi.n	8004c28 <UART_SetConfig+0xd0>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0xa0>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e116      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e112      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e10e      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e10a      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e106      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a7c      	ldr	r2, [pc, #496]	; (8004e28 <UART_SetConfig+0x2d0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d138      	bne.n	8004cac <UART_SetConfig+0x154>
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d82d      	bhi.n	8004ca4 <UART_SetConfig+0x14c>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0xf8>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004ca5 	.word	0x08004ca5
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004ca5 	.word	0x08004ca5
 8004c68:	08004ca5 	.word	0x08004ca5
 8004c6c:	08004ca5 	.word	0x08004ca5
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e0d8      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e0d4      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e0d0      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e0cc      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e0c8      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <UART_SetConfig+0x2d4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d125      	bne.n	8004d02 <UART_SetConfig+0x1aa>
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d016      	beq.n	8004cf2 <UART_SetConfig+0x19a>
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d818      	bhi.n	8004cfa <UART_SetConfig+0x1a2>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d00a      	beq.n	8004ce2 <UART_SetConfig+0x18a>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d814      	bhi.n	8004cfa <UART_SetConfig+0x1a2>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <UART_SetConfig+0x182>
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d008      	beq.n	8004cea <UART_SetConfig+0x192>
 8004cd8:	e00f      	b.n	8004cfa <UART_SetConfig+0x1a2>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce0:	e0ad      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce8:	e0a9      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004cea:	2304      	movs	r3, #4
 8004cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf0:	e0a5      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf8:	e0a1      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d00:	e09d      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <UART_SetConfig+0x2d8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d125      	bne.n	8004d58 <UART_SetConfig+0x200>
 8004d0c:	4b45      	ldr	r3, [pc, #276]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d016      	beq.n	8004d48 <UART_SetConfig+0x1f0>
 8004d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1c:	d818      	bhi.n	8004d50 <UART_SetConfig+0x1f8>
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d00a      	beq.n	8004d38 <UART_SetConfig+0x1e0>
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d814      	bhi.n	8004d50 <UART_SetConfig+0x1f8>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <UART_SetConfig+0x1d8>
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d008      	beq.n	8004d40 <UART_SetConfig+0x1e8>
 8004d2e:	e00f      	b.n	8004d50 <UART_SetConfig+0x1f8>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d36:	e082      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d3e:	e07e      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d46:	e07a      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4e:	e076      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d56:	e072      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <UART_SetConfig+0x2dc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d12a      	bne.n	8004db8 <UART_SetConfig+0x260>
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d70:	d01a      	beq.n	8004da8 <UART_SetConfig+0x250>
 8004d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d76:	d81b      	bhi.n	8004db0 <UART_SetConfig+0x258>
 8004d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7c:	d00c      	beq.n	8004d98 <UART_SetConfig+0x240>
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	d815      	bhi.n	8004db0 <UART_SetConfig+0x258>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <UART_SetConfig+0x238>
 8004d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8c:	d008      	beq.n	8004da0 <UART_SetConfig+0x248>
 8004d8e:	e00f      	b.n	8004db0 <UART_SetConfig+0x258>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e052      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e04e      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e04a      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dae:	e046      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db6:	e042      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <UART_SetConfig+0x2c4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d13a      	bne.n	8004e38 <UART_SetConfig+0x2e0>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd0:	d01a      	beq.n	8004e08 <UART_SetConfig+0x2b0>
 8004dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd6:	d81b      	bhi.n	8004e10 <UART_SetConfig+0x2b8>
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	d00c      	beq.n	8004df8 <UART_SetConfig+0x2a0>
 8004dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de2:	d815      	bhi.n	8004e10 <UART_SetConfig+0x2b8>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x298>
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x2a8>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x2b8>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e022      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e01e      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e01a      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e016      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e012      	b.n	8004e3e <UART_SetConfig+0x2e6>
 8004e18:	efff69f3 	.word	0xefff69f3
 8004e1c:	40008000 	.word	0x40008000
 8004e20:	40013800 	.word	0x40013800
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	40004c00 	.word	0x40004c00
 8004e34:	40005000 	.word	0x40005000
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a9f      	ldr	r2, [pc, #636]	; (80050c0 <UART_SetConfig+0x568>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d17a      	bne.n	8004f3e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d824      	bhi.n	8004e9a <UART_SetConfig+0x342>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x300>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e9b 	.word	0x08004e9b
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e9b 	.word	0x08004e9b
 8004e68:	08004e8b 	.word	0x08004e8b
 8004e6c:	08004e9b 	.word	0x08004e9b
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004e9b 	.word	0x08004e9b
 8004e78:	08004e93 	.word	0x08004e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7ff f834 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8004e80:	61f8      	str	r0, [r7, #28]
        break;
 8004e82:	e010      	b.n	8004ea6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e84:	4b8f      	ldr	r3, [pc, #572]	; (80050c4 <UART_SetConfig+0x56c>)
 8004e86:	61fb      	str	r3, [r7, #28]
        break;
 8004e88:	e00d      	b.n	8004ea6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8a:	f7fe ff95 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8004e8e:	61f8      	str	r0, [r7, #28]
        break;
 8004e90:	e009      	b.n	8004ea6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e96:	61fb      	str	r3, [r7, #28]
        break;
 8004e98:	e005      	b.n	8004ea6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 80fb 	beq.w	80050a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d305      	bcc.n	8004eca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d903      	bls.n	8004ed2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ed0:	e0e8      	b.n	80050a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	461c      	mov	r4, r3
 8004ed8:	4615      	mov	r5, r2
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	022b      	lsls	r3, r5, #8
 8004ee4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ee8:	0222      	lsls	r2, r4, #8
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	6849      	ldr	r1, [r1, #4]
 8004eee:	0849      	lsrs	r1, r1, #1
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	4688      	mov	r8, r1
 8004ef4:	4681      	mov	r9, r0
 8004ef6:	eb12 0a08 	adds.w	sl, r2, r8
 8004efa:	eb43 0b09 	adc.w	fp, r3, r9
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	4659      	mov	r1, fp
 8004f10:	f7fb feaa 	bl	8000c68 <__aeabi_uldivmod>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4613      	mov	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f22:	d308      	bcc.n	8004f36 <UART_SetConfig+0x3de>
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f2a:	d204      	bcs.n	8004f36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	60da      	str	r2, [r3, #12]
 8004f34:	e0b6      	b.n	80050a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f3c:	e0b2      	b.n	80050a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f46:	d15e      	bne.n	8005006 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d828      	bhi.n	8004fa2 <UART_SetConfig+0x44a>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <UART_SetConfig+0x400>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f85 	.word	0x08004f85
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	08004fa3 	.word	0x08004fa3
 8004f68:	08004f93 	.word	0x08004f93
 8004f6c:	08004fa3 	.word	0x08004fa3
 8004f70:	08004fa3 	.word	0x08004fa3
 8004f74:	08004fa3 	.word	0x08004fa3
 8004f78:	08004f9b 	.word	0x08004f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7fe ffb4 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8004f80:	61f8      	str	r0, [r7, #28]
        break;
 8004f82:	e014      	b.n	8004fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f84:	f7fe ffc6 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 8004f88:	61f8      	str	r0, [r7, #28]
        break;
 8004f8a:	e010      	b.n	8004fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f8c:	4b4d      	ldr	r3, [pc, #308]	; (80050c4 <UART_SetConfig+0x56c>)
 8004f8e:	61fb      	str	r3, [r7, #28]
        break;
 8004f90:	e00d      	b.n	8004fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f92:	f7fe ff11 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8004f96:	61f8      	str	r0, [r7, #28]
        break;
 8004f98:	e009      	b.n	8004fae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	61fb      	str	r3, [r7, #28]
        break;
 8004fa0:	e005      	b.n	8004fae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d077      	beq.n	80050a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	005a      	lsls	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	441a      	add	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d916      	bls.n	8004ffe <UART_SetConfig+0x4a6>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d212      	bcs.n	8004ffe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f023 030f 	bic.w	r3, r3, #15
 8004fe0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	8afb      	ldrh	r3, [r7, #22]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	8afa      	ldrh	r2, [r7, #22]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	e052      	b.n	80050a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005004:	e04e      	b.n	80050a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800500a:	2b08      	cmp	r3, #8
 800500c:	d827      	bhi.n	800505e <UART_SetConfig+0x506>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x4bc>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	0800505f 	.word	0x0800505f
 8005024:	0800504f 	.word	0x0800504f
 8005028:	0800505f 	.word	0x0800505f
 800502c:	0800505f 	.word	0x0800505f
 8005030:	0800505f 	.word	0x0800505f
 8005034:	08005057 	.word	0x08005057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7fe ff56 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 800503c:	61f8      	str	r0, [r7, #28]
        break;
 800503e:	e014      	b.n	800506a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005040:	f7fe ff68 	bl	8003f14 <HAL_RCC_GetPCLK2Freq>
 8005044:	61f8      	str	r0, [r7, #28]
        break;
 8005046:	e010      	b.n	800506a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <UART_SetConfig+0x56c>)
 800504a:	61fb      	str	r3, [r7, #28]
        break;
 800504c:	e00d      	b.n	800506a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504e:	f7fe feb3 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8005052:	61f8      	str	r0, [r7, #28]
        break;
 8005054:	e009      	b.n	800506a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800505a:	61fb      	str	r3, [r7, #28]
        break;
 800505c:	e005      	b.n	800506a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005068:	bf00      	nop
    }

    if (pclk != 0U)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d019      	beq.n	80050a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	085a      	lsrs	r2, r3, #1
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	441a      	add	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	d909      	bls.n	800509e <UART_SetConfig+0x546>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d205      	bcs.n	800509e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60da      	str	r2, [r3, #12]
 800509c:	e002      	b.n	80050a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3728      	adds	r7, #40	; 0x28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050be:	bf00      	nop
 80050c0:	40008000 	.word	0x40008000
 80050c4:	00f42400 	.word	0x00f42400

080050c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c6:	d10a      	bne.n	80051de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800521c:	f7fc ff92 	bl	8002144 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d10e      	bne.n	800524e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f82d 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e023      	b.n	8005296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b04      	cmp	r3, #4
 800525a:	d10e      	bne.n	800527a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f817 	bl	800529e <UART_WaitOnFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e00d      	b.n	8005296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b09c      	sub	sp, #112	; 0x70
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	603b      	str	r3, [r7, #0]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	e0a5      	b.n	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	f000 80a1 	beq.w	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fc ff43 	bl	8002144 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80052ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d13e      	bne.n	800534e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e4:	667b      	str	r3, [r7, #100]	; 0x64
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e6      	bne.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	663b      	str	r3, [r7, #96]	; 0x60
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005322:	64ba      	str	r2, [r7, #72]	; 0x48
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e5      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e067      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d04f      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d147      	bne.n	80053fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005374:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800538a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005394:	637b      	str	r3, [r7, #52]	; 0x34
 8005396:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800539a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	613b      	str	r3, [r7, #16]
   return(result);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 0301 	bic.w	r3, r3, #1
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053c8:	623a      	str	r2, [r7, #32]
 80053ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	69f9      	ldr	r1, [r7, #28]
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e010      	b.n	800541e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	429a      	cmp	r2, r3
 8005418:	f43f af4a 	beq.w	80052b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3770      	adds	r7, #112	; 0x70
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <gcvt>:
 8005428:	b530      	push	{r4, r5, lr}
 800542a:	2200      	movs	r2, #0
 800542c:	b085      	sub	sp, #20
 800542e:	460c      	mov	r4, r1
 8005430:	4605      	mov	r5, r0
 8005432:	2300      	movs	r3, #0
 8005434:	ec51 0b10 	vmov	r0, r1, d0
 8005438:	ed8d 0b02 	vstr	d0, [sp, #8]
 800543c:	f7fb fb5e 	bl	8000afc <__aeabi_dcmplt>
 8005440:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005444:	4622      	mov	r2, r4
 8005446:	b118      	cbz	r0, 8005450 <gcvt+0x28>
 8005448:	232d      	movs	r3, #45	; 0x2d
 800544a:	f802 3b01 	strb.w	r3, [r2], #1
 800544e:	3d01      	subs	r5, #1
 8005450:	2300      	movs	r3, #0
 8005452:	4806      	ldr	r0, [pc, #24]	; (800546c <gcvt+0x44>)
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	4629      	mov	r1, r5
 8005458:	2367      	movs	r3, #103	; 0x67
 800545a:	6800      	ldr	r0, [r0, #0]
 800545c:	f000 f8d4 	bl	8005608 <_gcvt>
 8005460:	2800      	cmp	r0, #0
 8005462:	bf14      	ite	ne
 8005464:	4620      	movne	r0, r4
 8005466:	2000      	moveq	r0, #0
 8005468:	b005      	add	sp, #20
 800546a:	bd30      	pop	{r4, r5, pc}
 800546c:	2000009c 	.word	0x2000009c

08005470 <__errno>:
 8005470:	4b01      	ldr	r3, [pc, #4]	; (8005478 <__errno+0x8>)
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2000009c 	.word	0x2000009c

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	4d0d      	ldr	r5, [pc, #52]	; (80054b4 <__libc_init_array+0x38>)
 8005480:	4c0d      	ldr	r4, [pc, #52]	; (80054b8 <__libc_init_array+0x3c>)
 8005482:	1b64      	subs	r4, r4, r5
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	2600      	movs	r6, #0
 8005488:	42a6      	cmp	r6, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	4d0b      	ldr	r5, [pc, #44]	; (80054bc <__libc_init_array+0x40>)
 800548e:	4c0c      	ldr	r4, [pc, #48]	; (80054c0 <__libc_init_array+0x44>)
 8005490:	f003 f8be 	bl	8008610 <_init>
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	2600      	movs	r6, #0
 800549a:	42a6      	cmp	r6, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a4:	4798      	blx	r3
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ae:	4798      	blx	r3
 80054b0:	3601      	adds	r6, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	080089f0 	.word	0x080089f0
 80054b8:	080089f0 	.word	0x080089f0
 80054bc:	080089f0 	.word	0x080089f0
 80054c0:	080089f4 	.word	0x080089f4

080054c4 <memset>:
 80054c4:	4402      	add	r2, r0
 80054c6:	4603      	mov	r3, r0
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d100      	bne.n	80054ce <memset+0xa>
 80054cc:	4770      	bx	lr
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	e7f9      	b.n	80054c8 <memset+0x4>

080054d4 <_vsiprintf_r>:
 80054d4:	b500      	push	{lr}
 80054d6:	b09b      	sub	sp, #108	; 0x6c
 80054d8:	9100      	str	r1, [sp, #0]
 80054da:	9104      	str	r1, [sp, #16]
 80054dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054e0:	9105      	str	r1, [sp, #20]
 80054e2:	9102      	str	r1, [sp, #8]
 80054e4:	4905      	ldr	r1, [pc, #20]	; (80054fc <_vsiprintf_r+0x28>)
 80054e6:	9103      	str	r1, [sp, #12]
 80054e8:	4669      	mov	r1, sp
 80054ea:	f000 fe23 	bl	8006134 <_svfiprintf_r>
 80054ee:	9b00      	ldr	r3, [sp, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	b01b      	add	sp, #108	; 0x6c
 80054f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80054fa:	bf00      	nop
 80054fc:	ffff0208 	.word	0xffff0208

08005500 <vsiprintf>:
 8005500:	4613      	mov	r3, r2
 8005502:	460a      	mov	r2, r1
 8005504:	4601      	mov	r1, r0
 8005506:	4802      	ldr	r0, [pc, #8]	; (8005510 <vsiprintf+0x10>)
 8005508:	6800      	ldr	r0, [r0, #0]
 800550a:	f7ff bfe3 	b.w	80054d4 <_vsiprintf_r>
 800550e:	bf00      	nop
 8005510:	2000009c 	.word	0x2000009c

08005514 <print_e>:
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005516:	b087      	sub	sp, #28
 8005518:	ec43 2b10 	vmov	d0, r2, r3
 800551c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800551e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8005522:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005524:	ab04      	add	r3, sp, #16
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	ab03      	add	r3, sp, #12
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	1c62      	adds	r2, r4, #1
 800552e:	ab05      	add	r3, sp, #20
 8005530:	460f      	mov	r7, r1
 8005532:	2102      	movs	r1, #2
 8005534:	f001 f954 	bl	80067e0 <_dtoa_r>
 8005538:	9a05      	ldr	r2, [sp, #20]
 800553a:	f242 730f 	movw	r3, #9999	; 0x270f
 800553e:	429a      	cmp	r2, r3
 8005540:	d105      	bne.n	800554e <print_e+0x3a>
 8005542:	4601      	mov	r1, r0
 8005544:	4638      	mov	r0, r7
 8005546:	f001 f899 	bl	800667c <strcpy>
 800554a:	b007      	add	sp, #28
 800554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554e:	463b      	mov	r3, r7
 8005550:	7801      	ldrb	r1, [r0, #0]
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	2c00      	cmp	r4, #0
 8005558:	bfc8      	it	gt
 800555a:	2501      	movgt	r5, #1
 800555c:	212e      	movs	r1, #46	; 0x2e
 800555e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005562:	b10f      	cbz	r7, 8005568 <print_e+0x54>
 8005564:	2c00      	cmp	r4, #0
 8005566:	dc37      	bgt.n	80055d8 <print_e+0xc4>
 8005568:	2e67      	cmp	r6, #103	; 0x67
 800556a:	d046      	beq.n	80055fa <print_e+0xe6>
 800556c:	2e47      	cmp	r6, #71	; 0x47
 800556e:	d046      	beq.n	80055fe <print_e+0xea>
 8005570:	212e      	movs	r1, #46	; 0x2e
 8005572:	2030      	movs	r0, #48	; 0x30
 8005574:	2c00      	cmp	r4, #0
 8005576:	dc38      	bgt.n	80055ea <print_e+0xd6>
 8005578:	1e51      	subs	r1, r2, #1
 800557a:	2900      	cmp	r1, #0
 800557c:	bfb8      	it	lt
 800557e:	f1c2 0201 	rsblt	r2, r2, #1
 8005582:	4618      	mov	r0, r3
 8005584:	9105      	str	r1, [sp, #20]
 8005586:	bfac      	ite	ge
 8005588:	222b      	movge	r2, #43	; 0x2b
 800558a:	9205      	strlt	r2, [sp, #20]
 800558c:	f800 6b02 	strb.w	r6, [r0], #2
 8005590:	bfa8      	it	ge
 8005592:	705a      	strbge	r2, [r3, #1]
 8005594:	9a05      	ldr	r2, [sp, #20]
 8005596:	bfbc      	itt	lt
 8005598:	212d      	movlt	r1, #45	; 0x2d
 800559a:	7059      	strblt	r1, [r3, #1]
 800559c:	2a63      	cmp	r2, #99	; 0x63
 800559e:	dd0b      	ble.n	80055b8 <print_e+0xa4>
 80055a0:	2164      	movs	r1, #100	; 0x64
 80055a2:	fb92 f1f1 	sdiv	r1, r2, r1
 80055a6:	f101 0430 	add.w	r4, r1, #48	; 0x30
 80055aa:	1cd8      	adds	r0, r3, #3
 80055ac:	709c      	strb	r4, [r3, #2]
 80055ae:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80055b2:	fb03 2201 	mla	r2, r3, r1, r2
 80055b6:	9205      	str	r2, [sp, #20]
 80055b8:	9b05      	ldr	r3, [sp, #20]
 80055ba:	220a      	movs	r2, #10
 80055bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80055c0:	f102 0130 	add.w	r1, r2, #48	; 0x30
 80055c4:	7001      	strb	r1, [r0, #0]
 80055c6:	f06f 0109 	mvn.w	r1, #9
 80055ca:	fb01 3302 	mla	r3, r1, r2, r3
 80055ce:	3330      	adds	r3, #48	; 0x30
 80055d0:	7043      	strb	r3, [r0, #1]
 80055d2:	2300      	movs	r3, #0
 80055d4:	7083      	strb	r3, [r0, #2]
 80055d6:	e7b8      	b.n	800554a <print_e+0x36>
 80055d8:	b10d      	cbz	r5, 80055de <print_e+0xca>
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	7805      	ldrb	r5, [r0, #0]
 80055e0:	f803 5b01 	strb.w	r5, [r3], #1
 80055e4:	3c01      	subs	r4, #1
 80055e6:	2500      	movs	r5, #0
 80055e8:	e7b9      	b.n	800555e <print_e+0x4a>
 80055ea:	b10d      	cbz	r5, 80055f0 <print_e+0xdc>
 80055ec:	f803 1b01 	strb.w	r1, [r3], #1
 80055f0:	f803 0b01 	strb.w	r0, [r3], #1
 80055f4:	3c01      	subs	r4, #1
 80055f6:	2500      	movs	r5, #0
 80055f8:	e7bc      	b.n	8005574 <print_e+0x60>
 80055fa:	2665      	movs	r6, #101	; 0x65
 80055fc:	e7bc      	b.n	8005578 <print_e+0x64>
 80055fe:	2645      	movs	r6, #69	; 0x45
 8005600:	e7ba      	b.n	8005578 <print_e+0x64>
 8005602:	0000      	movs	r0, r0
 8005604:	0000      	movs	r0, r0
	...

08005608 <_gcvt>:
 8005608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800560c:	ec55 4b10 	vmov	r4, r5, d0
 8005610:	b088      	sub	sp, #32
 8005612:	4681      	mov	r9, r0
 8005614:	4688      	mov	r8, r1
 8005616:	4616      	mov	r6, r2
 8005618:	469a      	mov	sl, r3
 800561a:	ee10 0a10 	vmov	r0, s0
 800561e:	2200      	movs	r2, #0
 8005620:	2300      	movs	r3, #0
 8005622:	4629      	mov	r1, r5
 8005624:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005626:	f7fb fa69 	bl	8000afc <__aeabi_dcmplt>
 800562a:	b110      	cbz	r0, 8005632 <_gcvt+0x2a>
 800562c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005630:	461d      	mov	r5, r3
 8005632:	2200      	movs	r2, #0
 8005634:	2300      	movs	r3, #0
 8005636:	4620      	mov	r0, r4
 8005638:	4629      	mov	r1, r5
 800563a:	f7fb fa55 	bl	8000ae8 <__aeabi_dcmpeq>
 800563e:	b138      	cbz	r0, 8005650 <_gcvt+0x48>
 8005640:	2330      	movs	r3, #48	; 0x30
 8005642:	7033      	strb	r3, [r6, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	7073      	strb	r3, [r6, #1]
 8005648:	4630      	mov	r0, r6
 800564a:	b008      	add	sp, #32
 800564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005650:	a34b      	add	r3, pc, #300	; (adr r3, 8005780 <_gcvt+0x178>)
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fb fa59 	bl	8000b10 <__aeabi_dcmple>
 800565e:	b158      	cbz	r0, 8005678 <_gcvt+0x70>
 8005660:	f108 31ff 	add.w	r1, r8, #4294967295
 8005664:	9100      	str	r1, [sp, #0]
 8005666:	e9cd a701 	strd	sl, r7, [sp, #4]
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	4631      	mov	r1, r6
 8005670:	4648      	mov	r0, r9
 8005672:	f7ff ff4f 	bl	8005514 <print_e>
 8005676:	e7e7      	b.n	8005648 <_gcvt+0x40>
 8005678:	4640      	mov	r0, r8
 800567a:	f000 fc09 	bl	8005e90 <_mprec_log10>
 800567e:	4622      	mov	r2, r4
 8005680:	ec51 0b10 	vmov	r0, r1, d0
 8005684:	462b      	mov	r3, r5
 8005686:	f7fb fa43 	bl	8000b10 <__aeabi_dcmple>
 800568a:	2800      	cmp	r0, #0
 800568c:	d1e8      	bne.n	8005660 <_gcvt+0x58>
 800568e:	ab07      	add	r3, sp, #28
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	ab06      	add	r3, sp, #24
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	4642      	mov	r2, r8
 8005698:	ab05      	add	r3, sp, #20
 800569a:	ec45 4b10 	vmov	d0, r4, r5
 800569e:	2102      	movs	r1, #2
 80056a0:	4648      	mov	r0, r9
 80056a2:	f001 f89d 	bl	80067e0 <_dtoa_r>
 80056a6:	9a05      	ldr	r2, [sp, #20]
 80056a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d00e      	beq.n	80056ce <_gcvt+0xc6>
 80056b0:	4633      	mov	r3, r6
 80056b2:	44b0      	add	r8, r6
 80056b4:	4605      	mov	r5, r0
 80056b6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80056ba:	9c05      	ldr	r4, [sp, #20]
 80056bc:	eba8 0203 	sub.w	r2, r8, r3
 80056c0:	b109      	cbz	r1, 80056c6 <_gcvt+0xbe>
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	dc08      	bgt.n	80056d8 <_gcvt+0xd0>
 80056c6:	2100      	movs	r1, #0
 80056c8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80056cc:	e00d      	b.n	80056ea <_gcvt+0xe2>
 80056ce:	4601      	mov	r1, r0
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 ffd3 	bl	800667c <strcpy>
 80056d6:	e7b7      	b.n	8005648 <_gcvt+0x40>
 80056d8:	3c01      	subs	r4, #1
 80056da:	f803 1b01 	strb.w	r1, [r3], #1
 80056de:	9405      	str	r4, [sp, #20]
 80056e0:	e7e8      	b.n	80056b4 <_gcvt+0xac>
 80056e2:	f803 cb01 	strb.w	ip, [r3], #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	2101      	movs	r1, #1
 80056ea:	2c00      	cmp	r4, #0
 80056ec:	4620      	mov	r0, r4
 80056ee:	dc2a      	bgt.n	8005746 <_gcvt+0x13e>
 80056f0:	b101      	cbz	r1, 80056f4 <_gcvt+0xec>
 80056f2:	9405      	str	r4, [sp, #20]
 80056f4:	b90f      	cbnz	r7, 80056fa <_gcvt+0xf2>
 80056f6:	7829      	ldrb	r1, [r5, #0]
 80056f8:	b311      	cbz	r1, 8005740 <_gcvt+0x138>
 80056fa:	42b3      	cmp	r3, r6
 80056fc:	bf04      	itt	eq
 80056fe:	2130      	moveq	r1, #48	; 0x30
 8005700:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005704:	212e      	movs	r1, #46	; 0x2e
 8005706:	7019      	strb	r1, [r3, #0]
 8005708:	9905      	ldr	r1, [sp, #20]
 800570a:	4618      	mov	r0, r3
 800570c:	2400      	movs	r4, #0
 800570e:	eba1 0c03 	sub.w	ip, r1, r3
 8005712:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005716:	eb1c 0f00 	cmn.w	ip, r0
 800571a:	d41c      	bmi.n	8005756 <_gcvt+0x14e>
 800571c:	2900      	cmp	r1, #0
 800571e:	f1c1 0000 	rsb	r0, r1, #0
 8005722:	bfc8      	it	gt
 8005724:	2000      	movgt	r0, #0
 8005726:	f100 0c01 	add.w	ip, r0, #1
 800572a:	4463      	add	r3, ip
 800572c:	4401      	add	r1, r0
 800572e:	b104      	cbz	r4, 8005732 <_gcvt+0x12a>
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	1e69      	subs	r1, r5, #1
 8005734:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005738:	b108      	cbz	r0, 800573e <_gcvt+0x136>
 800573a:	2a00      	cmp	r2, #0
 800573c:	dc0f      	bgt.n	800575e <_gcvt+0x156>
 800573e:	b9df      	cbnz	r7, 8005778 <_gcvt+0x170>
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e780      	b.n	8005648 <_gcvt+0x40>
 8005746:	2a00      	cmp	r2, #0
 8005748:	f104 34ff 	add.w	r4, r4, #4294967295
 800574c:	dcc9      	bgt.n	80056e2 <_gcvt+0xda>
 800574e:	2900      	cmp	r1, #0
 8005750:	d0d0      	beq.n	80056f4 <_gcvt+0xec>
 8005752:	9005      	str	r0, [sp, #20]
 8005754:	e7ce      	b.n	80056f4 <_gcvt+0xec>
 8005756:	f800 ef01 	strb.w	lr, [r0, #1]!
 800575a:	2401      	movs	r4, #1
 800575c:	e7db      	b.n	8005716 <_gcvt+0x10e>
 800575e:	f803 0b01 	strb.w	r0, [r3], #1
 8005762:	3a01      	subs	r2, #1
 8005764:	e7e6      	b.n	8005734 <_gcvt+0x12c>
 8005766:	f801 5b01 	strb.w	r5, [r1], #1
 800576a:	1a60      	subs	r0, r4, r1
 800576c:	2800      	cmp	r0, #0
 800576e:	dcfa      	bgt.n	8005766 <_gcvt+0x15e>
 8005770:	2a00      	cmp	r2, #0
 8005772:	bfa8      	it	ge
 8005774:	189b      	addge	r3, r3, r2
 8005776:	e7e3      	b.n	8005740 <_gcvt+0x138>
 8005778:	4619      	mov	r1, r3
 800577a:	189c      	adds	r4, r3, r2
 800577c:	2530      	movs	r5, #48	; 0x30
 800577e:	e7f4      	b.n	800576a <_gcvt+0x162>
 8005780:	eb1c432d 	.word	0xeb1c432d
 8005784:	3f1a36e2 	.word	0x3f1a36e2

08005788 <_Balloc>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800578c:	4604      	mov	r4, r0
 800578e:	460d      	mov	r5, r1
 8005790:	b976      	cbnz	r6, 80057b0 <_Balloc+0x28>
 8005792:	2010      	movs	r0, #16
 8005794:	f001 fe24 	bl	80073e0 <malloc>
 8005798:	4602      	mov	r2, r0
 800579a:	6260      	str	r0, [r4, #36]	; 0x24
 800579c:	b920      	cbnz	r0, 80057a8 <_Balloc+0x20>
 800579e:	4b18      	ldr	r3, [pc, #96]	; (8005800 <_Balloc+0x78>)
 80057a0:	4818      	ldr	r0, [pc, #96]	; (8005804 <_Balloc+0x7c>)
 80057a2:	2166      	movs	r1, #102	; 0x66
 80057a4:	f000 ff72 	bl	800668c <__assert_func>
 80057a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057ac:	6006      	str	r6, [r0, #0]
 80057ae:	60c6      	str	r6, [r0, #12]
 80057b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057b2:	68f3      	ldr	r3, [r6, #12]
 80057b4:	b183      	cbz	r3, 80057d8 <_Balloc+0x50>
 80057b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80057be:	b9b8      	cbnz	r0, 80057f0 <_Balloc+0x68>
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f605 	lsl.w	r6, r1, r5
 80057c6:	1d72      	adds	r2, r6, #5
 80057c8:	0092      	lsls	r2, r2, #2
 80057ca:	4620      	mov	r0, r4
 80057cc:	f000 fb7e 	bl	8005ecc <_calloc_r>
 80057d0:	b160      	cbz	r0, 80057ec <_Balloc+0x64>
 80057d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80057d6:	e00e      	b.n	80057f6 <_Balloc+0x6e>
 80057d8:	2221      	movs	r2, #33	; 0x21
 80057da:	2104      	movs	r1, #4
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 fb75 	bl	8005ecc <_calloc_r>
 80057e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057e4:	60f0      	str	r0, [r6, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e4      	bne.n	80057b6 <_Balloc+0x2e>
 80057ec:	2000      	movs	r0, #0
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	6802      	ldr	r2, [r0, #0]
 80057f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80057f6:	2300      	movs	r3, #0
 80057f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80057fc:	e7f7      	b.n	80057ee <_Balloc+0x66>
 80057fe:	bf00      	nop
 8005800:	080086b8 	.word	0x080086b8
 8005804:	080086cf 	.word	0x080086cf

08005808 <_Bfree>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800580c:	4605      	mov	r5, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b976      	cbnz	r6, 8005830 <_Bfree+0x28>
 8005812:	2010      	movs	r0, #16
 8005814:	f001 fde4 	bl	80073e0 <malloc>
 8005818:	4602      	mov	r2, r0
 800581a:	6268      	str	r0, [r5, #36]	; 0x24
 800581c:	b920      	cbnz	r0, 8005828 <_Bfree+0x20>
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <_Bfree+0x3c>)
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <_Bfree+0x40>)
 8005822:	218a      	movs	r1, #138	; 0x8a
 8005824:	f000 ff32 	bl	800668c <__assert_func>
 8005828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800582c:	6006      	str	r6, [r0, #0]
 800582e:	60c6      	str	r6, [r0, #12]
 8005830:	b13c      	cbz	r4, 8005842 <_Bfree+0x3a>
 8005832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005834:	6862      	ldr	r2, [r4, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800583c:	6021      	str	r1, [r4, #0]
 800583e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	080086b8 	.word	0x080086b8
 8005848:	080086cf 	.word	0x080086cf

0800584c <__multadd>:
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	690d      	ldr	r5, [r1, #16]
 8005852:	4607      	mov	r7, r0
 8005854:	460c      	mov	r4, r1
 8005856:	461e      	mov	r6, r3
 8005858:	f101 0c14 	add.w	ip, r1, #20
 800585c:	2000      	movs	r0, #0
 800585e:	f8dc 3000 	ldr.w	r3, [ip]
 8005862:	b299      	uxth	r1, r3
 8005864:	fb02 6101 	mla	r1, r2, r1, r6
 8005868:	0c1e      	lsrs	r6, r3, #16
 800586a:	0c0b      	lsrs	r3, r1, #16
 800586c:	fb02 3306 	mla	r3, r2, r6, r3
 8005870:	b289      	uxth	r1, r1
 8005872:	3001      	adds	r0, #1
 8005874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005878:	4285      	cmp	r5, r0
 800587a:	f84c 1b04 	str.w	r1, [ip], #4
 800587e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005882:	dcec      	bgt.n	800585e <__multadd+0x12>
 8005884:	b30e      	cbz	r6, 80058ca <__multadd+0x7e>
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	42ab      	cmp	r3, r5
 800588a:	dc19      	bgt.n	80058c0 <__multadd+0x74>
 800588c:	6861      	ldr	r1, [r4, #4]
 800588e:	4638      	mov	r0, r7
 8005890:	3101      	adds	r1, #1
 8005892:	f7ff ff79 	bl	8005788 <_Balloc>
 8005896:	4680      	mov	r8, r0
 8005898:	b928      	cbnz	r0, 80058a6 <__multadd+0x5a>
 800589a:	4602      	mov	r2, r0
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <__multadd+0x84>)
 800589e:	480d      	ldr	r0, [pc, #52]	; (80058d4 <__multadd+0x88>)
 80058a0:	21b5      	movs	r1, #181	; 0xb5
 80058a2:	f000 fef3 	bl	800668c <__assert_func>
 80058a6:	6922      	ldr	r2, [r4, #16]
 80058a8:	3202      	adds	r2, #2
 80058aa:	f104 010c 	add.w	r1, r4, #12
 80058ae:	0092      	lsls	r2, r2, #2
 80058b0:	300c      	adds	r0, #12
 80058b2:	f001 fd9d 	bl	80073f0 <memcpy>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4638      	mov	r0, r7
 80058ba:	f7ff ffa5 	bl	8005808 <_Bfree>
 80058be:	4644      	mov	r4, r8
 80058c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058c4:	3501      	adds	r5, #1
 80058c6:	615e      	str	r6, [r3, #20]
 80058c8:	6125      	str	r5, [r4, #16]
 80058ca:	4620      	mov	r0, r4
 80058cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d0:	0800872b 	.word	0x0800872b
 80058d4:	080086cf 	.word	0x080086cf

080058d8 <__hi0bits>:
 80058d8:	0c03      	lsrs	r3, r0, #16
 80058da:	041b      	lsls	r3, r3, #16
 80058dc:	b9d3      	cbnz	r3, 8005914 <__hi0bits+0x3c>
 80058de:	0400      	lsls	r0, r0, #16
 80058e0:	2310      	movs	r3, #16
 80058e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80058e6:	bf04      	itt	eq
 80058e8:	0200      	lsleq	r0, r0, #8
 80058ea:	3308      	addeq	r3, #8
 80058ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80058f0:	bf04      	itt	eq
 80058f2:	0100      	lsleq	r0, r0, #4
 80058f4:	3304      	addeq	r3, #4
 80058f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80058fa:	bf04      	itt	eq
 80058fc:	0080      	lsleq	r0, r0, #2
 80058fe:	3302      	addeq	r3, #2
 8005900:	2800      	cmp	r0, #0
 8005902:	db05      	blt.n	8005910 <__hi0bits+0x38>
 8005904:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005908:	f103 0301 	add.w	r3, r3, #1
 800590c:	bf08      	it	eq
 800590e:	2320      	moveq	r3, #32
 8005910:	4618      	mov	r0, r3
 8005912:	4770      	bx	lr
 8005914:	2300      	movs	r3, #0
 8005916:	e7e4      	b.n	80058e2 <__hi0bits+0xa>

08005918 <__lo0bits>:
 8005918:	6803      	ldr	r3, [r0, #0]
 800591a:	f013 0207 	ands.w	r2, r3, #7
 800591e:	4601      	mov	r1, r0
 8005920:	d00b      	beq.n	800593a <__lo0bits+0x22>
 8005922:	07da      	lsls	r2, r3, #31
 8005924:	d423      	bmi.n	800596e <__lo0bits+0x56>
 8005926:	0798      	lsls	r0, r3, #30
 8005928:	bf49      	itett	mi
 800592a:	085b      	lsrmi	r3, r3, #1
 800592c:	089b      	lsrpl	r3, r3, #2
 800592e:	2001      	movmi	r0, #1
 8005930:	600b      	strmi	r3, [r1, #0]
 8005932:	bf5c      	itt	pl
 8005934:	600b      	strpl	r3, [r1, #0]
 8005936:	2002      	movpl	r0, #2
 8005938:	4770      	bx	lr
 800593a:	b298      	uxth	r0, r3
 800593c:	b9a8      	cbnz	r0, 800596a <__lo0bits+0x52>
 800593e:	0c1b      	lsrs	r3, r3, #16
 8005940:	2010      	movs	r0, #16
 8005942:	b2da      	uxtb	r2, r3
 8005944:	b90a      	cbnz	r2, 800594a <__lo0bits+0x32>
 8005946:	3008      	adds	r0, #8
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	071a      	lsls	r2, r3, #28
 800594c:	bf04      	itt	eq
 800594e:	091b      	lsreq	r3, r3, #4
 8005950:	3004      	addeq	r0, #4
 8005952:	079a      	lsls	r2, r3, #30
 8005954:	bf04      	itt	eq
 8005956:	089b      	lsreq	r3, r3, #2
 8005958:	3002      	addeq	r0, #2
 800595a:	07da      	lsls	r2, r3, #31
 800595c:	d403      	bmi.n	8005966 <__lo0bits+0x4e>
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	f100 0001 	add.w	r0, r0, #1
 8005964:	d005      	beq.n	8005972 <__lo0bits+0x5a>
 8005966:	600b      	str	r3, [r1, #0]
 8005968:	4770      	bx	lr
 800596a:	4610      	mov	r0, r2
 800596c:	e7e9      	b.n	8005942 <__lo0bits+0x2a>
 800596e:	2000      	movs	r0, #0
 8005970:	4770      	bx	lr
 8005972:	2020      	movs	r0, #32
 8005974:	4770      	bx	lr
	...

08005978 <__i2b>:
 8005978:	b510      	push	{r4, lr}
 800597a:	460c      	mov	r4, r1
 800597c:	2101      	movs	r1, #1
 800597e:	f7ff ff03 	bl	8005788 <_Balloc>
 8005982:	4602      	mov	r2, r0
 8005984:	b928      	cbnz	r0, 8005992 <__i2b+0x1a>
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <__i2b+0x24>)
 8005988:	4805      	ldr	r0, [pc, #20]	; (80059a0 <__i2b+0x28>)
 800598a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800598e:	f000 fe7d 	bl	800668c <__assert_func>
 8005992:	2301      	movs	r3, #1
 8005994:	6144      	str	r4, [r0, #20]
 8005996:	6103      	str	r3, [r0, #16]
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	0800872b 	.word	0x0800872b
 80059a0:	080086cf 	.word	0x080086cf

080059a4 <__multiply>:
 80059a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a8:	4691      	mov	r9, r2
 80059aa:	690a      	ldr	r2, [r1, #16]
 80059ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	bfb8      	it	lt
 80059b4:	460b      	movlt	r3, r1
 80059b6:	460c      	mov	r4, r1
 80059b8:	bfbc      	itt	lt
 80059ba:	464c      	movlt	r4, r9
 80059bc:	4699      	movlt	r9, r3
 80059be:	6927      	ldr	r7, [r4, #16]
 80059c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	6861      	ldr	r1, [r4, #4]
 80059c8:	eb07 060a 	add.w	r6, r7, sl
 80059cc:	42b3      	cmp	r3, r6
 80059ce:	b085      	sub	sp, #20
 80059d0:	bfb8      	it	lt
 80059d2:	3101      	addlt	r1, #1
 80059d4:	f7ff fed8 	bl	8005788 <_Balloc>
 80059d8:	b930      	cbnz	r0, 80059e8 <__multiply+0x44>
 80059da:	4602      	mov	r2, r0
 80059dc:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <__multiply+0x14c>)
 80059de:	4845      	ldr	r0, [pc, #276]	; (8005af4 <__multiply+0x150>)
 80059e0:	f240 115d 	movw	r1, #349	; 0x15d
 80059e4:	f000 fe52 	bl	800668c <__assert_func>
 80059e8:	f100 0514 	add.w	r5, r0, #20
 80059ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80059f0:	462b      	mov	r3, r5
 80059f2:	2200      	movs	r2, #0
 80059f4:	4543      	cmp	r3, r8
 80059f6:	d321      	bcc.n	8005a3c <__multiply+0x98>
 80059f8:	f104 0314 	add.w	r3, r4, #20
 80059fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005a00:	f109 0314 	add.w	r3, r9, #20
 8005a04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005a08:	9202      	str	r2, [sp, #8]
 8005a0a:	1b3a      	subs	r2, r7, r4
 8005a0c:	3a15      	subs	r2, #21
 8005a0e:	f022 0203 	bic.w	r2, r2, #3
 8005a12:	3204      	adds	r2, #4
 8005a14:	f104 0115 	add.w	r1, r4, #21
 8005a18:	428f      	cmp	r7, r1
 8005a1a:	bf38      	it	cc
 8005a1c:	2204      	movcc	r2, #4
 8005a1e:	9201      	str	r2, [sp, #4]
 8005a20:	9a02      	ldr	r2, [sp, #8]
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d80c      	bhi.n	8005a42 <__multiply+0x9e>
 8005a28:	2e00      	cmp	r6, #0
 8005a2a:	dd03      	ble.n	8005a34 <__multiply+0x90>
 8005a2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05a      	beq.n	8005aea <__multiply+0x146>
 8005a34:	6106      	str	r6, [r0, #16]
 8005a36:	b005      	add	sp, #20
 8005a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	f843 2b04 	str.w	r2, [r3], #4
 8005a40:	e7d8      	b.n	80059f4 <__multiply+0x50>
 8005a42:	f8b3 a000 	ldrh.w	sl, [r3]
 8005a46:	f1ba 0f00 	cmp.w	sl, #0
 8005a4a:	d024      	beq.n	8005a96 <__multiply+0xf2>
 8005a4c:	f104 0e14 	add.w	lr, r4, #20
 8005a50:	46a9      	mov	r9, r5
 8005a52:	f04f 0c00 	mov.w	ip, #0
 8005a56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005a5a:	f8d9 1000 	ldr.w	r1, [r9]
 8005a5e:	fa1f fb82 	uxth.w	fp, r2
 8005a62:	b289      	uxth	r1, r1
 8005a64:	fb0a 110b 	mla	r1, sl, fp, r1
 8005a68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8005a70:	4461      	add	r1, ip
 8005a72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a76:	fb0a c20b 	mla	r2, sl, fp, ip
 8005a7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005a7e:	b289      	uxth	r1, r1
 8005a80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005a84:	4577      	cmp	r7, lr
 8005a86:	f849 1b04 	str.w	r1, [r9], #4
 8005a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005a8e:	d8e2      	bhi.n	8005a56 <__multiply+0xb2>
 8005a90:	9a01      	ldr	r2, [sp, #4]
 8005a92:	f845 c002 	str.w	ip, [r5, r2]
 8005a96:	9a03      	ldr	r2, [sp, #12]
 8005a98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	d020      	beq.n	8005ae6 <__multiply+0x142>
 8005aa4:	6829      	ldr	r1, [r5, #0]
 8005aa6:	f104 0c14 	add.w	ip, r4, #20
 8005aaa:	46ae      	mov	lr, r5
 8005aac:	f04f 0a00 	mov.w	sl, #0
 8005ab0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ab4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ab8:	fb09 220b 	mla	r2, r9, fp, r2
 8005abc:	4492      	add	sl, r2
 8005abe:	b289      	uxth	r1, r1
 8005ac0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ac4:	f84e 1b04 	str.w	r1, [lr], #4
 8005ac8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005acc:	f8be 1000 	ldrh.w	r1, [lr]
 8005ad0:	0c12      	lsrs	r2, r2, #16
 8005ad2:	fb09 1102 	mla	r1, r9, r2, r1
 8005ad6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005ada:	4567      	cmp	r7, ip
 8005adc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ae0:	d8e6      	bhi.n	8005ab0 <__multiply+0x10c>
 8005ae2:	9a01      	ldr	r2, [sp, #4]
 8005ae4:	50a9      	str	r1, [r5, r2]
 8005ae6:	3504      	adds	r5, #4
 8005ae8:	e79a      	b.n	8005a20 <__multiply+0x7c>
 8005aea:	3e01      	subs	r6, #1
 8005aec:	e79c      	b.n	8005a28 <__multiply+0x84>
 8005aee:	bf00      	nop
 8005af0:	0800872b 	.word	0x0800872b
 8005af4:	080086cf 	.word	0x080086cf

08005af8 <__pow5mult>:
 8005af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005afc:	4615      	mov	r5, r2
 8005afe:	f012 0203 	ands.w	r2, r2, #3
 8005b02:	4606      	mov	r6, r0
 8005b04:	460f      	mov	r7, r1
 8005b06:	d007      	beq.n	8005b18 <__pow5mult+0x20>
 8005b08:	4c25      	ldr	r4, [pc, #148]	; (8005ba0 <__pow5mult+0xa8>)
 8005b0a:	3a01      	subs	r2, #1
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b12:	f7ff fe9b 	bl	800584c <__multadd>
 8005b16:	4607      	mov	r7, r0
 8005b18:	10ad      	asrs	r5, r5, #2
 8005b1a:	d03d      	beq.n	8005b98 <__pow5mult+0xa0>
 8005b1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005b1e:	b97c      	cbnz	r4, 8005b40 <__pow5mult+0x48>
 8005b20:	2010      	movs	r0, #16
 8005b22:	f001 fc5d 	bl	80073e0 <malloc>
 8005b26:	4602      	mov	r2, r0
 8005b28:	6270      	str	r0, [r6, #36]	; 0x24
 8005b2a:	b928      	cbnz	r0, 8005b38 <__pow5mult+0x40>
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <__pow5mult+0xac>)
 8005b2e:	481e      	ldr	r0, [pc, #120]	; (8005ba8 <__pow5mult+0xb0>)
 8005b30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005b34:	f000 fdaa 	bl	800668c <__assert_func>
 8005b38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b3c:	6004      	str	r4, [r0, #0]
 8005b3e:	60c4      	str	r4, [r0, #12]
 8005b40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b48:	b94c      	cbnz	r4, 8005b5e <__pow5mult+0x66>
 8005b4a:	f240 2171 	movw	r1, #625	; 0x271
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff ff12 	bl	8005978 <__i2b>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	f04f 0900 	mov.w	r9, #0
 8005b62:	07eb      	lsls	r3, r5, #31
 8005b64:	d50a      	bpl.n	8005b7c <__pow5mult+0x84>
 8005b66:	4639      	mov	r1, r7
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ff1a 	bl	80059a4 <__multiply>
 8005b70:	4639      	mov	r1, r7
 8005b72:	4680      	mov	r8, r0
 8005b74:	4630      	mov	r0, r6
 8005b76:	f7ff fe47 	bl	8005808 <_Bfree>
 8005b7a:	4647      	mov	r7, r8
 8005b7c:	106d      	asrs	r5, r5, #1
 8005b7e:	d00b      	beq.n	8005b98 <__pow5mult+0xa0>
 8005b80:	6820      	ldr	r0, [r4, #0]
 8005b82:	b938      	cbnz	r0, 8005b94 <__pow5mult+0x9c>
 8005b84:	4622      	mov	r2, r4
 8005b86:	4621      	mov	r1, r4
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f7ff ff0b 	bl	80059a4 <__multiply>
 8005b8e:	6020      	str	r0, [r4, #0]
 8005b90:	f8c0 9000 	str.w	r9, [r0]
 8005b94:	4604      	mov	r4, r0
 8005b96:	e7e4      	b.n	8005b62 <__pow5mult+0x6a>
 8005b98:	4638      	mov	r0, r7
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08008830 	.word	0x08008830
 8005ba4:	080086b8 	.word	0x080086b8
 8005ba8:	080086cf 	.word	0x080086cf

08005bac <__lshift>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	6849      	ldr	r1, [r1, #4]
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005bba:	68a3      	ldr	r3, [r4, #8]
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	4691      	mov	r9, r2
 8005bc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005bc4:	f108 0601 	add.w	r6, r8, #1
 8005bc8:	42b3      	cmp	r3, r6
 8005bca:	db0b      	blt.n	8005be4 <__lshift+0x38>
 8005bcc:	4638      	mov	r0, r7
 8005bce:	f7ff fddb 	bl	8005788 <_Balloc>
 8005bd2:	4605      	mov	r5, r0
 8005bd4:	b948      	cbnz	r0, 8005bea <__lshift+0x3e>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <__lshift+0xd8>)
 8005bda:	482b      	ldr	r0, [pc, #172]	; (8005c88 <__lshift+0xdc>)
 8005bdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005be0:	f000 fd54 	bl	800668c <__assert_func>
 8005be4:	3101      	adds	r1, #1
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	e7ee      	b.n	8005bc8 <__lshift+0x1c>
 8005bea:	2300      	movs	r3, #0
 8005bec:	f100 0114 	add.w	r1, r0, #20
 8005bf0:	f100 0210 	add.w	r2, r0, #16
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	4553      	cmp	r3, sl
 8005bf8:	db37      	blt.n	8005c6a <__lshift+0xbe>
 8005bfa:	6920      	ldr	r0, [r4, #16]
 8005bfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c00:	f104 0314 	add.w	r3, r4, #20
 8005c04:	f019 091f 	ands.w	r9, r9, #31
 8005c08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c10:	d02f      	beq.n	8005c72 <__lshift+0xc6>
 8005c12:	f1c9 0e20 	rsb	lr, r9, #32
 8005c16:	468a      	mov	sl, r1
 8005c18:	f04f 0c00 	mov.w	ip, #0
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	fa02 f209 	lsl.w	r2, r2, r9
 8005c22:	ea42 020c 	orr.w	r2, r2, ip
 8005c26:	f84a 2b04 	str.w	r2, [sl], #4
 8005c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005c34:	d8f2      	bhi.n	8005c1c <__lshift+0x70>
 8005c36:	1b03      	subs	r3, r0, r4
 8005c38:	3b15      	subs	r3, #21
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	3304      	adds	r3, #4
 8005c40:	f104 0215 	add.w	r2, r4, #21
 8005c44:	4290      	cmp	r0, r2
 8005c46:	bf38      	it	cc
 8005c48:	2304      	movcc	r3, #4
 8005c4a:	f841 c003 	str.w	ip, [r1, r3]
 8005c4e:	f1bc 0f00 	cmp.w	ip, #0
 8005c52:	d001      	beq.n	8005c58 <__lshift+0xac>
 8005c54:	f108 0602 	add.w	r6, r8, #2
 8005c58:	3e01      	subs	r6, #1
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	612e      	str	r6, [r5, #16]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	f7ff fdd2 	bl	8005808 <_Bfree>
 8005c64:	4628      	mov	r0, r5
 8005c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005c6e:	3301      	adds	r3, #1
 8005c70:	e7c1      	b.n	8005bf6 <__lshift+0x4a>
 8005c72:	3904      	subs	r1, #4
 8005c74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c78:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	d8f9      	bhi.n	8005c74 <__lshift+0xc8>
 8005c80:	e7ea      	b.n	8005c58 <__lshift+0xac>
 8005c82:	bf00      	nop
 8005c84:	0800872b 	.word	0x0800872b
 8005c88:	080086cf 	.word	0x080086cf

08005c8c <__mcmp>:
 8005c8c:	b530      	push	{r4, r5, lr}
 8005c8e:	6902      	ldr	r2, [r0, #16]
 8005c90:	690c      	ldr	r4, [r1, #16]
 8005c92:	1b12      	subs	r2, r2, r4
 8005c94:	d10e      	bne.n	8005cb4 <__mcmp+0x28>
 8005c96:	f100 0314 	add.w	r3, r0, #20
 8005c9a:	3114      	adds	r1, #20
 8005c9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005cac:	42a5      	cmp	r5, r4
 8005cae:	d003      	beq.n	8005cb8 <__mcmp+0x2c>
 8005cb0:	d305      	bcc.n	8005cbe <__mcmp+0x32>
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	bd30      	pop	{r4, r5, pc}
 8005cb8:	4283      	cmp	r3, r0
 8005cba:	d3f3      	bcc.n	8005ca4 <__mcmp+0x18>
 8005cbc:	e7fa      	b.n	8005cb4 <__mcmp+0x28>
 8005cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc2:	e7f7      	b.n	8005cb4 <__mcmp+0x28>

08005cc4 <__mdiff>:
 8005cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	460c      	mov	r4, r1
 8005cca:	4606      	mov	r6, r0
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4690      	mov	r8, r2
 8005cd2:	f7ff ffdb 	bl	8005c8c <__mcmp>
 8005cd6:	1e05      	subs	r5, r0, #0
 8005cd8:	d110      	bne.n	8005cfc <__mdiff+0x38>
 8005cda:	4629      	mov	r1, r5
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7ff fd53 	bl	8005788 <_Balloc>
 8005ce2:	b930      	cbnz	r0, 8005cf2 <__mdiff+0x2e>
 8005ce4:	4b3a      	ldr	r3, [pc, #232]	; (8005dd0 <__mdiff+0x10c>)
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	f240 2132 	movw	r1, #562	; 0x232
 8005cec:	4839      	ldr	r0, [pc, #228]	; (8005dd4 <__mdiff+0x110>)
 8005cee:	f000 fccd 	bl	800668c <__assert_func>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	bfa4      	itt	ge
 8005cfe:	4643      	movge	r3, r8
 8005d00:	46a0      	movge	r8, r4
 8005d02:	4630      	mov	r0, r6
 8005d04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d08:	bfa6      	itte	ge
 8005d0a:	461c      	movge	r4, r3
 8005d0c:	2500      	movge	r5, #0
 8005d0e:	2501      	movlt	r5, #1
 8005d10:	f7ff fd3a 	bl	8005788 <_Balloc>
 8005d14:	b920      	cbnz	r0, 8005d20 <__mdiff+0x5c>
 8005d16:	4b2e      	ldr	r3, [pc, #184]	; (8005dd0 <__mdiff+0x10c>)
 8005d18:	4602      	mov	r2, r0
 8005d1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005d1e:	e7e5      	b.n	8005cec <__mdiff+0x28>
 8005d20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d24:	6926      	ldr	r6, [r4, #16]
 8005d26:	60c5      	str	r5, [r0, #12]
 8005d28:	f104 0914 	add.w	r9, r4, #20
 8005d2c:	f108 0514 	add.w	r5, r8, #20
 8005d30:	f100 0e14 	add.w	lr, r0, #20
 8005d34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005d38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005d3c:	f108 0210 	add.w	r2, r8, #16
 8005d40:	46f2      	mov	sl, lr
 8005d42:	2100      	movs	r1, #0
 8005d44:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005d4c:	fa1f f883 	uxth.w	r8, r3
 8005d50:	fa11 f18b 	uxtah	r1, r1, fp
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	eba1 0808 	sub.w	r8, r1, r8
 8005d5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005d5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005d62:	fa1f f888 	uxth.w	r8, r8
 8005d66:	1419      	asrs	r1, r3, #16
 8005d68:	454e      	cmp	r6, r9
 8005d6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005d6e:	f84a 3b04 	str.w	r3, [sl], #4
 8005d72:	d8e7      	bhi.n	8005d44 <__mdiff+0x80>
 8005d74:	1b33      	subs	r3, r6, r4
 8005d76:	3b15      	subs	r3, #21
 8005d78:	f023 0303 	bic.w	r3, r3, #3
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	3415      	adds	r4, #21
 8005d80:	42a6      	cmp	r6, r4
 8005d82:	bf38      	it	cc
 8005d84:	2304      	movcc	r3, #4
 8005d86:	441d      	add	r5, r3
 8005d88:	4473      	add	r3, lr
 8005d8a:	469e      	mov	lr, r3
 8005d8c:	462e      	mov	r6, r5
 8005d8e:	4566      	cmp	r6, ip
 8005d90:	d30e      	bcc.n	8005db0 <__mdiff+0xec>
 8005d92:	f10c 0203 	add.w	r2, ip, #3
 8005d96:	1b52      	subs	r2, r2, r5
 8005d98:	f022 0203 	bic.w	r2, r2, #3
 8005d9c:	3d03      	subs	r5, #3
 8005d9e:	45ac      	cmp	ip, r5
 8005da0:	bf38      	it	cc
 8005da2:	2200      	movcc	r2, #0
 8005da4:	441a      	add	r2, r3
 8005da6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005daa:	b17b      	cbz	r3, 8005dcc <__mdiff+0x108>
 8005dac:	6107      	str	r7, [r0, #16]
 8005dae:	e7a3      	b.n	8005cf8 <__mdiff+0x34>
 8005db0:	f856 8b04 	ldr.w	r8, [r6], #4
 8005db4:	fa11 f288 	uxtah	r2, r1, r8
 8005db8:	1414      	asrs	r4, r2, #16
 8005dba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005dc4:	f84e 2b04 	str.w	r2, [lr], #4
 8005dc8:	1421      	asrs	r1, r4, #16
 8005dca:	e7e0      	b.n	8005d8e <__mdiff+0xca>
 8005dcc:	3f01      	subs	r7, #1
 8005dce:	e7ea      	b.n	8005da6 <__mdiff+0xe2>
 8005dd0:	0800872b 	.word	0x0800872b
 8005dd4:	080086cf 	.word	0x080086cf

08005dd8 <__d2b>:
 8005dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ddc:	4689      	mov	r9, r1
 8005dde:	2101      	movs	r1, #1
 8005de0:	ec57 6b10 	vmov	r6, r7, d0
 8005de4:	4690      	mov	r8, r2
 8005de6:	f7ff fccf 	bl	8005788 <_Balloc>
 8005dea:	4604      	mov	r4, r0
 8005dec:	b930      	cbnz	r0, 8005dfc <__d2b+0x24>
 8005dee:	4602      	mov	r2, r0
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <__d2b+0xb0>)
 8005df2:	4826      	ldr	r0, [pc, #152]	; (8005e8c <__d2b+0xb4>)
 8005df4:	f240 310a 	movw	r1, #778	; 0x30a
 8005df8:	f000 fc48 	bl	800668c <__assert_func>
 8005dfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005e00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e04:	bb35      	cbnz	r5, 8005e54 <__d2b+0x7c>
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	d028      	beq.n	8005e5e <__d2b+0x86>
 8005e0c:	4668      	mov	r0, sp
 8005e0e:	9600      	str	r6, [sp, #0]
 8005e10:	f7ff fd82 	bl	8005918 <__lo0bits>
 8005e14:	9900      	ldr	r1, [sp, #0]
 8005e16:	b300      	cbz	r0, 8005e5a <__d2b+0x82>
 8005e18:	9a01      	ldr	r2, [sp, #4]
 8005e1a:	f1c0 0320 	rsb	r3, r0, #32
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	430b      	orrs	r3, r1
 8005e24:	40c2      	lsrs	r2, r0
 8005e26:	6163      	str	r3, [r4, #20]
 8005e28:	9201      	str	r2, [sp, #4]
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	61a3      	str	r3, [r4, #24]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf14      	ite	ne
 8005e32:	2202      	movne	r2, #2
 8005e34:	2201      	moveq	r2, #1
 8005e36:	6122      	str	r2, [r4, #16]
 8005e38:	b1d5      	cbz	r5, 8005e70 <__d2b+0x98>
 8005e3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e3e:	4405      	add	r5, r0
 8005e40:	f8c9 5000 	str.w	r5, [r9]
 8005e44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e48:	f8c8 0000 	str.w	r0, [r8]
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	b003      	add	sp, #12
 8005e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e58:	e7d5      	b.n	8005e06 <__d2b+0x2e>
 8005e5a:	6161      	str	r1, [r4, #20]
 8005e5c:	e7e5      	b.n	8005e2a <__d2b+0x52>
 8005e5e:	a801      	add	r0, sp, #4
 8005e60:	f7ff fd5a 	bl	8005918 <__lo0bits>
 8005e64:	9b01      	ldr	r3, [sp, #4]
 8005e66:	6163      	str	r3, [r4, #20]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	6122      	str	r2, [r4, #16]
 8005e6c:	3020      	adds	r0, #32
 8005e6e:	e7e3      	b.n	8005e38 <__d2b+0x60>
 8005e70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e78:	f8c9 0000 	str.w	r0, [r9]
 8005e7c:	6918      	ldr	r0, [r3, #16]
 8005e7e:	f7ff fd2b 	bl	80058d8 <__hi0bits>
 8005e82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e86:	e7df      	b.n	8005e48 <__d2b+0x70>
 8005e88:	0800872b 	.word	0x0800872b
 8005e8c:	080086cf 	.word	0x080086cf

08005e90 <_mprec_log10>:
 8005e90:	2817      	cmp	r0, #23
 8005e92:	b5d0      	push	{r4, r6, r7, lr}
 8005e94:	4604      	mov	r4, r0
 8005e96:	dc07      	bgt.n	8005ea8 <_mprec_log10+0x18>
 8005e98:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <_mprec_log10+0x30>)
 8005e9a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005e9e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005ea2:	ec41 0b10 	vmov	d0, r0, r1
 8005ea6:	bdd0      	pop	{r4, r6, r7, pc}
 8005ea8:	4906      	ldr	r1, [pc, #24]	; (8005ec4 <_mprec_log10+0x34>)
 8005eaa:	4f07      	ldr	r7, [pc, #28]	; (8005ec8 <_mprec_log10+0x38>)
 8005eac:	2000      	movs	r0, #0
 8005eae:	2600      	movs	r6, #0
 8005eb0:	4632      	mov	r2, r6
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	f7fa fbb0 	bl	8000618 <__aeabi_dmul>
 8005eb8:	3c01      	subs	r4, #1
 8005eba:	d1f9      	bne.n	8005eb0 <_mprec_log10+0x20>
 8005ebc:	e7f1      	b.n	8005ea2 <_mprec_log10+0x12>
 8005ebe:	bf00      	nop
 8005ec0:	08008768 	.word	0x08008768
 8005ec4:	3ff00000 	.word	0x3ff00000
 8005ec8:	40240000 	.word	0x40240000

08005ecc <_calloc_r>:
 8005ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ece:	fba1 2402 	umull	r2, r4, r1, r2
 8005ed2:	b94c      	cbnz	r4, 8005ee8 <_calloc_r+0x1c>
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	9201      	str	r2, [sp, #4]
 8005ed8:	f000 f82e 	bl	8005f38 <_malloc_r>
 8005edc:	9a01      	ldr	r2, [sp, #4]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b930      	cbnz	r0, 8005ef0 <_calloc_r+0x24>
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	b003      	add	sp, #12
 8005ee6:	bd30      	pop	{r4, r5, pc}
 8005ee8:	220c      	movs	r2, #12
 8005eea:	6002      	str	r2, [r0, #0]
 8005eec:	2500      	movs	r5, #0
 8005eee:	e7f8      	b.n	8005ee2 <_calloc_r+0x16>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	f7ff fae7 	bl	80054c4 <memset>
 8005ef6:	e7f4      	b.n	8005ee2 <_calloc_r+0x16>

08005ef8 <sbrk_aligned>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	4e0e      	ldr	r6, [pc, #56]	; (8005f34 <sbrk_aligned+0x3c>)
 8005efc:	460c      	mov	r4, r1
 8005efe:	6831      	ldr	r1, [r6, #0]
 8005f00:	4605      	mov	r5, r0
 8005f02:	b911      	cbnz	r1, 8005f0a <sbrk_aligned+0x12>
 8005f04:	f000 fbaa 	bl	800665c <_sbrk_r>
 8005f08:	6030      	str	r0, [r6, #0]
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 fba5 	bl	800665c <_sbrk_r>
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	d00a      	beq.n	8005f2c <sbrk_aligned+0x34>
 8005f16:	1cc4      	adds	r4, r0, #3
 8005f18:	f024 0403 	bic.w	r4, r4, #3
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d007      	beq.n	8005f30 <sbrk_aligned+0x38>
 8005f20:	1a21      	subs	r1, r4, r0
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 fb9a 	bl	800665c <_sbrk_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d101      	bne.n	8005f30 <sbrk_aligned+0x38>
 8005f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f30:	4620      	mov	r0, r4
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	20000264 	.word	0x20000264

08005f38 <_malloc_r>:
 8005f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	1ccd      	adds	r5, r1, #3
 8005f3e:	f025 0503 	bic.w	r5, r5, #3
 8005f42:	3508      	adds	r5, #8
 8005f44:	2d0c      	cmp	r5, #12
 8005f46:	bf38      	it	cc
 8005f48:	250c      	movcc	r5, #12
 8005f4a:	2d00      	cmp	r5, #0
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	db01      	blt.n	8005f54 <_malloc_r+0x1c>
 8005f50:	42a9      	cmp	r1, r5
 8005f52:	d905      	bls.n	8005f60 <_malloc_r+0x28>
 8005f54:	230c      	movs	r3, #12
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	2600      	movs	r6, #0
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f60:	4e2e      	ldr	r6, [pc, #184]	; (800601c <_malloc_r+0xe4>)
 8005f62:	f001 fa6d 	bl	8007440 <__malloc_lock>
 8005f66:	6833      	ldr	r3, [r6, #0]
 8005f68:	461c      	mov	r4, r3
 8005f6a:	bb34      	cbnz	r4, 8005fba <_malloc_r+0x82>
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f7ff ffc2 	bl	8005ef8 <sbrk_aligned>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	4604      	mov	r4, r0
 8005f78:	d14d      	bne.n	8006016 <_malloc_r+0xde>
 8005f7a:	6834      	ldr	r4, [r6, #0]
 8005f7c:	4626      	mov	r6, r4
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	d140      	bne.n	8006004 <_malloc_r+0xcc>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	4631      	mov	r1, r6
 8005f86:	4638      	mov	r0, r7
 8005f88:	eb04 0803 	add.w	r8, r4, r3
 8005f8c:	f000 fb66 	bl	800665c <_sbrk_r>
 8005f90:	4580      	cmp	r8, r0
 8005f92:	d13a      	bne.n	800600a <_malloc_r+0xd2>
 8005f94:	6821      	ldr	r1, [r4, #0]
 8005f96:	3503      	adds	r5, #3
 8005f98:	1a6d      	subs	r5, r5, r1
 8005f9a:	f025 0503 	bic.w	r5, r5, #3
 8005f9e:	3508      	adds	r5, #8
 8005fa0:	2d0c      	cmp	r5, #12
 8005fa2:	bf38      	it	cc
 8005fa4:	250c      	movcc	r5, #12
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff ffa5 	bl	8005ef8 <sbrk_aligned>
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d02b      	beq.n	800600a <_malloc_r+0xd2>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	442b      	add	r3, r5
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	e00e      	b.n	8005fd8 <_malloc_r+0xa0>
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	1b52      	subs	r2, r2, r5
 8005fbe:	d41e      	bmi.n	8005ffe <_malloc_r+0xc6>
 8005fc0:	2a0b      	cmp	r2, #11
 8005fc2:	d916      	bls.n	8005ff2 <_malloc_r+0xba>
 8005fc4:	1961      	adds	r1, r4, r5
 8005fc6:	42a3      	cmp	r3, r4
 8005fc8:	6025      	str	r5, [r4, #0]
 8005fca:	bf18      	it	ne
 8005fcc:	6059      	strne	r1, [r3, #4]
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	bf08      	it	eq
 8005fd2:	6031      	streq	r1, [r6, #0]
 8005fd4:	5162      	str	r2, [r4, r5]
 8005fd6:	604b      	str	r3, [r1, #4]
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f104 060b 	add.w	r6, r4, #11
 8005fde:	f001 fa35 	bl	800744c <__malloc_unlock>
 8005fe2:	f026 0607 	bic.w	r6, r6, #7
 8005fe6:	1d23      	adds	r3, r4, #4
 8005fe8:	1af2      	subs	r2, r6, r3
 8005fea:	d0b6      	beq.n	8005f5a <_malloc_r+0x22>
 8005fec:	1b9b      	subs	r3, r3, r6
 8005fee:	50a3      	str	r3, [r4, r2]
 8005ff0:	e7b3      	b.n	8005f5a <_malloc_r+0x22>
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	bf0c      	ite	eq
 8005ff8:	6032      	streq	r2, [r6, #0]
 8005ffa:	605a      	strne	r2, [r3, #4]
 8005ffc:	e7ec      	b.n	8005fd8 <_malloc_r+0xa0>
 8005ffe:	4623      	mov	r3, r4
 8006000:	6864      	ldr	r4, [r4, #4]
 8006002:	e7b2      	b.n	8005f6a <_malloc_r+0x32>
 8006004:	4634      	mov	r4, r6
 8006006:	6876      	ldr	r6, [r6, #4]
 8006008:	e7b9      	b.n	8005f7e <_malloc_r+0x46>
 800600a:	230c      	movs	r3, #12
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4638      	mov	r0, r7
 8006010:	f001 fa1c 	bl	800744c <__malloc_unlock>
 8006014:	e7a1      	b.n	8005f5a <_malloc_r+0x22>
 8006016:	6025      	str	r5, [r4, #0]
 8006018:	e7de      	b.n	8005fd8 <_malloc_r+0xa0>
 800601a:	bf00      	nop
 800601c:	20000260 	.word	0x20000260

08006020 <_realloc_r>:
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006024:	4680      	mov	r8, r0
 8006026:	4614      	mov	r4, r2
 8006028:	460e      	mov	r6, r1
 800602a:	b921      	cbnz	r1, 8006036 <_realloc_r+0x16>
 800602c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006030:	4611      	mov	r1, r2
 8006032:	f7ff bf81 	b.w	8005f38 <_malloc_r>
 8006036:	b92a      	cbnz	r2, 8006044 <_realloc_r+0x24>
 8006038:	f001 fa0e 	bl	8007458 <_free_r>
 800603c:	4625      	mov	r5, r4
 800603e:	4628      	mov	r0, r5
 8006040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006044:	f001 fa54 	bl	80074f0 <_malloc_usable_size_r>
 8006048:	4284      	cmp	r4, r0
 800604a:	4607      	mov	r7, r0
 800604c:	d802      	bhi.n	8006054 <_realloc_r+0x34>
 800604e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006052:	d812      	bhi.n	800607a <_realloc_r+0x5a>
 8006054:	4621      	mov	r1, r4
 8006056:	4640      	mov	r0, r8
 8006058:	f7ff ff6e 	bl	8005f38 <_malloc_r>
 800605c:	4605      	mov	r5, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	d0ed      	beq.n	800603e <_realloc_r+0x1e>
 8006062:	42bc      	cmp	r4, r7
 8006064:	4622      	mov	r2, r4
 8006066:	4631      	mov	r1, r6
 8006068:	bf28      	it	cs
 800606a:	463a      	movcs	r2, r7
 800606c:	f001 f9c0 	bl	80073f0 <memcpy>
 8006070:	4631      	mov	r1, r6
 8006072:	4640      	mov	r0, r8
 8006074:	f001 f9f0 	bl	8007458 <_free_r>
 8006078:	e7e1      	b.n	800603e <_realloc_r+0x1e>
 800607a:	4635      	mov	r5, r6
 800607c:	e7df      	b.n	800603e <_realloc_r+0x1e>

0800607e <__ssputs_r>:
 800607e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006082:	688e      	ldr	r6, [r1, #8]
 8006084:	429e      	cmp	r6, r3
 8006086:	4682      	mov	sl, r0
 8006088:	460c      	mov	r4, r1
 800608a:	4690      	mov	r8, r2
 800608c:	461f      	mov	r7, r3
 800608e:	d838      	bhi.n	8006102 <__ssputs_r+0x84>
 8006090:	898a      	ldrh	r2, [r1, #12]
 8006092:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006096:	d032      	beq.n	80060fe <__ssputs_r+0x80>
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	6909      	ldr	r1, [r1, #16]
 800609c:	eba5 0901 	sub.w	r9, r5, r1
 80060a0:	6965      	ldr	r5, [r4, #20]
 80060a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060aa:	3301      	adds	r3, #1
 80060ac:	444b      	add	r3, r9
 80060ae:	106d      	asrs	r5, r5, #1
 80060b0:	429d      	cmp	r5, r3
 80060b2:	bf38      	it	cc
 80060b4:	461d      	movcc	r5, r3
 80060b6:	0553      	lsls	r3, r2, #21
 80060b8:	d531      	bpl.n	800611e <__ssputs_r+0xa0>
 80060ba:	4629      	mov	r1, r5
 80060bc:	f7ff ff3c 	bl	8005f38 <_malloc_r>
 80060c0:	4606      	mov	r6, r0
 80060c2:	b950      	cbnz	r0, 80060da <__ssputs_r+0x5c>
 80060c4:	230c      	movs	r3, #12
 80060c6:	f8ca 3000 	str.w	r3, [sl]
 80060ca:	89a3      	ldrh	r3, [r4, #12]
 80060cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060da:	6921      	ldr	r1, [r4, #16]
 80060dc:	464a      	mov	r2, r9
 80060de:	f001 f987 	bl	80073f0 <memcpy>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	6126      	str	r6, [r4, #16]
 80060f0:	6165      	str	r5, [r4, #20]
 80060f2:	444e      	add	r6, r9
 80060f4:	eba5 0509 	sub.w	r5, r5, r9
 80060f8:	6026      	str	r6, [r4, #0]
 80060fa:	60a5      	str	r5, [r4, #8]
 80060fc:	463e      	mov	r6, r7
 80060fe:	42be      	cmp	r6, r7
 8006100:	d900      	bls.n	8006104 <__ssputs_r+0x86>
 8006102:	463e      	mov	r6, r7
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	4632      	mov	r2, r6
 8006108:	4641      	mov	r1, r8
 800610a:	f001 f97f 	bl	800740c <memmove>
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	1b9b      	subs	r3, r3, r6
 8006112:	60a3      	str	r3, [r4, #8]
 8006114:	6823      	ldr	r3, [r4, #0]
 8006116:	4433      	add	r3, r6
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	2000      	movs	r0, #0
 800611c:	e7db      	b.n	80060d6 <__ssputs_r+0x58>
 800611e:	462a      	mov	r2, r5
 8006120:	f7ff ff7e 	bl	8006020 <_realloc_r>
 8006124:	4606      	mov	r6, r0
 8006126:	2800      	cmp	r0, #0
 8006128:	d1e1      	bne.n	80060ee <__ssputs_r+0x70>
 800612a:	6921      	ldr	r1, [r4, #16]
 800612c:	4650      	mov	r0, sl
 800612e:	f001 f993 	bl	8007458 <_free_r>
 8006132:	e7c7      	b.n	80060c4 <__ssputs_r+0x46>

08006134 <_svfiprintf_r>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	4698      	mov	r8, r3
 800613a:	898b      	ldrh	r3, [r1, #12]
 800613c:	061b      	lsls	r3, r3, #24
 800613e:	b09d      	sub	sp, #116	; 0x74
 8006140:	4607      	mov	r7, r0
 8006142:	460d      	mov	r5, r1
 8006144:	4614      	mov	r4, r2
 8006146:	d50e      	bpl.n	8006166 <_svfiprintf_r+0x32>
 8006148:	690b      	ldr	r3, [r1, #16]
 800614a:	b963      	cbnz	r3, 8006166 <_svfiprintf_r+0x32>
 800614c:	2140      	movs	r1, #64	; 0x40
 800614e:	f7ff fef3 	bl	8005f38 <_malloc_r>
 8006152:	6028      	str	r0, [r5, #0]
 8006154:	6128      	str	r0, [r5, #16]
 8006156:	b920      	cbnz	r0, 8006162 <_svfiprintf_r+0x2e>
 8006158:	230c      	movs	r3, #12
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	e0d1      	b.n	8006306 <_svfiprintf_r+0x1d2>
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	616b      	str	r3, [r5, #20]
 8006166:	2300      	movs	r3, #0
 8006168:	9309      	str	r3, [sp, #36]	; 0x24
 800616a:	2320      	movs	r3, #32
 800616c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006170:	f8cd 800c 	str.w	r8, [sp, #12]
 8006174:	2330      	movs	r3, #48	; 0x30
 8006176:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006320 <_svfiprintf_r+0x1ec>
 800617a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800617e:	f04f 0901 	mov.w	r9, #1
 8006182:	4623      	mov	r3, r4
 8006184:	469a      	mov	sl, r3
 8006186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618a:	b10a      	cbz	r2, 8006190 <_svfiprintf_r+0x5c>
 800618c:	2a25      	cmp	r2, #37	; 0x25
 800618e:	d1f9      	bne.n	8006184 <_svfiprintf_r+0x50>
 8006190:	ebba 0b04 	subs.w	fp, sl, r4
 8006194:	d00b      	beq.n	80061ae <_svfiprintf_r+0x7a>
 8006196:	465b      	mov	r3, fp
 8006198:	4622      	mov	r2, r4
 800619a:	4629      	mov	r1, r5
 800619c:	4638      	mov	r0, r7
 800619e:	f7ff ff6e 	bl	800607e <__ssputs_r>
 80061a2:	3001      	adds	r0, #1
 80061a4:	f000 80aa 	beq.w	80062fc <_svfiprintf_r+0x1c8>
 80061a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061aa:	445a      	add	r2, fp
 80061ac:	9209      	str	r2, [sp, #36]	; 0x24
 80061ae:	f89a 3000 	ldrb.w	r3, [sl]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80a2 	beq.w	80062fc <_svfiprintf_r+0x1c8>
 80061b8:	2300      	movs	r3, #0
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c2:	f10a 0a01 	add.w	sl, sl, #1
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	9307      	str	r3, [sp, #28]
 80061ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ce:	931a      	str	r3, [sp, #104]	; 0x68
 80061d0:	4654      	mov	r4, sl
 80061d2:	2205      	movs	r2, #5
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	4851      	ldr	r0, [pc, #324]	; (8006320 <_svfiprintf_r+0x1ec>)
 80061da:	f7fa f811 	bl	8000200 <memchr>
 80061de:	9a04      	ldr	r2, [sp, #16]
 80061e0:	b9d8      	cbnz	r0, 800621a <_svfiprintf_r+0xe6>
 80061e2:	06d0      	lsls	r0, r2, #27
 80061e4:	bf44      	itt	mi
 80061e6:	2320      	movmi	r3, #32
 80061e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ec:	0711      	lsls	r1, r2, #28
 80061ee:	bf44      	itt	mi
 80061f0:	232b      	movmi	r3, #43	; 0x2b
 80061f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f6:	f89a 3000 	ldrb.w	r3, [sl]
 80061fa:	2b2a      	cmp	r3, #42	; 0x2a
 80061fc:	d015      	beq.n	800622a <_svfiprintf_r+0xf6>
 80061fe:	9a07      	ldr	r2, [sp, #28]
 8006200:	4654      	mov	r4, sl
 8006202:	2000      	movs	r0, #0
 8006204:	f04f 0c0a 	mov.w	ip, #10
 8006208:	4621      	mov	r1, r4
 800620a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800620e:	3b30      	subs	r3, #48	; 0x30
 8006210:	2b09      	cmp	r3, #9
 8006212:	d94e      	bls.n	80062b2 <_svfiprintf_r+0x17e>
 8006214:	b1b0      	cbz	r0, 8006244 <_svfiprintf_r+0x110>
 8006216:	9207      	str	r2, [sp, #28]
 8006218:	e014      	b.n	8006244 <_svfiprintf_r+0x110>
 800621a:	eba0 0308 	sub.w	r3, r0, r8
 800621e:	fa09 f303 	lsl.w	r3, r9, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	46a2      	mov	sl, r4
 8006228:	e7d2      	b.n	80061d0 <_svfiprintf_r+0x9c>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	1d19      	adds	r1, r3, #4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	9103      	str	r1, [sp, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	bfbb      	ittet	lt
 8006236:	425b      	neglt	r3, r3
 8006238:	f042 0202 	orrlt.w	r2, r2, #2
 800623c:	9307      	strge	r3, [sp, #28]
 800623e:	9307      	strlt	r3, [sp, #28]
 8006240:	bfb8      	it	lt
 8006242:	9204      	strlt	r2, [sp, #16]
 8006244:	7823      	ldrb	r3, [r4, #0]
 8006246:	2b2e      	cmp	r3, #46	; 0x2e
 8006248:	d10c      	bne.n	8006264 <_svfiprintf_r+0x130>
 800624a:	7863      	ldrb	r3, [r4, #1]
 800624c:	2b2a      	cmp	r3, #42	; 0x2a
 800624e:	d135      	bne.n	80062bc <_svfiprintf_r+0x188>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	9203      	str	r2, [sp, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	bfb8      	it	lt
 800625c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006260:	3402      	adds	r4, #2
 8006262:	9305      	str	r3, [sp, #20]
 8006264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006330 <_svfiprintf_r+0x1fc>
 8006268:	7821      	ldrb	r1, [r4, #0]
 800626a:	2203      	movs	r2, #3
 800626c:	4650      	mov	r0, sl
 800626e:	f7f9 ffc7 	bl	8000200 <memchr>
 8006272:	b140      	cbz	r0, 8006286 <_svfiprintf_r+0x152>
 8006274:	2340      	movs	r3, #64	; 0x40
 8006276:	eba0 000a 	sub.w	r0, r0, sl
 800627a:	fa03 f000 	lsl.w	r0, r3, r0
 800627e:	9b04      	ldr	r3, [sp, #16]
 8006280:	4303      	orrs	r3, r0
 8006282:	3401      	adds	r4, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628a:	4826      	ldr	r0, [pc, #152]	; (8006324 <_svfiprintf_r+0x1f0>)
 800628c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006290:	2206      	movs	r2, #6
 8006292:	f7f9 ffb5 	bl	8000200 <memchr>
 8006296:	2800      	cmp	r0, #0
 8006298:	d038      	beq.n	800630c <_svfiprintf_r+0x1d8>
 800629a:	4b23      	ldr	r3, [pc, #140]	; (8006328 <_svfiprintf_r+0x1f4>)
 800629c:	bb1b      	cbnz	r3, 80062e6 <_svfiprintf_r+0x1b2>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	3308      	adds	r3, #8
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ac:	4433      	add	r3, r6
 80062ae:	9309      	str	r3, [sp, #36]	; 0x24
 80062b0:	e767      	b.n	8006182 <_svfiprintf_r+0x4e>
 80062b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062b6:	460c      	mov	r4, r1
 80062b8:	2001      	movs	r0, #1
 80062ba:	e7a5      	b.n	8006208 <_svfiprintf_r+0xd4>
 80062bc:	2300      	movs	r3, #0
 80062be:	3401      	adds	r4, #1
 80062c0:	9305      	str	r3, [sp, #20]
 80062c2:	4619      	mov	r1, r3
 80062c4:	f04f 0c0a 	mov.w	ip, #10
 80062c8:	4620      	mov	r0, r4
 80062ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ce:	3a30      	subs	r2, #48	; 0x30
 80062d0:	2a09      	cmp	r2, #9
 80062d2:	d903      	bls.n	80062dc <_svfiprintf_r+0x1a8>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c5      	beq.n	8006264 <_svfiprintf_r+0x130>
 80062d8:	9105      	str	r1, [sp, #20]
 80062da:	e7c3      	b.n	8006264 <_svfiprintf_r+0x130>
 80062dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e0:	4604      	mov	r4, r0
 80062e2:	2301      	movs	r3, #1
 80062e4:	e7f0      	b.n	80062c8 <_svfiprintf_r+0x194>
 80062e6:	ab03      	add	r3, sp, #12
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	462a      	mov	r2, r5
 80062ec:	4b0f      	ldr	r3, [pc, #60]	; (800632c <_svfiprintf_r+0x1f8>)
 80062ee:	a904      	add	r1, sp, #16
 80062f0:	4638      	mov	r0, r7
 80062f2:	f3af 8000 	nop.w
 80062f6:	1c42      	adds	r2, r0, #1
 80062f8:	4606      	mov	r6, r0
 80062fa:	d1d6      	bne.n	80062aa <_svfiprintf_r+0x176>
 80062fc:	89ab      	ldrh	r3, [r5, #12]
 80062fe:	065b      	lsls	r3, r3, #25
 8006300:	f53f af2c 	bmi.w	800615c <_svfiprintf_r+0x28>
 8006304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006306:	b01d      	add	sp, #116	; 0x74
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	462a      	mov	r2, r5
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <_svfiprintf_r+0x1f8>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4638      	mov	r0, r7
 8006318:	f000 f87a 	bl	8006410 <_printf_i>
 800631c:	e7eb      	b.n	80062f6 <_svfiprintf_r+0x1c2>
 800631e:	bf00      	nop
 8006320:	0800883c 	.word	0x0800883c
 8006324:	08008846 	.word	0x08008846
 8006328:	00000000 	.word	0x00000000
 800632c:	0800607f 	.word	0x0800607f
 8006330:	08008842 	.word	0x08008842

08006334 <_printf_common>:
 8006334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006338:	4616      	mov	r6, r2
 800633a:	4699      	mov	r9, r3
 800633c:	688a      	ldr	r2, [r1, #8]
 800633e:	690b      	ldr	r3, [r1, #16]
 8006340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006344:	4293      	cmp	r3, r2
 8006346:	bfb8      	it	lt
 8006348:	4613      	movlt	r3, r2
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006350:	4607      	mov	r7, r0
 8006352:	460c      	mov	r4, r1
 8006354:	b10a      	cbz	r2, 800635a <_printf_common+0x26>
 8006356:	3301      	adds	r3, #1
 8006358:	6033      	str	r3, [r6, #0]
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	0699      	lsls	r1, r3, #26
 800635e:	bf42      	ittt	mi
 8006360:	6833      	ldrmi	r3, [r6, #0]
 8006362:	3302      	addmi	r3, #2
 8006364:	6033      	strmi	r3, [r6, #0]
 8006366:	6825      	ldr	r5, [r4, #0]
 8006368:	f015 0506 	ands.w	r5, r5, #6
 800636c:	d106      	bne.n	800637c <_printf_common+0x48>
 800636e:	f104 0a19 	add.w	sl, r4, #25
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	6832      	ldr	r2, [r6, #0]
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	42ab      	cmp	r3, r5
 800637a:	dc26      	bgt.n	80063ca <_printf_common+0x96>
 800637c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006380:	1e13      	subs	r3, r2, #0
 8006382:	6822      	ldr	r2, [r4, #0]
 8006384:	bf18      	it	ne
 8006386:	2301      	movne	r3, #1
 8006388:	0692      	lsls	r2, r2, #26
 800638a:	d42b      	bmi.n	80063e4 <_printf_common+0xb0>
 800638c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006390:	4649      	mov	r1, r9
 8006392:	4638      	mov	r0, r7
 8006394:	47c0      	blx	r8
 8006396:	3001      	adds	r0, #1
 8006398:	d01e      	beq.n	80063d8 <_printf_common+0xa4>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	68e5      	ldr	r5, [r4, #12]
 800639e:	6832      	ldr	r2, [r6, #0]
 80063a0:	f003 0306 	and.w	r3, r3, #6
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	bf08      	it	eq
 80063a8:	1aad      	subeq	r5, r5, r2
 80063aa:	68a3      	ldr	r3, [r4, #8]
 80063ac:	6922      	ldr	r2, [r4, #16]
 80063ae:	bf0c      	ite	eq
 80063b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b4:	2500      	movne	r5, #0
 80063b6:	4293      	cmp	r3, r2
 80063b8:	bfc4      	itt	gt
 80063ba:	1a9b      	subgt	r3, r3, r2
 80063bc:	18ed      	addgt	r5, r5, r3
 80063be:	2600      	movs	r6, #0
 80063c0:	341a      	adds	r4, #26
 80063c2:	42b5      	cmp	r5, r6
 80063c4:	d11a      	bne.n	80063fc <_printf_common+0xc8>
 80063c6:	2000      	movs	r0, #0
 80063c8:	e008      	b.n	80063dc <_printf_common+0xa8>
 80063ca:	2301      	movs	r3, #1
 80063cc:	4652      	mov	r2, sl
 80063ce:	4649      	mov	r1, r9
 80063d0:	4638      	mov	r0, r7
 80063d2:	47c0      	blx	r8
 80063d4:	3001      	adds	r0, #1
 80063d6:	d103      	bne.n	80063e0 <_printf_common+0xac>
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e0:	3501      	adds	r5, #1
 80063e2:	e7c6      	b.n	8006372 <_printf_common+0x3e>
 80063e4:	18e1      	adds	r1, r4, r3
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	2030      	movs	r0, #48	; 0x30
 80063ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063ee:	4422      	add	r2, r4
 80063f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063f8:	3302      	adds	r3, #2
 80063fa:	e7c7      	b.n	800638c <_printf_common+0x58>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4622      	mov	r2, r4
 8006400:	4649      	mov	r1, r9
 8006402:	4638      	mov	r0, r7
 8006404:	47c0      	blx	r8
 8006406:	3001      	adds	r0, #1
 8006408:	d0e6      	beq.n	80063d8 <_printf_common+0xa4>
 800640a:	3601      	adds	r6, #1
 800640c:	e7d9      	b.n	80063c2 <_printf_common+0x8e>
	...

08006410 <_printf_i>:
 8006410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006414:	7e0f      	ldrb	r7, [r1, #24]
 8006416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006418:	2f78      	cmp	r7, #120	; 0x78
 800641a:	4691      	mov	r9, r2
 800641c:	4680      	mov	r8, r0
 800641e:	460c      	mov	r4, r1
 8006420:	469a      	mov	sl, r3
 8006422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006426:	d807      	bhi.n	8006438 <_printf_i+0x28>
 8006428:	2f62      	cmp	r7, #98	; 0x62
 800642a:	d80a      	bhi.n	8006442 <_printf_i+0x32>
 800642c:	2f00      	cmp	r7, #0
 800642e:	f000 80d8 	beq.w	80065e2 <_printf_i+0x1d2>
 8006432:	2f58      	cmp	r7, #88	; 0x58
 8006434:	f000 80a3 	beq.w	800657e <_printf_i+0x16e>
 8006438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800643c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006440:	e03a      	b.n	80064b8 <_printf_i+0xa8>
 8006442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006446:	2b15      	cmp	r3, #21
 8006448:	d8f6      	bhi.n	8006438 <_printf_i+0x28>
 800644a:	a101      	add	r1, pc, #4	; (adr r1, 8006450 <_printf_i+0x40>)
 800644c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064bd 	.word	0x080064bd
 8006458:	08006439 	.word	0x08006439
 800645c:	08006439 	.word	0x08006439
 8006460:	08006439 	.word	0x08006439
 8006464:	08006439 	.word	0x08006439
 8006468:	080064bd 	.word	0x080064bd
 800646c:	08006439 	.word	0x08006439
 8006470:	08006439 	.word	0x08006439
 8006474:	08006439 	.word	0x08006439
 8006478:	08006439 	.word	0x08006439
 800647c:	080065c9 	.word	0x080065c9
 8006480:	080064ed 	.word	0x080064ed
 8006484:	080065ab 	.word	0x080065ab
 8006488:	08006439 	.word	0x08006439
 800648c:	08006439 	.word	0x08006439
 8006490:	080065eb 	.word	0x080065eb
 8006494:	08006439 	.word	0x08006439
 8006498:	080064ed 	.word	0x080064ed
 800649c:	08006439 	.word	0x08006439
 80064a0:	08006439 	.word	0x08006439
 80064a4:	080065b3 	.word	0x080065b3
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	1d1a      	adds	r2, r3, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	602a      	str	r2, [r5, #0]
 80064b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0a3      	b.n	8006604 <_printf_i+0x1f4>
 80064bc:	6820      	ldr	r0, [r4, #0]
 80064be:	6829      	ldr	r1, [r5, #0]
 80064c0:	0606      	lsls	r6, r0, #24
 80064c2:	f101 0304 	add.w	r3, r1, #4
 80064c6:	d50a      	bpl.n	80064de <_printf_i+0xce>
 80064c8:	680e      	ldr	r6, [r1, #0]
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	2e00      	cmp	r6, #0
 80064ce:	da03      	bge.n	80064d8 <_printf_i+0xc8>
 80064d0:	232d      	movs	r3, #45	; 0x2d
 80064d2:	4276      	negs	r6, r6
 80064d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d8:	485e      	ldr	r0, [pc, #376]	; (8006654 <_printf_i+0x244>)
 80064da:	230a      	movs	r3, #10
 80064dc:	e019      	b.n	8006512 <_printf_i+0x102>
 80064de:	680e      	ldr	r6, [r1, #0]
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064e6:	bf18      	it	ne
 80064e8:	b236      	sxthne	r6, r6
 80064ea:	e7ef      	b.n	80064cc <_printf_i+0xbc>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	1d19      	adds	r1, r3, #4
 80064f2:	6029      	str	r1, [r5, #0]
 80064f4:	0601      	lsls	r1, r0, #24
 80064f6:	d501      	bpl.n	80064fc <_printf_i+0xec>
 80064f8:	681e      	ldr	r6, [r3, #0]
 80064fa:	e002      	b.n	8006502 <_printf_i+0xf2>
 80064fc:	0646      	lsls	r6, r0, #25
 80064fe:	d5fb      	bpl.n	80064f8 <_printf_i+0xe8>
 8006500:	881e      	ldrh	r6, [r3, #0]
 8006502:	4854      	ldr	r0, [pc, #336]	; (8006654 <_printf_i+0x244>)
 8006504:	2f6f      	cmp	r7, #111	; 0x6f
 8006506:	bf0c      	ite	eq
 8006508:	2308      	moveq	r3, #8
 800650a:	230a      	movne	r3, #10
 800650c:	2100      	movs	r1, #0
 800650e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006512:	6865      	ldr	r5, [r4, #4]
 8006514:	60a5      	str	r5, [r4, #8]
 8006516:	2d00      	cmp	r5, #0
 8006518:	bfa2      	ittt	ge
 800651a:	6821      	ldrge	r1, [r4, #0]
 800651c:	f021 0104 	bicge.w	r1, r1, #4
 8006520:	6021      	strge	r1, [r4, #0]
 8006522:	b90e      	cbnz	r6, 8006528 <_printf_i+0x118>
 8006524:	2d00      	cmp	r5, #0
 8006526:	d04d      	beq.n	80065c4 <_printf_i+0x1b4>
 8006528:	4615      	mov	r5, r2
 800652a:	fbb6 f1f3 	udiv	r1, r6, r3
 800652e:	fb03 6711 	mls	r7, r3, r1, r6
 8006532:	5dc7      	ldrb	r7, [r0, r7]
 8006534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006538:	4637      	mov	r7, r6
 800653a:	42bb      	cmp	r3, r7
 800653c:	460e      	mov	r6, r1
 800653e:	d9f4      	bls.n	800652a <_printf_i+0x11a>
 8006540:	2b08      	cmp	r3, #8
 8006542:	d10b      	bne.n	800655c <_printf_i+0x14c>
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	07de      	lsls	r6, r3, #31
 8006548:	d508      	bpl.n	800655c <_printf_i+0x14c>
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	6861      	ldr	r1, [r4, #4]
 800654e:	4299      	cmp	r1, r3
 8006550:	bfde      	ittt	le
 8006552:	2330      	movle	r3, #48	; 0x30
 8006554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006558:	f105 35ff 	addle.w	r5, r5, #4294967295
 800655c:	1b52      	subs	r2, r2, r5
 800655e:	6122      	str	r2, [r4, #16]
 8006560:	f8cd a000 	str.w	sl, [sp]
 8006564:	464b      	mov	r3, r9
 8006566:	aa03      	add	r2, sp, #12
 8006568:	4621      	mov	r1, r4
 800656a:	4640      	mov	r0, r8
 800656c:	f7ff fee2 	bl	8006334 <_printf_common>
 8006570:	3001      	adds	r0, #1
 8006572:	d14c      	bne.n	800660e <_printf_i+0x1fe>
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	b004      	add	sp, #16
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	4835      	ldr	r0, [pc, #212]	; (8006654 <_printf_i+0x244>)
 8006580:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006584:	6829      	ldr	r1, [r5, #0]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	f851 6b04 	ldr.w	r6, [r1], #4
 800658c:	6029      	str	r1, [r5, #0]
 800658e:	061d      	lsls	r5, r3, #24
 8006590:	d514      	bpl.n	80065bc <_printf_i+0x1ac>
 8006592:	07df      	lsls	r7, r3, #31
 8006594:	bf44      	itt	mi
 8006596:	f043 0320 	orrmi.w	r3, r3, #32
 800659a:	6023      	strmi	r3, [r4, #0]
 800659c:	b91e      	cbnz	r6, 80065a6 <_printf_i+0x196>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f023 0320 	bic.w	r3, r3, #32
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	2310      	movs	r3, #16
 80065a8:	e7b0      	b.n	800650c <_printf_i+0xfc>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	f043 0320 	orr.w	r3, r3, #32
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	2378      	movs	r3, #120	; 0x78
 80065b4:	4828      	ldr	r0, [pc, #160]	; (8006658 <_printf_i+0x248>)
 80065b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ba:	e7e3      	b.n	8006584 <_printf_i+0x174>
 80065bc:	0659      	lsls	r1, r3, #25
 80065be:	bf48      	it	mi
 80065c0:	b2b6      	uxthmi	r6, r6
 80065c2:	e7e6      	b.n	8006592 <_printf_i+0x182>
 80065c4:	4615      	mov	r5, r2
 80065c6:	e7bb      	b.n	8006540 <_printf_i+0x130>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	6826      	ldr	r6, [r4, #0]
 80065cc:	6961      	ldr	r1, [r4, #20]
 80065ce:	1d18      	adds	r0, r3, #4
 80065d0:	6028      	str	r0, [r5, #0]
 80065d2:	0635      	lsls	r5, r6, #24
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	d501      	bpl.n	80065dc <_printf_i+0x1cc>
 80065d8:	6019      	str	r1, [r3, #0]
 80065da:	e002      	b.n	80065e2 <_printf_i+0x1d2>
 80065dc:	0670      	lsls	r0, r6, #25
 80065de:	d5fb      	bpl.n	80065d8 <_printf_i+0x1c8>
 80065e0:	8019      	strh	r1, [r3, #0]
 80065e2:	2300      	movs	r3, #0
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	4615      	mov	r5, r2
 80065e8:	e7ba      	b.n	8006560 <_printf_i+0x150>
 80065ea:	682b      	ldr	r3, [r5, #0]
 80065ec:	1d1a      	adds	r2, r3, #4
 80065ee:	602a      	str	r2, [r5, #0]
 80065f0:	681d      	ldr	r5, [r3, #0]
 80065f2:	6862      	ldr	r2, [r4, #4]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7f9 fe02 	bl	8000200 <memchr>
 80065fc:	b108      	cbz	r0, 8006602 <_printf_i+0x1f2>
 80065fe:	1b40      	subs	r0, r0, r5
 8006600:	6060      	str	r0, [r4, #4]
 8006602:	6863      	ldr	r3, [r4, #4]
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	2300      	movs	r3, #0
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660c:	e7a8      	b.n	8006560 <_printf_i+0x150>
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	462a      	mov	r2, r5
 8006612:	4649      	mov	r1, r9
 8006614:	4640      	mov	r0, r8
 8006616:	47d0      	blx	sl
 8006618:	3001      	adds	r0, #1
 800661a:	d0ab      	beq.n	8006574 <_printf_i+0x164>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	079b      	lsls	r3, r3, #30
 8006620:	d413      	bmi.n	800664a <_printf_i+0x23a>
 8006622:	68e0      	ldr	r0, [r4, #12]
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	4298      	cmp	r0, r3
 8006628:	bfb8      	it	lt
 800662a:	4618      	movlt	r0, r3
 800662c:	e7a4      	b.n	8006578 <_printf_i+0x168>
 800662e:	2301      	movs	r3, #1
 8006630:	4632      	mov	r2, r6
 8006632:	4649      	mov	r1, r9
 8006634:	4640      	mov	r0, r8
 8006636:	47d0      	blx	sl
 8006638:	3001      	adds	r0, #1
 800663a:	d09b      	beq.n	8006574 <_printf_i+0x164>
 800663c:	3501      	adds	r5, #1
 800663e:	68e3      	ldr	r3, [r4, #12]
 8006640:	9903      	ldr	r1, [sp, #12]
 8006642:	1a5b      	subs	r3, r3, r1
 8006644:	42ab      	cmp	r3, r5
 8006646:	dcf2      	bgt.n	800662e <_printf_i+0x21e>
 8006648:	e7eb      	b.n	8006622 <_printf_i+0x212>
 800664a:	2500      	movs	r5, #0
 800664c:	f104 0619 	add.w	r6, r4, #25
 8006650:	e7f5      	b.n	800663e <_printf_i+0x22e>
 8006652:	bf00      	nop
 8006654:	0800884d 	.word	0x0800884d
 8006658:	0800885e 	.word	0x0800885e

0800665c <_sbrk_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d06      	ldr	r5, [pc, #24]	; (8006678 <_sbrk_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fb fc92 	bl	8001f90 <_sbrk>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_sbrk_r+0x1a>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_sbrk_r+0x1a>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	20000268 	.word	0x20000268

0800667c <strcpy>:
 800667c:	4603      	mov	r3, r0
 800667e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006682:	f803 2b01 	strb.w	r2, [r3], #1
 8006686:	2a00      	cmp	r2, #0
 8006688:	d1f9      	bne.n	800667e <strcpy+0x2>
 800668a:	4770      	bx	lr

0800668c <__assert_func>:
 800668c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800668e:	4614      	mov	r4, r2
 8006690:	461a      	mov	r2, r3
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <__assert_func+0x2c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4605      	mov	r5, r0
 8006698:	68d8      	ldr	r0, [r3, #12]
 800669a:	b14c      	cbz	r4, 80066b0 <__assert_func+0x24>
 800669c:	4b07      	ldr	r3, [pc, #28]	; (80066bc <__assert_func+0x30>)
 800669e:	9100      	str	r1, [sp, #0]
 80066a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066a4:	4906      	ldr	r1, [pc, #24]	; (80066c0 <__assert_func+0x34>)
 80066a6:	462b      	mov	r3, r5
 80066a8:	f000 fe88 	bl	80073bc <fiprintf>
 80066ac:	f001 f942 	bl	8007934 <abort>
 80066b0:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <__assert_func+0x38>)
 80066b2:	461c      	mov	r4, r3
 80066b4:	e7f3      	b.n	800669e <__assert_func+0x12>
 80066b6:	bf00      	nop
 80066b8:	2000009c 	.word	0x2000009c
 80066bc:	0800886f 	.word	0x0800886f
 80066c0:	0800887c 	.word	0x0800887c
 80066c4:	080088aa 	.word	0x080088aa

080066c8 <quorem>:
 80066c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	6903      	ldr	r3, [r0, #16]
 80066ce:	690c      	ldr	r4, [r1, #16]
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	4607      	mov	r7, r0
 80066d4:	f2c0 8081 	blt.w	80067da <quorem+0x112>
 80066d8:	3c01      	subs	r4, #1
 80066da:	f101 0814 	add.w	r8, r1, #20
 80066de:	f100 0514 	add.w	r5, r0, #20
 80066e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f0:	3301      	adds	r3, #1
 80066f2:	429a      	cmp	r2, r3
 80066f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006700:	d331      	bcc.n	8006766 <quorem+0x9e>
 8006702:	f04f 0e00 	mov.w	lr, #0
 8006706:	4640      	mov	r0, r8
 8006708:	46ac      	mov	ip, r5
 800670a:	46f2      	mov	sl, lr
 800670c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006710:	b293      	uxth	r3, r2
 8006712:	fb06 e303 	mla	r3, r6, r3, lr
 8006716:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800671a:	b29b      	uxth	r3, r3
 800671c:	ebaa 0303 	sub.w	r3, sl, r3
 8006720:	f8dc a000 	ldr.w	sl, [ip]
 8006724:	0c12      	lsrs	r2, r2, #16
 8006726:	fa13 f38a 	uxtah	r3, r3, sl
 800672a:	fb06 e202 	mla	r2, r6, r2, lr
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	9b00      	ldr	r3, [sp, #0]
 8006732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006736:	b292      	uxth	r2, r2
 8006738:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800673c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006740:	f8bd 3000 	ldrh.w	r3, [sp]
 8006744:	4581      	cmp	r9, r0
 8006746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800674a:	f84c 3b04 	str.w	r3, [ip], #4
 800674e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006752:	d2db      	bcs.n	800670c <quorem+0x44>
 8006754:	f855 300b 	ldr.w	r3, [r5, fp]
 8006758:	b92b      	cbnz	r3, 8006766 <quorem+0x9e>
 800675a:	9b01      	ldr	r3, [sp, #4]
 800675c:	3b04      	subs	r3, #4
 800675e:	429d      	cmp	r5, r3
 8006760:	461a      	mov	r2, r3
 8006762:	d32e      	bcc.n	80067c2 <quorem+0xfa>
 8006764:	613c      	str	r4, [r7, #16]
 8006766:	4638      	mov	r0, r7
 8006768:	f7ff fa90 	bl	8005c8c <__mcmp>
 800676c:	2800      	cmp	r0, #0
 800676e:	db24      	blt.n	80067ba <quorem+0xf2>
 8006770:	3601      	adds	r6, #1
 8006772:	4628      	mov	r0, r5
 8006774:	f04f 0c00 	mov.w	ip, #0
 8006778:	f858 2b04 	ldr.w	r2, [r8], #4
 800677c:	f8d0 e000 	ldr.w	lr, [r0]
 8006780:	b293      	uxth	r3, r2
 8006782:	ebac 0303 	sub.w	r3, ip, r3
 8006786:	0c12      	lsrs	r2, r2, #16
 8006788:	fa13 f38e 	uxtah	r3, r3, lr
 800678c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006794:	b29b      	uxth	r3, r3
 8006796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800679a:	45c1      	cmp	r9, r8
 800679c:	f840 3b04 	str.w	r3, [r0], #4
 80067a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067a4:	d2e8      	bcs.n	8006778 <quorem+0xb0>
 80067a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ae:	b922      	cbnz	r2, 80067ba <quorem+0xf2>
 80067b0:	3b04      	subs	r3, #4
 80067b2:	429d      	cmp	r5, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	d30a      	bcc.n	80067ce <quorem+0x106>
 80067b8:	613c      	str	r4, [r7, #16]
 80067ba:	4630      	mov	r0, r6
 80067bc:	b003      	add	sp, #12
 80067be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	3b04      	subs	r3, #4
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	d1cc      	bne.n	8006764 <quorem+0x9c>
 80067ca:	3c01      	subs	r4, #1
 80067cc:	e7c7      	b.n	800675e <quorem+0x96>
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	3b04      	subs	r3, #4
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	d1f0      	bne.n	80067b8 <quorem+0xf0>
 80067d6:	3c01      	subs	r4, #1
 80067d8:	e7eb      	b.n	80067b2 <quorem+0xea>
 80067da:	2000      	movs	r0, #0
 80067dc:	e7ee      	b.n	80067bc <quorem+0xf4>
	...

080067e0 <_dtoa_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	ed2d 8b04 	vpush	{d8-d9}
 80067e8:	ec57 6b10 	vmov	r6, r7, d0
 80067ec:	b093      	sub	sp, #76	; 0x4c
 80067ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067f4:	9106      	str	r1, [sp, #24]
 80067f6:	ee10 aa10 	vmov	sl, s0
 80067fa:	4604      	mov	r4, r0
 80067fc:	9209      	str	r2, [sp, #36]	; 0x24
 80067fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006800:	46bb      	mov	fp, r7
 8006802:	b975      	cbnz	r5, 8006822 <_dtoa_r+0x42>
 8006804:	2010      	movs	r0, #16
 8006806:	f000 fdeb 	bl	80073e0 <malloc>
 800680a:	4602      	mov	r2, r0
 800680c:	6260      	str	r0, [r4, #36]	; 0x24
 800680e:	b920      	cbnz	r0, 800681a <_dtoa_r+0x3a>
 8006810:	4ba7      	ldr	r3, [pc, #668]	; (8006ab0 <_dtoa_r+0x2d0>)
 8006812:	21ea      	movs	r1, #234	; 0xea
 8006814:	48a7      	ldr	r0, [pc, #668]	; (8006ab4 <_dtoa_r+0x2d4>)
 8006816:	f7ff ff39 	bl	800668c <__assert_func>
 800681a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800681e:	6005      	str	r5, [r0, #0]
 8006820:	60c5      	str	r5, [r0, #12]
 8006822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	b151      	cbz	r1, 800683e <_dtoa_r+0x5e>
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	604a      	str	r2, [r1, #4]
 800682c:	2301      	movs	r3, #1
 800682e:	4093      	lsls	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
 8006832:	4620      	mov	r0, r4
 8006834:	f7fe ffe8 	bl	8005808 <_Bfree>
 8006838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	1e3b      	subs	r3, r7, #0
 8006840:	bfaa      	itet	ge
 8006842:	2300      	movge	r3, #0
 8006844:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006848:	f8c8 3000 	strge.w	r3, [r8]
 800684c:	4b9a      	ldr	r3, [pc, #616]	; (8006ab8 <_dtoa_r+0x2d8>)
 800684e:	bfbc      	itt	lt
 8006850:	2201      	movlt	r2, #1
 8006852:	f8c8 2000 	strlt.w	r2, [r8]
 8006856:	ea33 030b 	bics.w	r3, r3, fp
 800685a:	d11b      	bne.n	8006894 <_dtoa_r+0xb4>
 800685c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800685e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006868:	4333      	orrs	r3, r6
 800686a:	f000 8592 	beq.w	8007392 <_dtoa_r+0xbb2>
 800686e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006870:	b963      	cbnz	r3, 800688c <_dtoa_r+0xac>
 8006872:	4b92      	ldr	r3, [pc, #584]	; (8006abc <_dtoa_r+0x2dc>)
 8006874:	e022      	b.n	80068bc <_dtoa_r+0xdc>
 8006876:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <_dtoa_r+0x2e0>)
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	3308      	adds	r3, #8
 800687c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	9801      	ldr	r0, [sp, #4]
 8006882:	b013      	add	sp, #76	; 0x4c
 8006884:	ecbd 8b04 	vpop	{d8-d9}
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	4b8b      	ldr	r3, [pc, #556]	; (8006abc <_dtoa_r+0x2dc>)
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	3303      	adds	r3, #3
 8006892:	e7f3      	b.n	800687c <_dtoa_r+0x9c>
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	4650      	mov	r0, sl
 800689a:	4659      	mov	r1, fp
 800689c:	f7fa f924 	bl	8000ae8 <__aeabi_dcmpeq>
 80068a0:	ec4b ab19 	vmov	d9, sl, fp
 80068a4:	4680      	mov	r8, r0
 80068a6:	b158      	cbz	r0, 80068c0 <_dtoa_r+0xe0>
 80068a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068aa:	2301      	movs	r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 856b 	beq.w	800738c <_dtoa_r+0xbac>
 80068b6:	4883      	ldr	r0, [pc, #524]	; (8006ac4 <_dtoa_r+0x2e4>)
 80068b8:	6018      	str	r0, [r3, #0]
 80068ba:	1e43      	subs	r3, r0, #1
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	e7df      	b.n	8006880 <_dtoa_r+0xa0>
 80068c0:	ec4b ab10 	vmov	d0, sl, fp
 80068c4:	aa10      	add	r2, sp, #64	; 0x40
 80068c6:	a911      	add	r1, sp, #68	; 0x44
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff fa85 	bl	8005dd8 <__d2b>
 80068ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80068d2:	ee08 0a10 	vmov	s16, r0
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	f000 8084 	beq.w	80069e4 <_dtoa_r+0x204>
 80068dc:	ee19 3a90 	vmov	r3, s19
 80068e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80068e8:	4656      	mov	r6, sl
 80068ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80068ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80068f6:	4b74      	ldr	r3, [pc, #464]	; (8006ac8 <_dtoa_r+0x2e8>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	4630      	mov	r0, r6
 80068fc:	4639      	mov	r1, r7
 80068fe:	f7f9 fcd3 	bl	80002a8 <__aeabi_dsub>
 8006902:	a365      	add	r3, pc, #404	; (adr r3, 8006a98 <_dtoa_r+0x2b8>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fe86 	bl	8000618 <__aeabi_dmul>
 800690c:	a364      	add	r3, pc, #400	; (adr r3, 8006aa0 <_dtoa_r+0x2c0>)
 800690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006912:	f7f9 fccb 	bl	80002ac <__adddf3>
 8006916:	4606      	mov	r6, r0
 8006918:	4628      	mov	r0, r5
 800691a:	460f      	mov	r7, r1
 800691c:	f7f9 fe12 	bl	8000544 <__aeabi_i2d>
 8006920:	a361      	add	r3, pc, #388	; (adr r3, 8006aa8 <_dtoa_r+0x2c8>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f7f9 fe77 	bl	8000618 <__aeabi_dmul>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4630      	mov	r0, r6
 8006930:	4639      	mov	r1, r7
 8006932:	f7f9 fcbb 	bl	80002ac <__adddf3>
 8006936:	4606      	mov	r6, r0
 8006938:	460f      	mov	r7, r1
 800693a:	f7fa f91d 	bl	8000b78 <__aeabi_d2iz>
 800693e:	2200      	movs	r2, #0
 8006940:	9000      	str	r0, [sp, #0]
 8006942:	2300      	movs	r3, #0
 8006944:	4630      	mov	r0, r6
 8006946:	4639      	mov	r1, r7
 8006948:	f7fa f8d8 	bl	8000afc <__aeabi_dcmplt>
 800694c:	b150      	cbz	r0, 8006964 <_dtoa_r+0x184>
 800694e:	9800      	ldr	r0, [sp, #0]
 8006950:	f7f9 fdf8 	bl	8000544 <__aeabi_i2d>
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	f7fa f8c6 	bl	8000ae8 <__aeabi_dcmpeq>
 800695c:	b910      	cbnz	r0, 8006964 <_dtoa_r+0x184>
 800695e:	9b00      	ldr	r3, [sp, #0]
 8006960:	3b01      	subs	r3, #1
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	2b16      	cmp	r3, #22
 8006968:	d85a      	bhi.n	8006a20 <_dtoa_r+0x240>
 800696a:	9a00      	ldr	r2, [sp, #0]
 800696c:	4b57      	ldr	r3, [pc, #348]	; (8006acc <_dtoa_r+0x2ec>)
 800696e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	ec51 0b19 	vmov	r0, r1, d9
 800697a:	f7fa f8bf 	bl	8000afc <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	d050      	beq.n	8006a24 <_dtoa_r+0x244>
 8006982:	9b00      	ldr	r3, [sp, #0]
 8006984:	3b01      	subs	r3, #1
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	930b      	str	r3, [sp, #44]	; 0x2c
 800698c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800698e:	1b5d      	subs	r5, r3, r5
 8006990:	1e6b      	subs	r3, r5, #1
 8006992:	9305      	str	r3, [sp, #20]
 8006994:	bf45      	ittet	mi
 8006996:	f1c5 0301 	rsbmi	r3, r5, #1
 800699a:	9304      	strmi	r3, [sp, #16]
 800699c:	2300      	movpl	r3, #0
 800699e:	2300      	movmi	r3, #0
 80069a0:	bf4c      	ite	mi
 80069a2:	9305      	strmi	r3, [sp, #20]
 80069a4:	9304      	strpl	r3, [sp, #16]
 80069a6:	9b00      	ldr	r3, [sp, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	db3d      	blt.n	8006a28 <_dtoa_r+0x248>
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	9a00      	ldr	r2, [sp, #0]
 80069b0:	920a      	str	r2, [sp, #40]	; 0x28
 80069b2:	4413      	add	r3, r2
 80069b4:	9305      	str	r3, [sp, #20]
 80069b6:	2300      	movs	r3, #0
 80069b8:	9307      	str	r3, [sp, #28]
 80069ba:	9b06      	ldr	r3, [sp, #24]
 80069bc:	2b09      	cmp	r3, #9
 80069be:	f200 8089 	bhi.w	8006ad4 <_dtoa_r+0x2f4>
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	bfc4      	itt	gt
 80069c6:	3b04      	subgt	r3, #4
 80069c8:	9306      	strgt	r3, [sp, #24]
 80069ca:	9b06      	ldr	r3, [sp, #24]
 80069cc:	f1a3 0302 	sub.w	r3, r3, #2
 80069d0:	bfcc      	ite	gt
 80069d2:	2500      	movgt	r5, #0
 80069d4:	2501      	movle	r5, #1
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	f200 8087 	bhi.w	8006aea <_dtoa_r+0x30a>
 80069dc:	e8df f003 	tbb	[pc, r3]
 80069e0:	59383a2d 	.word	0x59383a2d
 80069e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069e8:	441d      	add	r5, r3
 80069ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069ee:	2b20      	cmp	r3, #32
 80069f0:	bfc1      	itttt	gt
 80069f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80069fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80069fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a02:	bfda      	itte	le
 8006a04:	f1c3 0320 	rsble	r3, r3, #32
 8006a08:	fa06 f003 	lslle.w	r0, r6, r3
 8006a0c:	4318      	orrgt	r0, r3
 8006a0e:	f7f9 fd89 	bl	8000524 <__aeabi_ui2d>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4606      	mov	r6, r0
 8006a16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a1a:	3d01      	subs	r5, #1
 8006a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006a1e:	e76a      	b.n	80068f6 <_dtoa_r+0x116>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e7b2      	b.n	800698a <_dtoa_r+0x1aa>
 8006a24:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a26:	e7b1      	b.n	800698c <_dtoa_r+0x1ac>
 8006a28:	9b04      	ldr	r3, [sp, #16]
 8006a2a:	9a00      	ldr	r2, [sp, #0]
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	9304      	str	r3, [sp, #16]
 8006a30:	4253      	negs	r3, r2
 8006a32:	9307      	str	r3, [sp, #28]
 8006a34:	2300      	movs	r3, #0
 8006a36:	930a      	str	r3, [sp, #40]	; 0x28
 8006a38:	e7bf      	b.n	80069ba <_dtoa_r+0x1da>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9308      	str	r3, [sp, #32]
 8006a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc55      	bgt.n	8006af0 <_dtoa_r+0x310>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a4e:	e00c      	b.n	8006a6a <_dtoa_r+0x28a>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e7f3      	b.n	8006a3c <_dtoa_r+0x25c>
 8006a54:	2300      	movs	r3, #0
 8006a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a58:	9308      	str	r3, [sp, #32]
 8006a5a:	9b00      	ldr	r3, [sp, #0]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	9302      	str	r3, [sp, #8]
 8006a60:	3301      	adds	r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	9303      	str	r3, [sp, #12]
 8006a66:	bfb8      	it	lt
 8006a68:	2301      	movlt	r3, #1
 8006a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	6042      	str	r2, [r0, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	f102 0614 	add.w	r6, r2, #20
 8006a76:	429e      	cmp	r6, r3
 8006a78:	6841      	ldr	r1, [r0, #4]
 8006a7a:	d93d      	bls.n	8006af8 <_dtoa_r+0x318>
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7fe fe83 	bl	8005788 <_Balloc>
 8006a82:	9001      	str	r0, [sp, #4]
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d13b      	bne.n	8006b00 <_dtoa_r+0x320>
 8006a88:	4b11      	ldr	r3, [pc, #68]	; (8006ad0 <_dtoa_r+0x2f0>)
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a90:	e6c0      	b.n	8006814 <_dtoa_r+0x34>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e7df      	b.n	8006a56 <_dtoa_r+0x276>
 8006a96:	bf00      	nop
 8006a98:	636f4361 	.word	0x636f4361
 8006a9c:	3fd287a7 	.word	0x3fd287a7
 8006aa0:	8b60c8b3 	.word	0x8b60c8b3
 8006aa4:	3fc68a28 	.word	0x3fc68a28
 8006aa8:	509f79fb 	.word	0x509f79fb
 8006aac:	3fd34413 	.word	0x3fd34413
 8006ab0:	080086b8 	.word	0x080086b8
 8006ab4:	080088ba 	.word	0x080088ba
 8006ab8:	7ff00000 	.word	0x7ff00000
 8006abc:	080088b4 	.word	0x080088b4
 8006ac0:	080088ab 	.word	0x080088ab
 8006ac4:	080088b9 	.word	0x080088b9
 8006ac8:	3ff80000 	.word	0x3ff80000
 8006acc:	08008768 	.word	0x08008768
 8006ad0:	0800872b 	.word	0x0800872b
 8006ad4:	2501      	movs	r5, #1
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9306      	str	r3, [sp, #24]
 8006ada:	9508      	str	r5, [sp, #32]
 8006adc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2312      	movs	r3, #18
 8006ae8:	e7b0      	b.n	8006a4c <_dtoa_r+0x26c>
 8006aea:	2301      	movs	r3, #1
 8006aec:	9308      	str	r3, [sp, #32]
 8006aee:	e7f5      	b.n	8006adc <_dtoa_r+0x2fc>
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006af6:	e7b8      	b.n	8006a6a <_dtoa_r+0x28a>
 8006af8:	3101      	adds	r1, #1
 8006afa:	6041      	str	r1, [r0, #4]
 8006afc:	0052      	lsls	r2, r2, #1
 8006afe:	e7b8      	b.n	8006a72 <_dtoa_r+0x292>
 8006b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b02:	9a01      	ldr	r2, [sp, #4]
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	2b0e      	cmp	r3, #14
 8006b0a:	f200 809d 	bhi.w	8006c48 <_dtoa_r+0x468>
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	f000 809a 	beq.w	8006c48 <_dtoa_r+0x468>
 8006b14:	9b00      	ldr	r3, [sp, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd32      	ble.n	8006b80 <_dtoa_r+0x3a0>
 8006b1a:	4ab7      	ldr	r2, [pc, #732]	; (8006df8 <_dtoa_r+0x618>)
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	05d8      	lsls	r0, r3, #23
 8006b2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006b30:	d516      	bpl.n	8006b60 <_dtoa_r+0x380>
 8006b32:	4bb2      	ldr	r3, [pc, #712]	; (8006dfc <_dtoa_r+0x61c>)
 8006b34:	ec51 0b19 	vmov	r0, r1, d9
 8006b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b3c:	f7f9 fe96 	bl	800086c <__aeabi_ddiv>
 8006b40:	f007 070f 	and.w	r7, r7, #15
 8006b44:	4682      	mov	sl, r0
 8006b46:	468b      	mov	fp, r1
 8006b48:	2503      	movs	r5, #3
 8006b4a:	4eac      	ldr	r6, [pc, #688]	; (8006dfc <_dtoa_r+0x61c>)
 8006b4c:	b957      	cbnz	r7, 8006b64 <_dtoa_r+0x384>
 8006b4e:	4642      	mov	r2, r8
 8006b50:	464b      	mov	r3, r9
 8006b52:	4650      	mov	r0, sl
 8006b54:	4659      	mov	r1, fp
 8006b56:	f7f9 fe89 	bl	800086c <__aeabi_ddiv>
 8006b5a:	4682      	mov	sl, r0
 8006b5c:	468b      	mov	fp, r1
 8006b5e:	e028      	b.n	8006bb2 <_dtoa_r+0x3d2>
 8006b60:	2502      	movs	r5, #2
 8006b62:	e7f2      	b.n	8006b4a <_dtoa_r+0x36a>
 8006b64:	07f9      	lsls	r1, r7, #31
 8006b66:	d508      	bpl.n	8006b7a <_dtoa_r+0x39a>
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b70:	f7f9 fd52 	bl	8000618 <__aeabi_dmul>
 8006b74:	3501      	adds	r5, #1
 8006b76:	4680      	mov	r8, r0
 8006b78:	4689      	mov	r9, r1
 8006b7a:	107f      	asrs	r7, r7, #1
 8006b7c:	3608      	adds	r6, #8
 8006b7e:	e7e5      	b.n	8006b4c <_dtoa_r+0x36c>
 8006b80:	f000 809b 	beq.w	8006cba <_dtoa_r+0x4da>
 8006b84:	9b00      	ldr	r3, [sp, #0]
 8006b86:	4f9d      	ldr	r7, [pc, #628]	; (8006dfc <_dtoa_r+0x61c>)
 8006b88:	425e      	negs	r6, r3
 8006b8a:	4b9b      	ldr	r3, [pc, #620]	; (8006df8 <_dtoa_r+0x618>)
 8006b8c:	f006 020f 	and.w	r2, r6, #15
 8006b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	ec51 0b19 	vmov	r0, r1, d9
 8006b9c:	f7f9 fd3c 	bl	8000618 <__aeabi_dmul>
 8006ba0:	1136      	asrs	r6, r6, #4
 8006ba2:	4682      	mov	sl, r0
 8006ba4:	468b      	mov	fp, r1
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2502      	movs	r5, #2
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	d17a      	bne.n	8006ca4 <_dtoa_r+0x4c4>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1d3      	bne.n	8006b5a <_dtoa_r+0x37a>
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8082 	beq.w	8006cbe <_dtoa_r+0x4de>
 8006bba:	4b91      	ldr	r3, [pc, #580]	; (8006e00 <_dtoa_r+0x620>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	4659      	mov	r1, fp
 8006bc2:	f7f9 ff9b 	bl	8000afc <__aeabi_dcmplt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	d079      	beq.n	8006cbe <_dtoa_r+0x4de>
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d076      	beq.n	8006cbe <_dtoa_r+0x4de>
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	dd36      	ble.n	8006c44 <_dtoa_r+0x464>
 8006bd6:	9b00      	ldr	r3, [sp, #0]
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4659      	mov	r1, fp
 8006bdc:	1e5f      	subs	r7, r3, #1
 8006bde:	2200      	movs	r2, #0
 8006be0:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <_dtoa_r+0x624>)
 8006be2:	f7f9 fd19 	bl	8000618 <__aeabi_dmul>
 8006be6:	9e02      	ldr	r6, [sp, #8]
 8006be8:	4682      	mov	sl, r0
 8006bea:	468b      	mov	fp, r1
 8006bec:	3501      	adds	r5, #1
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f7f9 fca8 	bl	8000544 <__aeabi_i2d>
 8006bf4:	4652      	mov	r2, sl
 8006bf6:	465b      	mov	r3, fp
 8006bf8:	f7f9 fd0e 	bl	8000618 <__aeabi_dmul>
 8006bfc:	4b82      	ldr	r3, [pc, #520]	; (8006e08 <_dtoa_r+0x628>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f7f9 fb54 	bl	80002ac <__adddf3>
 8006c04:	46d0      	mov	r8, sl
 8006c06:	46d9      	mov	r9, fp
 8006c08:	4682      	mov	sl, r0
 8006c0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006c0e:	2e00      	cmp	r6, #0
 8006c10:	d158      	bne.n	8006cc4 <_dtoa_r+0x4e4>
 8006c12:	4b7e      	ldr	r3, [pc, #504]	; (8006e0c <_dtoa_r+0x62c>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7f9 fb45 	bl	80002a8 <__aeabi_dsub>
 8006c1e:	4652      	mov	r2, sl
 8006c20:	465b      	mov	r3, fp
 8006c22:	4680      	mov	r8, r0
 8006c24:	4689      	mov	r9, r1
 8006c26:	f7f9 ff87 	bl	8000b38 <__aeabi_dcmpgt>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f040 8295 	bne.w	800715a <_dtoa_r+0x97a>
 8006c30:	4652      	mov	r2, sl
 8006c32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c36:	4640      	mov	r0, r8
 8006c38:	4649      	mov	r1, r9
 8006c3a:	f7f9 ff5f 	bl	8000afc <__aeabi_dcmplt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f040 8289 	bne.w	8007156 <_dtoa_r+0x976>
 8006c44:	ec5b ab19 	vmov	sl, fp, d9
 8006c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f2c0 8148 	blt.w	8006ee0 <_dtoa_r+0x700>
 8006c50:	9a00      	ldr	r2, [sp, #0]
 8006c52:	2a0e      	cmp	r2, #14
 8006c54:	f300 8144 	bgt.w	8006ee0 <_dtoa_r+0x700>
 8006c58:	4b67      	ldr	r3, [pc, #412]	; (8006df8 <_dtoa_r+0x618>)
 8006c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f280 80d5 	bge.w	8006e14 <_dtoa_r+0x634>
 8006c6a:	9b03      	ldr	r3, [sp, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f300 80d1 	bgt.w	8006e14 <_dtoa_r+0x634>
 8006c72:	f040 826f 	bne.w	8007154 <_dtoa_r+0x974>
 8006c76:	4b65      	ldr	r3, [pc, #404]	; (8006e0c <_dtoa_r+0x62c>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fccb 	bl	8000618 <__aeabi_dmul>
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	f7f9 ff4d 	bl	8000b24 <__aeabi_dcmpge>
 8006c8a:	9e03      	ldr	r6, [sp, #12]
 8006c8c:	4637      	mov	r7, r6
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	f040 8245 	bne.w	800711e <_dtoa_r+0x93e>
 8006c94:	9d01      	ldr	r5, [sp, #4]
 8006c96:	2331      	movs	r3, #49	; 0x31
 8006c98:	f805 3b01 	strb.w	r3, [r5], #1
 8006c9c:	9b00      	ldr	r3, [sp, #0]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	e240      	b.n	8007126 <_dtoa_r+0x946>
 8006ca4:	07f2      	lsls	r2, r6, #31
 8006ca6:	d505      	bpl.n	8006cb4 <_dtoa_r+0x4d4>
 8006ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cac:	f7f9 fcb4 	bl	8000618 <__aeabi_dmul>
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	1076      	asrs	r6, r6, #1
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	e777      	b.n	8006baa <_dtoa_r+0x3ca>
 8006cba:	2502      	movs	r5, #2
 8006cbc:	e779      	b.n	8006bb2 <_dtoa_r+0x3d2>
 8006cbe:	9f00      	ldr	r7, [sp, #0]
 8006cc0:	9e03      	ldr	r6, [sp, #12]
 8006cc2:	e794      	b.n	8006bee <_dtoa_r+0x40e>
 8006cc4:	9901      	ldr	r1, [sp, #4]
 8006cc6:	4b4c      	ldr	r3, [pc, #304]	; (8006df8 <_dtoa_r+0x618>)
 8006cc8:	4431      	add	r1, r6
 8006cca:	910d      	str	r1, [sp, #52]	; 0x34
 8006ccc:	9908      	ldr	r1, [sp, #32]
 8006cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d043      	beq.n	8006d62 <_dtoa_r+0x582>
 8006cda:	494d      	ldr	r1, [pc, #308]	; (8006e10 <_dtoa_r+0x630>)
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7f9 fdc5 	bl	800086c <__aeabi_ddiv>
 8006ce2:	4652      	mov	r2, sl
 8006ce4:	465b      	mov	r3, fp
 8006ce6:	f7f9 fadf 	bl	80002a8 <__aeabi_dsub>
 8006cea:	9d01      	ldr	r5, [sp, #4]
 8006cec:	4682      	mov	sl, r0
 8006cee:	468b      	mov	fp, r1
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f7f9 ff40 	bl	8000b78 <__aeabi_d2iz>
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	f7f9 fc23 	bl	8000544 <__aeabi_i2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 facf 	bl	80002a8 <__aeabi_dsub>
 8006d0a:	3630      	adds	r6, #48	; 0x30
 8006d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8006d10:	4652      	mov	r2, sl
 8006d12:	465b      	mov	r3, fp
 8006d14:	4680      	mov	r8, r0
 8006d16:	4689      	mov	r9, r1
 8006d18:	f7f9 fef0 	bl	8000afc <__aeabi_dcmplt>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d163      	bne.n	8006de8 <_dtoa_r+0x608>
 8006d20:	4642      	mov	r2, r8
 8006d22:	464b      	mov	r3, r9
 8006d24:	4936      	ldr	r1, [pc, #216]	; (8006e00 <_dtoa_r+0x620>)
 8006d26:	2000      	movs	r0, #0
 8006d28:	f7f9 fabe 	bl	80002a8 <__aeabi_dsub>
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	465b      	mov	r3, fp
 8006d30:	f7f9 fee4 	bl	8000afc <__aeabi_dcmplt>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f040 80b5 	bne.w	8006ea4 <_dtoa_r+0x6c4>
 8006d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	d081      	beq.n	8006c44 <_dtoa_r+0x464>
 8006d40:	4b30      	ldr	r3, [pc, #192]	; (8006e04 <_dtoa_r+0x624>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	4650      	mov	r0, sl
 8006d46:	4659      	mov	r1, fp
 8006d48:	f7f9 fc66 	bl	8000618 <__aeabi_dmul>
 8006d4c:	4b2d      	ldr	r3, [pc, #180]	; (8006e04 <_dtoa_r+0x624>)
 8006d4e:	4682      	mov	sl, r0
 8006d50:	468b      	mov	fp, r1
 8006d52:	4640      	mov	r0, r8
 8006d54:	4649      	mov	r1, r9
 8006d56:	2200      	movs	r2, #0
 8006d58:	f7f9 fc5e 	bl	8000618 <__aeabi_dmul>
 8006d5c:	4680      	mov	r8, r0
 8006d5e:	4689      	mov	r9, r1
 8006d60:	e7c6      	b.n	8006cf0 <_dtoa_r+0x510>
 8006d62:	4650      	mov	r0, sl
 8006d64:	4659      	mov	r1, fp
 8006d66:	f7f9 fc57 	bl	8000618 <__aeabi_dmul>
 8006d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d6c:	9d01      	ldr	r5, [sp, #4]
 8006d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d70:	4682      	mov	sl, r0
 8006d72:	468b      	mov	fp, r1
 8006d74:	4649      	mov	r1, r9
 8006d76:	4640      	mov	r0, r8
 8006d78:	f7f9 fefe 	bl	8000b78 <__aeabi_d2iz>
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	f7f9 fbe1 	bl	8000544 <__aeabi_i2d>
 8006d82:	3630      	adds	r6, #48	; 0x30
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4640      	mov	r0, r8
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 fa8c 	bl	80002a8 <__aeabi_dsub>
 8006d90:	f805 6b01 	strb.w	r6, [r5], #1
 8006d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d96:	429d      	cmp	r5, r3
 8006d98:	4680      	mov	r8, r0
 8006d9a:	4689      	mov	r9, r1
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	d124      	bne.n	8006dec <_dtoa_r+0x60c>
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <_dtoa_r+0x630>)
 8006da4:	4650      	mov	r0, sl
 8006da6:	4659      	mov	r1, fp
 8006da8:	f7f9 fa80 	bl	80002ac <__adddf3>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 fec0 	bl	8000b38 <__aeabi_dcmpgt>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d173      	bne.n	8006ea4 <_dtoa_r+0x6c4>
 8006dbc:	4652      	mov	r2, sl
 8006dbe:	465b      	mov	r3, fp
 8006dc0:	4913      	ldr	r1, [pc, #76]	; (8006e10 <_dtoa_r+0x630>)
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f7f9 fa70 	bl	80002a8 <__aeabi_dsub>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4640      	mov	r0, r8
 8006dce:	4649      	mov	r1, r9
 8006dd0:	f7f9 fe94 	bl	8000afc <__aeabi_dcmplt>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f43f af35 	beq.w	8006c44 <_dtoa_r+0x464>
 8006dda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ddc:	1e6b      	subs	r3, r5, #1
 8006dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8006de0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d0f8      	beq.n	8006dda <_dtoa_r+0x5fa>
 8006de8:	9700      	str	r7, [sp, #0]
 8006dea:	e049      	b.n	8006e80 <_dtoa_r+0x6a0>
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <_dtoa_r+0x624>)
 8006dee:	f7f9 fc13 	bl	8000618 <__aeabi_dmul>
 8006df2:	4680      	mov	r8, r0
 8006df4:	4689      	mov	r9, r1
 8006df6:	e7bd      	b.n	8006d74 <_dtoa_r+0x594>
 8006df8:	08008768 	.word	0x08008768
 8006dfc:	08008740 	.word	0x08008740
 8006e00:	3ff00000 	.word	0x3ff00000
 8006e04:	40240000 	.word	0x40240000
 8006e08:	401c0000 	.word	0x401c0000
 8006e0c:	40140000 	.word	0x40140000
 8006e10:	3fe00000 	.word	0x3fe00000
 8006e14:	9d01      	ldr	r5, [sp, #4]
 8006e16:	4656      	mov	r6, sl
 8006e18:	465f      	mov	r7, fp
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	4630      	mov	r0, r6
 8006e20:	4639      	mov	r1, r7
 8006e22:	f7f9 fd23 	bl	800086c <__aeabi_ddiv>
 8006e26:	f7f9 fea7 	bl	8000b78 <__aeabi_d2iz>
 8006e2a:	4682      	mov	sl, r0
 8006e2c:	f7f9 fb8a 	bl	8000544 <__aeabi_i2d>
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	f7f9 fbf0 	bl	8000618 <__aeabi_dmul>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	4639      	mov	r1, r7
 8006e40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006e44:	f7f9 fa30 	bl	80002a8 <__aeabi_dsub>
 8006e48:	f805 6b01 	strb.w	r6, [r5], #1
 8006e4c:	9e01      	ldr	r6, [sp, #4]
 8006e4e:	9f03      	ldr	r7, [sp, #12]
 8006e50:	1bae      	subs	r6, r5, r6
 8006e52:	42b7      	cmp	r7, r6
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	d135      	bne.n	8006ec6 <_dtoa_r+0x6e6>
 8006e5a:	f7f9 fa27 	bl	80002ac <__adddf3>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	464b      	mov	r3, r9
 8006e62:	4606      	mov	r6, r0
 8006e64:	460f      	mov	r7, r1
 8006e66:	f7f9 fe67 	bl	8000b38 <__aeabi_dcmpgt>
 8006e6a:	b9d0      	cbnz	r0, 8006ea2 <_dtoa_r+0x6c2>
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	464b      	mov	r3, r9
 8006e70:	4630      	mov	r0, r6
 8006e72:	4639      	mov	r1, r7
 8006e74:	f7f9 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e78:	b110      	cbz	r0, 8006e80 <_dtoa_r+0x6a0>
 8006e7a:	f01a 0f01 	tst.w	sl, #1
 8006e7e:	d110      	bne.n	8006ea2 <_dtoa_r+0x6c2>
 8006e80:	4620      	mov	r0, r4
 8006e82:	ee18 1a10 	vmov	r1, s16
 8006e86:	f7fe fcbf 	bl	8005808 <_Bfree>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	9800      	ldr	r0, [sp, #0]
 8006e8e:	702b      	strb	r3, [r5, #0]
 8006e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e92:	3001      	adds	r0, #1
 8006e94:	6018      	str	r0, [r3, #0]
 8006e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f43f acf1 	beq.w	8006880 <_dtoa_r+0xa0>
 8006e9e:	601d      	str	r5, [r3, #0]
 8006ea0:	e4ee      	b.n	8006880 <_dtoa_r+0xa0>
 8006ea2:	9f00      	ldr	r7, [sp, #0]
 8006ea4:	462b      	mov	r3, r5
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eac:	2a39      	cmp	r2, #57	; 0x39
 8006eae:	d106      	bne.n	8006ebe <_dtoa_r+0x6de>
 8006eb0:	9a01      	ldr	r2, [sp, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d1f7      	bne.n	8006ea6 <_dtoa_r+0x6c6>
 8006eb6:	9901      	ldr	r1, [sp, #4]
 8006eb8:	2230      	movs	r2, #48	; 0x30
 8006eba:	3701      	adds	r7, #1
 8006ebc:	700a      	strb	r2, [r1, #0]
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	3201      	adds	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e790      	b.n	8006de8 <_dtoa_r+0x608>
 8006ec6:	4ba6      	ldr	r3, [pc, #664]	; (8007160 <_dtoa_r+0x980>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fba5 	bl	8000618 <__aeabi_dmul>
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460f      	mov	r7, r1
 8006ed6:	f7f9 fe07 	bl	8000ae8 <__aeabi_dcmpeq>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d09d      	beq.n	8006e1a <_dtoa_r+0x63a>
 8006ede:	e7cf      	b.n	8006e80 <_dtoa_r+0x6a0>
 8006ee0:	9a08      	ldr	r2, [sp, #32]
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	f000 80d7 	beq.w	8007096 <_dtoa_r+0x8b6>
 8006ee8:	9a06      	ldr	r2, [sp, #24]
 8006eea:	2a01      	cmp	r2, #1
 8006eec:	f300 80ba 	bgt.w	8007064 <_dtoa_r+0x884>
 8006ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	f000 80b2 	beq.w	800705c <_dtoa_r+0x87c>
 8006ef8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006efc:	9e07      	ldr	r6, [sp, #28]
 8006efe:	9d04      	ldr	r5, [sp, #16]
 8006f00:	9a04      	ldr	r2, [sp, #16]
 8006f02:	441a      	add	r2, r3
 8006f04:	9204      	str	r2, [sp, #16]
 8006f06:	9a05      	ldr	r2, [sp, #20]
 8006f08:	2101      	movs	r1, #1
 8006f0a:	441a      	add	r2, r3
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	9205      	str	r2, [sp, #20]
 8006f10:	f7fe fd32 	bl	8005978 <__i2b>
 8006f14:	4607      	mov	r7, r0
 8006f16:	2d00      	cmp	r5, #0
 8006f18:	dd0c      	ble.n	8006f34 <_dtoa_r+0x754>
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dd09      	ble.n	8006f34 <_dtoa_r+0x754>
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	9a04      	ldr	r2, [sp, #16]
 8006f24:	bfa8      	it	ge
 8006f26:	462b      	movge	r3, r5
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	9204      	str	r2, [sp, #16]
 8006f2c:	9a05      	ldr	r2, [sp, #20]
 8006f2e:	1aed      	subs	r5, r5, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	9305      	str	r3, [sp, #20]
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	b31b      	cbz	r3, 8006f80 <_dtoa_r+0x7a0>
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80af 	beq.w	800709e <_dtoa_r+0x8be>
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	dd13      	ble.n	8006f6c <_dtoa_r+0x78c>
 8006f44:	4639      	mov	r1, r7
 8006f46:	4632      	mov	r2, r6
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7fe fdd5 	bl	8005af8 <__pow5mult>
 8006f4e:	ee18 2a10 	vmov	r2, s16
 8006f52:	4601      	mov	r1, r0
 8006f54:	4607      	mov	r7, r0
 8006f56:	4620      	mov	r0, r4
 8006f58:	f7fe fd24 	bl	80059a4 <__multiply>
 8006f5c:	ee18 1a10 	vmov	r1, s16
 8006f60:	4680      	mov	r8, r0
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7fe fc50 	bl	8005808 <_Bfree>
 8006f68:	ee08 8a10 	vmov	s16, r8
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	1b9a      	subs	r2, r3, r6
 8006f70:	d006      	beq.n	8006f80 <_dtoa_r+0x7a0>
 8006f72:	ee18 1a10 	vmov	r1, s16
 8006f76:	4620      	mov	r0, r4
 8006f78:	f7fe fdbe 	bl	8005af8 <__pow5mult>
 8006f7c:	ee08 0a10 	vmov	s16, r0
 8006f80:	2101      	movs	r1, #1
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7fe fcf8 	bl	8005978 <__i2b>
 8006f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	f340 8088 	ble.w	80070a2 <_dtoa_r+0x8c2>
 8006f92:	461a      	mov	r2, r3
 8006f94:	4601      	mov	r1, r0
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7fe fdae 	bl	8005af8 <__pow5mult>
 8006f9c:	9b06      	ldr	r3, [sp, #24]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	f340 8081 	ble.w	80070a8 <_dtoa_r+0x8c8>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	6933      	ldr	r3, [r6, #16]
 8006fac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fb0:	6918      	ldr	r0, [r3, #16]
 8006fb2:	f7fe fc91 	bl	80058d8 <__hi0bits>
 8006fb6:	f1c0 0020 	rsb	r0, r0, #32
 8006fba:	9b05      	ldr	r3, [sp, #20]
 8006fbc:	4418      	add	r0, r3
 8006fbe:	f010 001f 	ands.w	r0, r0, #31
 8006fc2:	f000 8092 	beq.w	80070ea <_dtoa_r+0x90a>
 8006fc6:	f1c0 0320 	rsb	r3, r0, #32
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	f340 808a 	ble.w	80070e4 <_dtoa_r+0x904>
 8006fd0:	f1c0 001c 	rsb	r0, r0, #28
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	4403      	add	r3, r0
 8006fd8:	9304      	str	r3, [sp, #16]
 8006fda:	9b05      	ldr	r3, [sp, #20]
 8006fdc:	4403      	add	r3, r0
 8006fde:	4405      	add	r5, r0
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	9b04      	ldr	r3, [sp, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	dd07      	ble.n	8006ff8 <_dtoa_r+0x818>
 8006fe8:	ee18 1a10 	vmov	r1, s16
 8006fec:	461a      	mov	r2, r3
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7fe fddc 	bl	8005bac <__lshift>
 8006ff4:	ee08 0a10 	vmov	s16, r0
 8006ff8:	9b05      	ldr	r3, [sp, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dd05      	ble.n	800700a <_dtoa_r+0x82a>
 8006ffe:	4631      	mov	r1, r6
 8007000:	461a      	mov	r2, r3
 8007002:	4620      	mov	r0, r4
 8007004:	f7fe fdd2 	bl	8005bac <__lshift>
 8007008:	4606      	mov	r6, r0
 800700a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d06e      	beq.n	80070ee <_dtoa_r+0x90e>
 8007010:	ee18 0a10 	vmov	r0, s16
 8007014:	4631      	mov	r1, r6
 8007016:	f7fe fe39 	bl	8005c8c <__mcmp>
 800701a:	2800      	cmp	r0, #0
 800701c:	da67      	bge.n	80070ee <_dtoa_r+0x90e>
 800701e:	9b00      	ldr	r3, [sp, #0]
 8007020:	3b01      	subs	r3, #1
 8007022:	ee18 1a10 	vmov	r1, s16
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	220a      	movs	r2, #10
 800702a:	2300      	movs	r3, #0
 800702c:	4620      	mov	r0, r4
 800702e:	f7fe fc0d 	bl	800584c <__multadd>
 8007032:	9b08      	ldr	r3, [sp, #32]
 8007034:	ee08 0a10 	vmov	s16, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 81b1 	beq.w	80073a0 <_dtoa_r+0xbc0>
 800703e:	2300      	movs	r3, #0
 8007040:	4639      	mov	r1, r7
 8007042:	220a      	movs	r2, #10
 8007044:	4620      	mov	r0, r4
 8007046:	f7fe fc01 	bl	800584c <__multadd>
 800704a:	9b02      	ldr	r3, [sp, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	4607      	mov	r7, r0
 8007050:	f300 808e 	bgt.w	8007170 <_dtoa_r+0x990>
 8007054:	9b06      	ldr	r3, [sp, #24]
 8007056:	2b02      	cmp	r3, #2
 8007058:	dc51      	bgt.n	80070fe <_dtoa_r+0x91e>
 800705a:	e089      	b.n	8007170 <_dtoa_r+0x990>
 800705c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800705e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007062:	e74b      	b.n	8006efc <_dtoa_r+0x71c>
 8007064:	9b03      	ldr	r3, [sp, #12]
 8007066:	1e5e      	subs	r6, r3, #1
 8007068:	9b07      	ldr	r3, [sp, #28]
 800706a:	42b3      	cmp	r3, r6
 800706c:	bfbf      	itttt	lt
 800706e:	9b07      	ldrlt	r3, [sp, #28]
 8007070:	9607      	strlt	r6, [sp, #28]
 8007072:	1af2      	sublt	r2, r6, r3
 8007074:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007076:	bfb6      	itet	lt
 8007078:	189b      	addlt	r3, r3, r2
 800707a:	1b9e      	subge	r6, r3, r6
 800707c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	bfb8      	it	lt
 8007082:	2600      	movlt	r6, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	bfb7      	itett	lt
 8007088:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800708c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007090:	1a9d      	sublt	r5, r3, r2
 8007092:	2300      	movlt	r3, #0
 8007094:	e734      	b.n	8006f00 <_dtoa_r+0x720>
 8007096:	9e07      	ldr	r6, [sp, #28]
 8007098:	9d04      	ldr	r5, [sp, #16]
 800709a:	9f08      	ldr	r7, [sp, #32]
 800709c:	e73b      	b.n	8006f16 <_dtoa_r+0x736>
 800709e:	9a07      	ldr	r2, [sp, #28]
 80070a0:	e767      	b.n	8006f72 <_dtoa_r+0x792>
 80070a2:	9b06      	ldr	r3, [sp, #24]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	dc18      	bgt.n	80070da <_dtoa_r+0x8fa>
 80070a8:	f1ba 0f00 	cmp.w	sl, #0
 80070ac:	d115      	bne.n	80070da <_dtoa_r+0x8fa>
 80070ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b2:	b993      	cbnz	r3, 80070da <_dtoa_r+0x8fa>
 80070b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070b8:	0d1b      	lsrs	r3, r3, #20
 80070ba:	051b      	lsls	r3, r3, #20
 80070bc:	b183      	cbz	r3, 80070e0 <_dtoa_r+0x900>
 80070be:	9b04      	ldr	r3, [sp, #16]
 80070c0:	3301      	adds	r3, #1
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	9b05      	ldr	r3, [sp, #20]
 80070c6:	3301      	adds	r3, #1
 80070c8:	9305      	str	r3, [sp, #20]
 80070ca:	f04f 0801 	mov.w	r8, #1
 80070ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f47f af6a 	bne.w	8006faa <_dtoa_r+0x7ca>
 80070d6:	2001      	movs	r0, #1
 80070d8:	e76f      	b.n	8006fba <_dtoa_r+0x7da>
 80070da:	f04f 0800 	mov.w	r8, #0
 80070de:	e7f6      	b.n	80070ce <_dtoa_r+0x8ee>
 80070e0:	4698      	mov	r8, r3
 80070e2:	e7f4      	b.n	80070ce <_dtoa_r+0x8ee>
 80070e4:	f43f af7d 	beq.w	8006fe2 <_dtoa_r+0x802>
 80070e8:	4618      	mov	r0, r3
 80070ea:	301c      	adds	r0, #28
 80070ec:	e772      	b.n	8006fd4 <_dtoa_r+0x7f4>
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	dc37      	bgt.n	8007164 <_dtoa_r+0x984>
 80070f4:	9b06      	ldr	r3, [sp, #24]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	dd34      	ble.n	8007164 <_dtoa_r+0x984>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	9b02      	ldr	r3, [sp, #8]
 8007100:	b96b      	cbnz	r3, 800711e <_dtoa_r+0x93e>
 8007102:	4631      	mov	r1, r6
 8007104:	2205      	movs	r2, #5
 8007106:	4620      	mov	r0, r4
 8007108:	f7fe fba0 	bl	800584c <__multadd>
 800710c:	4601      	mov	r1, r0
 800710e:	4606      	mov	r6, r0
 8007110:	ee18 0a10 	vmov	r0, s16
 8007114:	f7fe fdba 	bl	8005c8c <__mcmp>
 8007118:	2800      	cmp	r0, #0
 800711a:	f73f adbb 	bgt.w	8006c94 <_dtoa_r+0x4b4>
 800711e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007120:	9d01      	ldr	r5, [sp, #4]
 8007122:	43db      	mvns	r3, r3
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	4631      	mov	r1, r6
 800712c:	4620      	mov	r0, r4
 800712e:	f7fe fb6b 	bl	8005808 <_Bfree>
 8007132:	2f00      	cmp	r7, #0
 8007134:	f43f aea4 	beq.w	8006e80 <_dtoa_r+0x6a0>
 8007138:	f1b8 0f00 	cmp.w	r8, #0
 800713c:	d005      	beq.n	800714a <_dtoa_r+0x96a>
 800713e:	45b8      	cmp	r8, r7
 8007140:	d003      	beq.n	800714a <_dtoa_r+0x96a>
 8007142:	4641      	mov	r1, r8
 8007144:	4620      	mov	r0, r4
 8007146:	f7fe fb5f 	bl	8005808 <_Bfree>
 800714a:	4639      	mov	r1, r7
 800714c:	4620      	mov	r0, r4
 800714e:	f7fe fb5b 	bl	8005808 <_Bfree>
 8007152:	e695      	b.n	8006e80 <_dtoa_r+0x6a0>
 8007154:	2600      	movs	r6, #0
 8007156:	4637      	mov	r7, r6
 8007158:	e7e1      	b.n	800711e <_dtoa_r+0x93e>
 800715a:	9700      	str	r7, [sp, #0]
 800715c:	4637      	mov	r7, r6
 800715e:	e599      	b.n	8006c94 <_dtoa_r+0x4b4>
 8007160:	40240000 	.word	0x40240000
 8007164:	9b08      	ldr	r3, [sp, #32]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80ca 	beq.w	8007300 <_dtoa_r+0xb20>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	9302      	str	r3, [sp, #8]
 8007170:	2d00      	cmp	r5, #0
 8007172:	dd05      	ble.n	8007180 <_dtoa_r+0x9a0>
 8007174:	4639      	mov	r1, r7
 8007176:	462a      	mov	r2, r5
 8007178:	4620      	mov	r0, r4
 800717a:	f7fe fd17 	bl	8005bac <__lshift>
 800717e:	4607      	mov	r7, r0
 8007180:	f1b8 0f00 	cmp.w	r8, #0
 8007184:	d05b      	beq.n	800723e <_dtoa_r+0xa5e>
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4620      	mov	r0, r4
 800718a:	f7fe fafd 	bl	8005788 <_Balloc>
 800718e:	4605      	mov	r5, r0
 8007190:	b928      	cbnz	r0, 800719e <_dtoa_r+0x9be>
 8007192:	4b87      	ldr	r3, [pc, #540]	; (80073b0 <_dtoa_r+0xbd0>)
 8007194:	4602      	mov	r2, r0
 8007196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800719a:	f7ff bb3b 	b.w	8006814 <_dtoa_r+0x34>
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	3202      	adds	r2, #2
 80071a2:	0092      	lsls	r2, r2, #2
 80071a4:	f107 010c 	add.w	r1, r7, #12
 80071a8:	300c      	adds	r0, #12
 80071aa:	f000 f921 	bl	80073f0 <memcpy>
 80071ae:	2201      	movs	r2, #1
 80071b0:	4629      	mov	r1, r5
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7fe fcfa 	bl	8005bac <__lshift>
 80071b8:	9b01      	ldr	r3, [sp, #4]
 80071ba:	f103 0901 	add.w	r9, r3, #1
 80071be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80071c2:	4413      	add	r3, r2
 80071c4:	9305      	str	r3, [sp, #20]
 80071c6:	f00a 0301 	and.w	r3, sl, #1
 80071ca:	46b8      	mov	r8, r7
 80071cc:	9304      	str	r3, [sp, #16]
 80071ce:	4607      	mov	r7, r0
 80071d0:	4631      	mov	r1, r6
 80071d2:	ee18 0a10 	vmov	r0, s16
 80071d6:	f7ff fa77 	bl	80066c8 <quorem>
 80071da:	4641      	mov	r1, r8
 80071dc:	9002      	str	r0, [sp, #8]
 80071de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071e2:	ee18 0a10 	vmov	r0, s16
 80071e6:	f7fe fd51 	bl	8005c8c <__mcmp>
 80071ea:	463a      	mov	r2, r7
 80071ec:	9003      	str	r0, [sp, #12]
 80071ee:	4631      	mov	r1, r6
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7fe fd67 	bl	8005cc4 <__mdiff>
 80071f6:	68c2      	ldr	r2, [r0, #12]
 80071f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80071fc:	4605      	mov	r5, r0
 80071fe:	bb02      	cbnz	r2, 8007242 <_dtoa_r+0xa62>
 8007200:	4601      	mov	r1, r0
 8007202:	ee18 0a10 	vmov	r0, s16
 8007206:	f7fe fd41 	bl	8005c8c <__mcmp>
 800720a:	4602      	mov	r2, r0
 800720c:	4629      	mov	r1, r5
 800720e:	4620      	mov	r0, r4
 8007210:	9207      	str	r2, [sp, #28]
 8007212:	f7fe faf9 	bl	8005808 <_Bfree>
 8007216:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800721a:	ea43 0102 	orr.w	r1, r3, r2
 800721e:	9b04      	ldr	r3, [sp, #16]
 8007220:	430b      	orrs	r3, r1
 8007222:	464d      	mov	r5, r9
 8007224:	d10f      	bne.n	8007246 <_dtoa_r+0xa66>
 8007226:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800722a:	d02a      	beq.n	8007282 <_dtoa_r+0xaa2>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd02      	ble.n	8007238 <_dtoa_r+0xa58>
 8007232:	9b02      	ldr	r3, [sp, #8]
 8007234:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007238:	f88b a000 	strb.w	sl, [fp]
 800723c:	e775      	b.n	800712a <_dtoa_r+0x94a>
 800723e:	4638      	mov	r0, r7
 8007240:	e7ba      	b.n	80071b8 <_dtoa_r+0x9d8>
 8007242:	2201      	movs	r2, #1
 8007244:	e7e2      	b.n	800720c <_dtoa_r+0xa2c>
 8007246:	9b03      	ldr	r3, [sp, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	db04      	blt.n	8007256 <_dtoa_r+0xa76>
 800724c:	9906      	ldr	r1, [sp, #24]
 800724e:	430b      	orrs	r3, r1
 8007250:	9904      	ldr	r1, [sp, #16]
 8007252:	430b      	orrs	r3, r1
 8007254:	d122      	bne.n	800729c <_dtoa_r+0xabc>
 8007256:	2a00      	cmp	r2, #0
 8007258:	ddee      	ble.n	8007238 <_dtoa_r+0xa58>
 800725a:	ee18 1a10 	vmov	r1, s16
 800725e:	2201      	movs	r2, #1
 8007260:	4620      	mov	r0, r4
 8007262:	f7fe fca3 	bl	8005bac <__lshift>
 8007266:	4631      	mov	r1, r6
 8007268:	ee08 0a10 	vmov	s16, r0
 800726c:	f7fe fd0e 	bl	8005c8c <__mcmp>
 8007270:	2800      	cmp	r0, #0
 8007272:	dc03      	bgt.n	800727c <_dtoa_r+0xa9c>
 8007274:	d1e0      	bne.n	8007238 <_dtoa_r+0xa58>
 8007276:	f01a 0f01 	tst.w	sl, #1
 800727a:	d0dd      	beq.n	8007238 <_dtoa_r+0xa58>
 800727c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007280:	d1d7      	bne.n	8007232 <_dtoa_r+0xa52>
 8007282:	2339      	movs	r3, #57	; 0x39
 8007284:	f88b 3000 	strb.w	r3, [fp]
 8007288:	462b      	mov	r3, r5
 800728a:	461d      	mov	r5, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007292:	2a39      	cmp	r2, #57	; 0x39
 8007294:	d071      	beq.n	800737a <_dtoa_r+0xb9a>
 8007296:	3201      	adds	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e746      	b.n	800712a <_dtoa_r+0x94a>
 800729c:	2a00      	cmp	r2, #0
 800729e:	dd07      	ble.n	80072b0 <_dtoa_r+0xad0>
 80072a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072a4:	d0ed      	beq.n	8007282 <_dtoa_r+0xaa2>
 80072a6:	f10a 0301 	add.w	r3, sl, #1
 80072aa:	f88b 3000 	strb.w	r3, [fp]
 80072ae:	e73c      	b.n	800712a <_dtoa_r+0x94a>
 80072b0:	9b05      	ldr	r3, [sp, #20]
 80072b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80072b6:	4599      	cmp	r9, r3
 80072b8:	d047      	beq.n	800734a <_dtoa_r+0xb6a>
 80072ba:	ee18 1a10 	vmov	r1, s16
 80072be:	2300      	movs	r3, #0
 80072c0:	220a      	movs	r2, #10
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7fe fac2 	bl	800584c <__multadd>
 80072c8:	45b8      	cmp	r8, r7
 80072ca:	ee08 0a10 	vmov	s16, r0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	f04f 020a 	mov.w	r2, #10
 80072d6:	4641      	mov	r1, r8
 80072d8:	4620      	mov	r0, r4
 80072da:	d106      	bne.n	80072ea <_dtoa_r+0xb0a>
 80072dc:	f7fe fab6 	bl	800584c <__multadd>
 80072e0:	4680      	mov	r8, r0
 80072e2:	4607      	mov	r7, r0
 80072e4:	f109 0901 	add.w	r9, r9, #1
 80072e8:	e772      	b.n	80071d0 <_dtoa_r+0x9f0>
 80072ea:	f7fe faaf 	bl	800584c <__multadd>
 80072ee:	4639      	mov	r1, r7
 80072f0:	4680      	mov	r8, r0
 80072f2:	2300      	movs	r3, #0
 80072f4:	220a      	movs	r2, #10
 80072f6:	4620      	mov	r0, r4
 80072f8:	f7fe faa8 	bl	800584c <__multadd>
 80072fc:	4607      	mov	r7, r0
 80072fe:	e7f1      	b.n	80072e4 <_dtoa_r+0xb04>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	9d01      	ldr	r5, [sp, #4]
 8007306:	ee18 0a10 	vmov	r0, s16
 800730a:	4631      	mov	r1, r6
 800730c:	f7ff f9dc 	bl	80066c8 <quorem>
 8007310:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	f805 ab01 	strb.w	sl, [r5], #1
 800731a:	1aea      	subs	r2, r5, r3
 800731c:	9b02      	ldr	r3, [sp, #8]
 800731e:	4293      	cmp	r3, r2
 8007320:	dd09      	ble.n	8007336 <_dtoa_r+0xb56>
 8007322:	ee18 1a10 	vmov	r1, s16
 8007326:	2300      	movs	r3, #0
 8007328:	220a      	movs	r2, #10
 800732a:	4620      	mov	r0, r4
 800732c:	f7fe fa8e 	bl	800584c <__multadd>
 8007330:	ee08 0a10 	vmov	s16, r0
 8007334:	e7e7      	b.n	8007306 <_dtoa_r+0xb26>
 8007336:	9b02      	ldr	r3, [sp, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfc8      	it	gt
 800733c:	461d      	movgt	r5, r3
 800733e:	9b01      	ldr	r3, [sp, #4]
 8007340:	bfd8      	it	le
 8007342:	2501      	movle	r5, #1
 8007344:	441d      	add	r5, r3
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	ee18 1a10 	vmov	r1, s16
 800734e:	2201      	movs	r2, #1
 8007350:	4620      	mov	r0, r4
 8007352:	f7fe fc2b 	bl	8005bac <__lshift>
 8007356:	4631      	mov	r1, r6
 8007358:	ee08 0a10 	vmov	s16, r0
 800735c:	f7fe fc96 	bl	8005c8c <__mcmp>
 8007360:	2800      	cmp	r0, #0
 8007362:	dc91      	bgt.n	8007288 <_dtoa_r+0xaa8>
 8007364:	d102      	bne.n	800736c <_dtoa_r+0xb8c>
 8007366:	f01a 0f01 	tst.w	sl, #1
 800736a:	d18d      	bne.n	8007288 <_dtoa_r+0xaa8>
 800736c:	462b      	mov	r3, r5
 800736e:	461d      	mov	r5, r3
 8007370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007374:	2a30      	cmp	r2, #48	; 0x30
 8007376:	d0fa      	beq.n	800736e <_dtoa_r+0xb8e>
 8007378:	e6d7      	b.n	800712a <_dtoa_r+0x94a>
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d184      	bne.n	800728a <_dtoa_r+0xaaa>
 8007380:	9b00      	ldr	r3, [sp, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	2331      	movs	r3, #49	; 0x31
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	e6ce      	b.n	800712a <_dtoa_r+0x94a>
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <_dtoa_r+0xbd4>)
 800738e:	f7ff ba95 	b.w	80068bc <_dtoa_r+0xdc>
 8007392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007394:	2b00      	cmp	r3, #0
 8007396:	f47f aa6e 	bne.w	8006876 <_dtoa_r+0x96>
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <_dtoa_r+0xbd8>)
 800739c:	f7ff ba8e 	b.w	80068bc <_dtoa_r+0xdc>
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	dcae      	bgt.n	8007304 <_dtoa_r+0xb24>
 80073a6:	9b06      	ldr	r3, [sp, #24]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	f73f aea8 	bgt.w	80070fe <_dtoa_r+0x91e>
 80073ae:	e7a9      	b.n	8007304 <_dtoa_r+0xb24>
 80073b0:	0800872b 	.word	0x0800872b
 80073b4:	080088b8 	.word	0x080088b8
 80073b8:	080088ab 	.word	0x080088ab

080073bc <fiprintf>:
 80073bc:	b40e      	push	{r1, r2, r3}
 80073be:	b503      	push	{r0, r1, lr}
 80073c0:	4601      	mov	r1, r0
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	4805      	ldr	r0, [pc, #20]	; (80073dc <fiprintf+0x20>)
 80073c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f000 f8c1 	bl	8007554 <_vfiprintf_r>
 80073d2:	b002      	add	sp, #8
 80073d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d8:	b003      	add	sp, #12
 80073da:	4770      	bx	lr
 80073dc:	2000009c 	.word	0x2000009c

080073e0 <malloc>:
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <malloc+0xc>)
 80073e2:	4601      	mov	r1, r0
 80073e4:	6818      	ldr	r0, [r3, #0]
 80073e6:	f7fe bda7 	b.w	8005f38 <_malloc_r>
 80073ea:	bf00      	nop
 80073ec:	2000009c 	.word	0x2000009c

080073f0 <memcpy>:
 80073f0:	440a      	add	r2, r1
 80073f2:	4291      	cmp	r1, r2
 80073f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f8:	d100      	bne.n	80073fc <memcpy+0xc>
 80073fa:	4770      	bx	lr
 80073fc:	b510      	push	{r4, lr}
 80073fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007406:	4291      	cmp	r1, r2
 8007408:	d1f9      	bne.n	80073fe <memcpy+0xe>
 800740a:	bd10      	pop	{r4, pc}

0800740c <memmove>:
 800740c:	4288      	cmp	r0, r1
 800740e:	b510      	push	{r4, lr}
 8007410:	eb01 0402 	add.w	r4, r1, r2
 8007414:	d902      	bls.n	800741c <memmove+0x10>
 8007416:	4284      	cmp	r4, r0
 8007418:	4623      	mov	r3, r4
 800741a:	d807      	bhi.n	800742c <memmove+0x20>
 800741c:	1e43      	subs	r3, r0, #1
 800741e:	42a1      	cmp	r1, r4
 8007420:	d008      	beq.n	8007434 <memmove+0x28>
 8007422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800742a:	e7f8      	b.n	800741e <memmove+0x12>
 800742c:	4402      	add	r2, r0
 800742e:	4601      	mov	r1, r0
 8007430:	428a      	cmp	r2, r1
 8007432:	d100      	bne.n	8007436 <memmove+0x2a>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800743a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743e:	e7f7      	b.n	8007430 <memmove+0x24>

08007440 <__malloc_lock>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__malloc_lock+0x8>)
 8007442:	f000 bc37 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007446:	bf00      	nop
 8007448:	2000026c 	.word	0x2000026c

0800744c <__malloc_unlock>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__malloc_unlock+0x8>)
 800744e:	f000 bc32 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007452:	bf00      	nop
 8007454:	2000026c 	.word	0x2000026c

08007458 <_free_r>:
 8007458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800745a:	2900      	cmp	r1, #0
 800745c:	d044      	beq.n	80074e8 <_free_r+0x90>
 800745e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007462:	9001      	str	r0, [sp, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f1a1 0404 	sub.w	r4, r1, #4
 800746a:	bfb8      	it	lt
 800746c:	18e4      	addlt	r4, r4, r3
 800746e:	f7ff ffe7 	bl	8007440 <__malloc_lock>
 8007472:	4a1e      	ldr	r2, [pc, #120]	; (80074ec <_free_r+0x94>)
 8007474:	9801      	ldr	r0, [sp, #4]
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	b933      	cbnz	r3, 8007488 <_free_r+0x30>
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	6014      	str	r4, [r2, #0]
 800747e:	b003      	add	sp, #12
 8007480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007484:	f7ff bfe2 	b.w	800744c <__malloc_unlock>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d908      	bls.n	800749e <_free_r+0x46>
 800748c:	6825      	ldr	r5, [r4, #0]
 800748e:	1961      	adds	r1, r4, r5
 8007490:	428b      	cmp	r3, r1
 8007492:	bf01      	itttt	eq
 8007494:	6819      	ldreq	r1, [r3, #0]
 8007496:	685b      	ldreq	r3, [r3, #4]
 8007498:	1949      	addeq	r1, r1, r5
 800749a:	6021      	streq	r1, [r4, #0]
 800749c:	e7ed      	b.n	800747a <_free_r+0x22>
 800749e:	461a      	mov	r2, r3
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b10b      	cbz	r3, 80074a8 <_free_r+0x50>
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d9fa      	bls.n	800749e <_free_r+0x46>
 80074a8:	6811      	ldr	r1, [r2, #0]
 80074aa:	1855      	adds	r5, r2, r1
 80074ac:	42a5      	cmp	r5, r4
 80074ae:	d10b      	bne.n	80074c8 <_free_r+0x70>
 80074b0:	6824      	ldr	r4, [r4, #0]
 80074b2:	4421      	add	r1, r4
 80074b4:	1854      	adds	r4, r2, r1
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	6011      	str	r1, [r2, #0]
 80074ba:	d1e0      	bne.n	800747e <_free_r+0x26>
 80074bc:	681c      	ldr	r4, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	6053      	str	r3, [r2, #4]
 80074c2:	4421      	add	r1, r4
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	e7da      	b.n	800747e <_free_r+0x26>
 80074c8:	d902      	bls.n	80074d0 <_free_r+0x78>
 80074ca:	230c      	movs	r3, #12
 80074cc:	6003      	str	r3, [r0, #0]
 80074ce:	e7d6      	b.n	800747e <_free_r+0x26>
 80074d0:	6825      	ldr	r5, [r4, #0]
 80074d2:	1961      	adds	r1, r4, r5
 80074d4:	428b      	cmp	r3, r1
 80074d6:	bf04      	itt	eq
 80074d8:	6819      	ldreq	r1, [r3, #0]
 80074da:	685b      	ldreq	r3, [r3, #4]
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	bf04      	itt	eq
 80074e0:	1949      	addeq	r1, r1, r5
 80074e2:	6021      	streq	r1, [r4, #0]
 80074e4:	6054      	str	r4, [r2, #4]
 80074e6:	e7ca      	b.n	800747e <_free_r+0x26>
 80074e8:	b003      	add	sp, #12
 80074ea:	bd30      	pop	{r4, r5, pc}
 80074ec:	20000260 	.word	0x20000260

080074f0 <_malloc_usable_size_r>:
 80074f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f4:	1f18      	subs	r0, r3, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfbc      	itt	lt
 80074fa:	580b      	ldrlt	r3, [r1, r0]
 80074fc:	18c0      	addlt	r0, r0, r3
 80074fe:	4770      	bx	lr

08007500 <__sfputc_r>:
 8007500:	6893      	ldr	r3, [r2, #8]
 8007502:	3b01      	subs	r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	b410      	push	{r4}
 8007508:	6093      	str	r3, [r2, #8]
 800750a:	da08      	bge.n	800751e <__sfputc_r+0x1e>
 800750c:	6994      	ldr	r4, [r2, #24]
 800750e:	42a3      	cmp	r3, r4
 8007510:	db01      	blt.n	8007516 <__sfputc_r+0x16>
 8007512:	290a      	cmp	r1, #10
 8007514:	d103      	bne.n	800751e <__sfputc_r+0x1e>
 8007516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800751a:	f000 b94b 	b.w	80077b4 <__swbuf_r>
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	1c58      	adds	r0, r3, #1
 8007522:	6010      	str	r0, [r2, #0]
 8007524:	7019      	strb	r1, [r3, #0]
 8007526:	4608      	mov	r0, r1
 8007528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800752c:	4770      	bx	lr

0800752e <__sfputs_r>:
 800752e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007530:	4606      	mov	r6, r0
 8007532:	460f      	mov	r7, r1
 8007534:	4614      	mov	r4, r2
 8007536:	18d5      	adds	r5, r2, r3
 8007538:	42ac      	cmp	r4, r5
 800753a:	d101      	bne.n	8007540 <__sfputs_r+0x12>
 800753c:	2000      	movs	r0, #0
 800753e:	e007      	b.n	8007550 <__sfputs_r+0x22>
 8007540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007544:	463a      	mov	r2, r7
 8007546:	4630      	mov	r0, r6
 8007548:	f7ff ffda 	bl	8007500 <__sfputc_r>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d1f3      	bne.n	8007538 <__sfputs_r+0xa>
 8007550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007554 <_vfiprintf_r>:
 8007554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007558:	460d      	mov	r5, r1
 800755a:	b09d      	sub	sp, #116	; 0x74
 800755c:	4614      	mov	r4, r2
 800755e:	4698      	mov	r8, r3
 8007560:	4606      	mov	r6, r0
 8007562:	b118      	cbz	r0, 800756c <_vfiprintf_r+0x18>
 8007564:	6983      	ldr	r3, [r0, #24]
 8007566:	b90b      	cbnz	r3, 800756c <_vfiprintf_r+0x18>
 8007568:	f000 fb06 	bl	8007b78 <__sinit>
 800756c:	4b89      	ldr	r3, [pc, #548]	; (8007794 <_vfiprintf_r+0x240>)
 800756e:	429d      	cmp	r5, r3
 8007570:	d11b      	bne.n	80075aa <_vfiprintf_r+0x56>
 8007572:	6875      	ldr	r5, [r6, #4]
 8007574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007576:	07d9      	lsls	r1, r3, #31
 8007578:	d405      	bmi.n	8007586 <_vfiprintf_r+0x32>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	059a      	lsls	r2, r3, #22
 800757e:	d402      	bmi.n	8007586 <_vfiprintf_r+0x32>
 8007580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007582:	f000 fb97 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 8007586:	89ab      	ldrh	r3, [r5, #12]
 8007588:	071b      	lsls	r3, r3, #28
 800758a:	d501      	bpl.n	8007590 <_vfiprintf_r+0x3c>
 800758c:	692b      	ldr	r3, [r5, #16]
 800758e:	b9eb      	cbnz	r3, 80075cc <_vfiprintf_r+0x78>
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f000 f960 	bl	8007858 <__swsetup_r>
 8007598:	b1c0      	cbz	r0, 80075cc <_vfiprintf_r+0x78>
 800759a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800759c:	07dc      	lsls	r4, r3, #31
 800759e:	d50e      	bpl.n	80075be <_vfiprintf_r+0x6a>
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	b01d      	add	sp, #116	; 0x74
 80075a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075aa:	4b7b      	ldr	r3, [pc, #492]	; (8007798 <_vfiprintf_r+0x244>)
 80075ac:	429d      	cmp	r5, r3
 80075ae:	d101      	bne.n	80075b4 <_vfiprintf_r+0x60>
 80075b0:	68b5      	ldr	r5, [r6, #8]
 80075b2:	e7df      	b.n	8007574 <_vfiprintf_r+0x20>
 80075b4:	4b79      	ldr	r3, [pc, #484]	; (800779c <_vfiprintf_r+0x248>)
 80075b6:	429d      	cmp	r5, r3
 80075b8:	bf08      	it	eq
 80075ba:	68f5      	ldreq	r5, [r6, #12]
 80075bc:	e7da      	b.n	8007574 <_vfiprintf_r+0x20>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	0598      	lsls	r0, r3, #22
 80075c2:	d4ed      	bmi.n	80075a0 <_vfiprintf_r+0x4c>
 80075c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075c6:	f000 fb76 	bl	8007cb6 <__retarget_lock_release_recursive>
 80075ca:	e7e9      	b.n	80075a0 <_vfiprintf_r+0x4c>
 80075cc:	2300      	movs	r3, #0
 80075ce:	9309      	str	r3, [sp, #36]	; 0x24
 80075d0:	2320      	movs	r3, #32
 80075d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075da:	2330      	movs	r3, #48	; 0x30
 80075dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077a0 <_vfiprintf_r+0x24c>
 80075e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e4:	f04f 0901 	mov.w	r9, #1
 80075e8:	4623      	mov	r3, r4
 80075ea:	469a      	mov	sl, r3
 80075ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f0:	b10a      	cbz	r2, 80075f6 <_vfiprintf_r+0xa2>
 80075f2:	2a25      	cmp	r2, #37	; 0x25
 80075f4:	d1f9      	bne.n	80075ea <_vfiprintf_r+0x96>
 80075f6:	ebba 0b04 	subs.w	fp, sl, r4
 80075fa:	d00b      	beq.n	8007614 <_vfiprintf_r+0xc0>
 80075fc:	465b      	mov	r3, fp
 80075fe:	4622      	mov	r2, r4
 8007600:	4629      	mov	r1, r5
 8007602:	4630      	mov	r0, r6
 8007604:	f7ff ff93 	bl	800752e <__sfputs_r>
 8007608:	3001      	adds	r0, #1
 800760a:	f000 80aa 	beq.w	8007762 <_vfiprintf_r+0x20e>
 800760e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007610:	445a      	add	r2, fp
 8007612:	9209      	str	r2, [sp, #36]	; 0x24
 8007614:	f89a 3000 	ldrb.w	r3, [sl]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80a2 	beq.w	8007762 <_vfiprintf_r+0x20e>
 800761e:	2300      	movs	r3, #0
 8007620:	f04f 32ff 	mov.w	r2, #4294967295
 8007624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007628:	f10a 0a01 	add.w	sl, sl, #1
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	9307      	str	r3, [sp, #28]
 8007630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007634:	931a      	str	r3, [sp, #104]	; 0x68
 8007636:	4654      	mov	r4, sl
 8007638:	2205      	movs	r2, #5
 800763a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763e:	4858      	ldr	r0, [pc, #352]	; (80077a0 <_vfiprintf_r+0x24c>)
 8007640:	f7f8 fdde 	bl	8000200 <memchr>
 8007644:	9a04      	ldr	r2, [sp, #16]
 8007646:	b9d8      	cbnz	r0, 8007680 <_vfiprintf_r+0x12c>
 8007648:	06d1      	lsls	r1, r2, #27
 800764a:	bf44      	itt	mi
 800764c:	2320      	movmi	r3, #32
 800764e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007652:	0713      	lsls	r3, r2, #28
 8007654:	bf44      	itt	mi
 8007656:	232b      	movmi	r3, #43	; 0x2b
 8007658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765c:	f89a 3000 	ldrb.w	r3, [sl]
 8007660:	2b2a      	cmp	r3, #42	; 0x2a
 8007662:	d015      	beq.n	8007690 <_vfiprintf_r+0x13c>
 8007664:	9a07      	ldr	r2, [sp, #28]
 8007666:	4654      	mov	r4, sl
 8007668:	2000      	movs	r0, #0
 800766a:	f04f 0c0a 	mov.w	ip, #10
 800766e:	4621      	mov	r1, r4
 8007670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007674:	3b30      	subs	r3, #48	; 0x30
 8007676:	2b09      	cmp	r3, #9
 8007678:	d94e      	bls.n	8007718 <_vfiprintf_r+0x1c4>
 800767a:	b1b0      	cbz	r0, 80076aa <_vfiprintf_r+0x156>
 800767c:	9207      	str	r2, [sp, #28]
 800767e:	e014      	b.n	80076aa <_vfiprintf_r+0x156>
 8007680:	eba0 0308 	sub.w	r3, r0, r8
 8007684:	fa09 f303 	lsl.w	r3, r9, r3
 8007688:	4313      	orrs	r3, r2
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	46a2      	mov	sl, r4
 800768e:	e7d2      	b.n	8007636 <_vfiprintf_r+0xe2>
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	1d19      	adds	r1, r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	9103      	str	r1, [sp, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bfbb      	ittet	lt
 800769c:	425b      	neglt	r3, r3
 800769e:	f042 0202 	orrlt.w	r2, r2, #2
 80076a2:	9307      	strge	r3, [sp, #28]
 80076a4:	9307      	strlt	r3, [sp, #28]
 80076a6:	bfb8      	it	lt
 80076a8:	9204      	strlt	r2, [sp, #16]
 80076aa:	7823      	ldrb	r3, [r4, #0]
 80076ac:	2b2e      	cmp	r3, #46	; 0x2e
 80076ae:	d10c      	bne.n	80076ca <_vfiprintf_r+0x176>
 80076b0:	7863      	ldrb	r3, [r4, #1]
 80076b2:	2b2a      	cmp	r3, #42	; 0x2a
 80076b4:	d135      	bne.n	8007722 <_vfiprintf_r+0x1ce>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	1d1a      	adds	r2, r3, #4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	9203      	str	r2, [sp, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bfb8      	it	lt
 80076c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c6:	3402      	adds	r4, #2
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077b0 <_vfiprintf_r+0x25c>
 80076ce:	7821      	ldrb	r1, [r4, #0]
 80076d0:	2203      	movs	r2, #3
 80076d2:	4650      	mov	r0, sl
 80076d4:	f7f8 fd94 	bl	8000200 <memchr>
 80076d8:	b140      	cbz	r0, 80076ec <_vfiprintf_r+0x198>
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	eba0 000a 	sub.w	r0, r0, sl
 80076e0:	fa03 f000 	lsl.w	r0, r3, r0
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	4303      	orrs	r3, r0
 80076e8:	3401      	adds	r4, #1
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f0:	482c      	ldr	r0, [pc, #176]	; (80077a4 <_vfiprintf_r+0x250>)
 80076f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f6:	2206      	movs	r2, #6
 80076f8:	f7f8 fd82 	bl	8000200 <memchr>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d03f      	beq.n	8007780 <_vfiprintf_r+0x22c>
 8007700:	4b29      	ldr	r3, [pc, #164]	; (80077a8 <_vfiprintf_r+0x254>)
 8007702:	bb1b      	cbnz	r3, 800774c <_vfiprintf_r+0x1f8>
 8007704:	9b03      	ldr	r3, [sp, #12]
 8007706:	3307      	adds	r3, #7
 8007708:	f023 0307 	bic.w	r3, r3, #7
 800770c:	3308      	adds	r3, #8
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	443b      	add	r3, r7
 8007714:	9309      	str	r3, [sp, #36]	; 0x24
 8007716:	e767      	b.n	80075e8 <_vfiprintf_r+0x94>
 8007718:	fb0c 3202 	mla	r2, ip, r2, r3
 800771c:	460c      	mov	r4, r1
 800771e:	2001      	movs	r0, #1
 8007720:	e7a5      	b.n	800766e <_vfiprintf_r+0x11a>
 8007722:	2300      	movs	r3, #0
 8007724:	3401      	adds	r4, #1
 8007726:	9305      	str	r3, [sp, #20]
 8007728:	4619      	mov	r1, r3
 800772a:	f04f 0c0a 	mov.w	ip, #10
 800772e:	4620      	mov	r0, r4
 8007730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007734:	3a30      	subs	r2, #48	; 0x30
 8007736:	2a09      	cmp	r2, #9
 8007738:	d903      	bls.n	8007742 <_vfiprintf_r+0x1ee>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0c5      	beq.n	80076ca <_vfiprintf_r+0x176>
 800773e:	9105      	str	r1, [sp, #20]
 8007740:	e7c3      	b.n	80076ca <_vfiprintf_r+0x176>
 8007742:	fb0c 2101 	mla	r1, ip, r1, r2
 8007746:	4604      	mov	r4, r0
 8007748:	2301      	movs	r3, #1
 800774a:	e7f0      	b.n	800772e <_vfiprintf_r+0x1da>
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	462a      	mov	r2, r5
 8007752:	4b16      	ldr	r3, [pc, #88]	; (80077ac <_vfiprintf_r+0x258>)
 8007754:	a904      	add	r1, sp, #16
 8007756:	4630      	mov	r0, r6
 8007758:	f3af 8000 	nop.w
 800775c:	4607      	mov	r7, r0
 800775e:	1c78      	adds	r0, r7, #1
 8007760:	d1d6      	bne.n	8007710 <_vfiprintf_r+0x1bc>
 8007762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007764:	07d9      	lsls	r1, r3, #31
 8007766:	d405      	bmi.n	8007774 <_vfiprintf_r+0x220>
 8007768:	89ab      	ldrh	r3, [r5, #12]
 800776a:	059a      	lsls	r2, r3, #22
 800776c:	d402      	bmi.n	8007774 <_vfiprintf_r+0x220>
 800776e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007770:	f000 faa1 	bl	8007cb6 <__retarget_lock_release_recursive>
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	065b      	lsls	r3, r3, #25
 8007778:	f53f af12 	bmi.w	80075a0 <_vfiprintf_r+0x4c>
 800777c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777e:	e711      	b.n	80075a4 <_vfiprintf_r+0x50>
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	462a      	mov	r2, r5
 8007786:	4b09      	ldr	r3, [pc, #36]	; (80077ac <_vfiprintf_r+0x258>)
 8007788:	a904      	add	r1, sp, #16
 800778a:	4630      	mov	r0, r6
 800778c:	f7fe fe40 	bl	8006410 <_printf_i>
 8007790:	e7e4      	b.n	800775c <_vfiprintf_r+0x208>
 8007792:	bf00      	nop
 8007794:	08008938 	.word	0x08008938
 8007798:	08008958 	.word	0x08008958
 800779c:	08008918 	.word	0x08008918
 80077a0:	0800883c 	.word	0x0800883c
 80077a4:	08008846 	.word	0x08008846
 80077a8:	00000000 	.word	0x00000000
 80077ac:	0800752f 	.word	0x0800752f
 80077b0:	08008842 	.word	0x08008842

080077b4 <__swbuf_r>:
 80077b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	4605      	mov	r5, r0
 80077bc:	b118      	cbz	r0, 80077c6 <__swbuf_r+0x12>
 80077be:	6983      	ldr	r3, [r0, #24]
 80077c0:	b90b      	cbnz	r3, 80077c6 <__swbuf_r+0x12>
 80077c2:	f000 f9d9 	bl	8007b78 <__sinit>
 80077c6:	4b21      	ldr	r3, [pc, #132]	; (800784c <__swbuf_r+0x98>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d12b      	bne.n	8007824 <__swbuf_r+0x70>
 80077cc:	686c      	ldr	r4, [r5, #4]
 80077ce:	69a3      	ldr	r3, [r4, #24]
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	071a      	lsls	r2, r3, #28
 80077d6:	d52f      	bpl.n	8007838 <__swbuf_r+0x84>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	b36b      	cbz	r3, 8007838 <__swbuf_r+0x84>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	1ac0      	subs	r0, r0, r3
 80077e2:	6963      	ldr	r3, [r4, #20]
 80077e4:	b2f6      	uxtb	r6, r6
 80077e6:	4283      	cmp	r3, r0
 80077e8:	4637      	mov	r7, r6
 80077ea:	dc04      	bgt.n	80077f6 <__swbuf_r+0x42>
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f92e 	bl	8007a50 <_fflush_r>
 80077f4:	bb30      	cbnz	r0, 8007844 <__swbuf_r+0x90>
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	6022      	str	r2, [r4, #0]
 8007802:	701e      	strb	r6, [r3, #0]
 8007804:	6963      	ldr	r3, [r4, #20]
 8007806:	3001      	adds	r0, #1
 8007808:	4283      	cmp	r3, r0
 800780a:	d004      	beq.n	8007816 <__swbuf_r+0x62>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	07db      	lsls	r3, r3, #31
 8007810:	d506      	bpl.n	8007820 <__swbuf_r+0x6c>
 8007812:	2e0a      	cmp	r6, #10
 8007814:	d104      	bne.n	8007820 <__swbuf_r+0x6c>
 8007816:	4621      	mov	r1, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f000 f919 	bl	8007a50 <_fflush_r>
 800781e:	b988      	cbnz	r0, 8007844 <__swbuf_r+0x90>
 8007820:	4638      	mov	r0, r7
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <__swbuf_r+0x9c>)
 8007826:	429c      	cmp	r4, r3
 8007828:	d101      	bne.n	800782e <__swbuf_r+0x7a>
 800782a:	68ac      	ldr	r4, [r5, #8]
 800782c:	e7cf      	b.n	80077ce <__swbuf_r+0x1a>
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <__swbuf_r+0xa0>)
 8007830:	429c      	cmp	r4, r3
 8007832:	bf08      	it	eq
 8007834:	68ec      	ldreq	r4, [r5, #12]
 8007836:	e7ca      	b.n	80077ce <__swbuf_r+0x1a>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f80c 	bl	8007858 <__swsetup_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	d0cb      	beq.n	80077dc <__swbuf_r+0x28>
 8007844:	f04f 37ff 	mov.w	r7, #4294967295
 8007848:	e7ea      	b.n	8007820 <__swbuf_r+0x6c>
 800784a:	bf00      	nop
 800784c:	08008938 	.word	0x08008938
 8007850:	08008958 	.word	0x08008958
 8007854:	08008918 	.word	0x08008918

08007858 <__swsetup_r>:
 8007858:	4b32      	ldr	r3, [pc, #200]	; (8007924 <__swsetup_r+0xcc>)
 800785a:	b570      	push	{r4, r5, r6, lr}
 800785c:	681d      	ldr	r5, [r3, #0]
 800785e:	4606      	mov	r6, r0
 8007860:	460c      	mov	r4, r1
 8007862:	b125      	cbz	r5, 800786e <__swsetup_r+0x16>
 8007864:	69ab      	ldr	r3, [r5, #24]
 8007866:	b913      	cbnz	r3, 800786e <__swsetup_r+0x16>
 8007868:	4628      	mov	r0, r5
 800786a:	f000 f985 	bl	8007b78 <__sinit>
 800786e:	4b2e      	ldr	r3, [pc, #184]	; (8007928 <__swsetup_r+0xd0>)
 8007870:	429c      	cmp	r4, r3
 8007872:	d10f      	bne.n	8007894 <__swsetup_r+0x3c>
 8007874:	686c      	ldr	r4, [r5, #4]
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800787c:	0719      	lsls	r1, r3, #28
 800787e:	d42c      	bmi.n	80078da <__swsetup_r+0x82>
 8007880:	06dd      	lsls	r5, r3, #27
 8007882:	d411      	bmi.n	80078a8 <__swsetup_r+0x50>
 8007884:	2309      	movs	r3, #9
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	e03e      	b.n	8007912 <__swsetup_r+0xba>
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <__swsetup_r+0xd4>)
 8007896:	429c      	cmp	r4, r3
 8007898:	d101      	bne.n	800789e <__swsetup_r+0x46>
 800789a:	68ac      	ldr	r4, [r5, #8]
 800789c:	e7eb      	b.n	8007876 <__swsetup_r+0x1e>
 800789e:	4b24      	ldr	r3, [pc, #144]	; (8007930 <__swsetup_r+0xd8>)
 80078a0:	429c      	cmp	r4, r3
 80078a2:	bf08      	it	eq
 80078a4:	68ec      	ldreq	r4, [r5, #12]
 80078a6:	e7e6      	b.n	8007876 <__swsetup_r+0x1e>
 80078a8:	0758      	lsls	r0, r3, #29
 80078aa:	d512      	bpl.n	80078d2 <__swsetup_r+0x7a>
 80078ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ae:	b141      	cbz	r1, 80078c2 <__swsetup_r+0x6a>
 80078b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b4:	4299      	cmp	r1, r3
 80078b6:	d002      	beq.n	80078be <__swsetup_r+0x66>
 80078b8:	4630      	mov	r0, r6
 80078ba:	f7ff fdcd 	bl	8007458 <_free_r>
 80078be:	2300      	movs	r3, #0
 80078c0:	6363      	str	r3, [r4, #52]	; 0x34
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	2300      	movs	r3, #0
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f043 0308 	orr.w	r3, r3, #8
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	b94b      	cbnz	r3, 80078f2 <__swsetup_r+0x9a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e8:	d003      	beq.n	80078f2 <__swsetup_r+0x9a>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4630      	mov	r0, r6
 80078ee:	f000 fa09 	bl	8007d04 <__smakebuf_r>
 80078f2:	89a0      	ldrh	r0, [r4, #12]
 80078f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f8:	f010 0301 	ands.w	r3, r0, #1
 80078fc:	d00a      	beq.n	8007914 <__swsetup_r+0xbc>
 80078fe:	2300      	movs	r3, #0
 8007900:	60a3      	str	r3, [r4, #8]
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	425b      	negs	r3, r3
 8007906:	61a3      	str	r3, [r4, #24]
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	b943      	cbnz	r3, 800791e <__swsetup_r+0xc6>
 800790c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007910:	d1ba      	bne.n	8007888 <__swsetup_r+0x30>
 8007912:	bd70      	pop	{r4, r5, r6, pc}
 8007914:	0781      	lsls	r1, r0, #30
 8007916:	bf58      	it	pl
 8007918:	6963      	ldrpl	r3, [r4, #20]
 800791a:	60a3      	str	r3, [r4, #8]
 800791c:	e7f4      	b.n	8007908 <__swsetup_r+0xb0>
 800791e:	2000      	movs	r0, #0
 8007920:	e7f7      	b.n	8007912 <__swsetup_r+0xba>
 8007922:	bf00      	nop
 8007924:	2000009c 	.word	0x2000009c
 8007928:	08008938 	.word	0x08008938
 800792c:	08008958 	.word	0x08008958
 8007930:	08008918 	.word	0x08008918

08007934 <abort>:
 8007934:	b508      	push	{r3, lr}
 8007936:	2006      	movs	r0, #6
 8007938:	f000 fa4c 	bl	8007dd4 <raise>
 800793c:	2001      	movs	r0, #1
 800793e:	f7fa faaf 	bl	8001ea0 <_exit>
	...

08007944 <__sflush_r>:
 8007944:	898a      	ldrh	r2, [r1, #12]
 8007946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	4605      	mov	r5, r0
 800794c:	0710      	lsls	r0, r2, #28
 800794e:	460c      	mov	r4, r1
 8007950:	d458      	bmi.n	8007a04 <__sflush_r+0xc0>
 8007952:	684b      	ldr	r3, [r1, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc05      	bgt.n	8007964 <__sflush_r+0x20>
 8007958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc02      	bgt.n	8007964 <__sflush_r+0x20>
 800795e:	2000      	movs	r0, #0
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007966:	2e00      	cmp	r6, #0
 8007968:	d0f9      	beq.n	800795e <__sflush_r+0x1a>
 800796a:	2300      	movs	r3, #0
 800796c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007970:	682f      	ldr	r7, [r5, #0]
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	d032      	beq.n	80079dc <__sflush_r+0x98>
 8007976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	075a      	lsls	r2, r3, #29
 800797c:	d505      	bpl.n	800798a <__sflush_r+0x46>
 800797e:	6863      	ldr	r3, [r4, #4]
 8007980:	1ac0      	subs	r0, r0, r3
 8007982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007984:	b10b      	cbz	r3, 800798a <__sflush_r+0x46>
 8007986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007988:	1ac0      	subs	r0, r0, r3
 800798a:	2300      	movs	r3, #0
 800798c:	4602      	mov	r2, r0
 800798e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007990:	6a21      	ldr	r1, [r4, #32]
 8007992:	4628      	mov	r0, r5
 8007994:	47b0      	blx	r6
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	d106      	bne.n	80079aa <__sflush_r+0x66>
 800799c:	6829      	ldr	r1, [r5, #0]
 800799e:	291d      	cmp	r1, #29
 80079a0:	d82c      	bhi.n	80079fc <__sflush_r+0xb8>
 80079a2:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <__sflush_r+0x108>)
 80079a4:	40ca      	lsrs	r2, r1
 80079a6:	07d6      	lsls	r6, r2, #31
 80079a8:	d528      	bpl.n	80079fc <__sflush_r+0xb8>
 80079aa:	2200      	movs	r2, #0
 80079ac:	6062      	str	r2, [r4, #4]
 80079ae:	04d9      	lsls	r1, r3, #19
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	d504      	bpl.n	80079c0 <__sflush_r+0x7c>
 80079b6:	1c42      	adds	r2, r0, #1
 80079b8:	d101      	bne.n	80079be <__sflush_r+0x7a>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	b903      	cbnz	r3, 80079c0 <__sflush_r+0x7c>
 80079be:	6560      	str	r0, [r4, #84]	; 0x54
 80079c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	2900      	cmp	r1, #0
 80079c6:	d0ca      	beq.n	800795e <__sflush_r+0x1a>
 80079c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d002      	beq.n	80079d6 <__sflush_r+0x92>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f7ff fd41 	bl	8007458 <_free_r>
 80079d6:	2000      	movs	r0, #0
 80079d8:	6360      	str	r0, [r4, #52]	; 0x34
 80079da:	e7c1      	b.n	8007960 <__sflush_r+0x1c>
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	2301      	movs	r3, #1
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b0      	blx	r6
 80079e4:	1c41      	adds	r1, r0, #1
 80079e6:	d1c7      	bne.n	8007978 <__sflush_r+0x34>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0c4      	beq.n	8007978 <__sflush_r+0x34>
 80079ee:	2b1d      	cmp	r3, #29
 80079f0:	d001      	beq.n	80079f6 <__sflush_r+0xb2>
 80079f2:	2b16      	cmp	r3, #22
 80079f4:	d101      	bne.n	80079fa <__sflush_r+0xb6>
 80079f6:	602f      	str	r7, [r5, #0]
 80079f8:	e7b1      	b.n	800795e <__sflush_r+0x1a>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	e7ad      	b.n	8007960 <__sflush_r+0x1c>
 8007a04:	690f      	ldr	r7, [r1, #16]
 8007a06:	2f00      	cmp	r7, #0
 8007a08:	d0a9      	beq.n	800795e <__sflush_r+0x1a>
 8007a0a:	0793      	lsls	r3, r2, #30
 8007a0c:	680e      	ldr	r6, [r1, #0]
 8007a0e:	bf08      	it	eq
 8007a10:	694b      	ldreq	r3, [r1, #20]
 8007a12:	600f      	str	r7, [r1, #0]
 8007a14:	bf18      	it	ne
 8007a16:	2300      	movne	r3, #0
 8007a18:	eba6 0807 	sub.w	r8, r6, r7
 8007a1c:	608b      	str	r3, [r1, #8]
 8007a1e:	f1b8 0f00 	cmp.w	r8, #0
 8007a22:	dd9c      	ble.n	800795e <__sflush_r+0x1a>
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a28:	4643      	mov	r3, r8
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b0      	blx	r6
 8007a30:	2800      	cmp	r0, #0
 8007a32:	dc06      	bgt.n	8007a42 <__sflush_r+0xfe>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e78e      	b.n	8007960 <__sflush_r+0x1c>
 8007a42:	4407      	add	r7, r0
 8007a44:	eba8 0800 	sub.w	r8, r8, r0
 8007a48:	e7e9      	b.n	8007a1e <__sflush_r+0xda>
 8007a4a:	bf00      	nop
 8007a4c:	20400001 	.word	0x20400001

08007a50 <_fflush_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b913      	cbnz	r3, 8007a60 <_fflush_r+0x10>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	b118      	cbz	r0, 8007a6a <_fflush_r+0x1a>
 8007a62:	6983      	ldr	r3, [r0, #24]
 8007a64:	b90b      	cbnz	r3, 8007a6a <_fflush_r+0x1a>
 8007a66:	f000 f887 	bl	8007b78 <__sinit>
 8007a6a:	4b14      	ldr	r3, [pc, #80]	; (8007abc <_fflush_r+0x6c>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	d11b      	bne.n	8007aa8 <_fflush_r+0x58>
 8007a70:	686c      	ldr	r4, [r5, #4]
 8007a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ef      	beq.n	8007a5a <_fflush_r+0xa>
 8007a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a7c:	07d0      	lsls	r0, r2, #31
 8007a7e:	d404      	bmi.n	8007a8a <_fflush_r+0x3a>
 8007a80:	0599      	lsls	r1, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_fflush_r+0x3a>
 8007a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a86:	f000 f915 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f7ff ff59 	bl	8007944 <__sflush_r>
 8007a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a94:	07da      	lsls	r2, r3, #31
 8007a96:	4605      	mov	r5, r0
 8007a98:	d4e0      	bmi.n	8007a5c <_fflush_r+0xc>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	059b      	lsls	r3, r3, #22
 8007a9e:	d4dd      	bmi.n	8007a5c <_fflush_r+0xc>
 8007aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa2:	f000 f908 	bl	8007cb6 <__retarget_lock_release_recursive>
 8007aa6:	e7d9      	b.n	8007a5c <_fflush_r+0xc>
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <_fflush_r+0x70>)
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	d101      	bne.n	8007ab2 <_fflush_r+0x62>
 8007aae:	68ac      	ldr	r4, [r5, #8]
 8007ab0:	e7df      	b.n	8007a72 <_fflush_r+0x22>
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <_fflush_r+0x74>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	bf08      	it	eq
 8007ab8:	68ec      	ldreq	r4, [r5, #12]
 8007aba:	e7da      	b.n	8007a72 <_fflush_r+0x22>
 8007abc:	08008938 	.word	0x08008938
 8007ac0:	08008958 	.word	0x08008958
 8007ac4:	08008918 	.word	0x08008918

08007ac8 <std>:
 8007ac8:	2300      	movs	r3, #0
 8007aca:	b510      	push	{r4, lr}
 8007acc:	4604      	mov	r4, r0
 8007ace:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ad6:	6083      	str	r3, [r0, #8]
 8007ad8:	8181      	strh	r1, [r0, #12]
 8007ada:	6643      	str	r3, [r0, #100]	; 0x64
 8007adc:	81c2      	strh	r2, [r0, #14]
 8007ade:	6183      	str	r3, [r0, #24]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	2208      	movs	r2, #8
 8007ae4:	305c      	adds	r0, #92	; 0x5c
 8007ae6:	f7fd fced 	bl	80054c4 <memset>
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <std+0x38>)
 8007aec:	6263      	str	r3, [r4, #36]	; 0x24
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <std+0x3c>)
 8007af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <std+0x40>)
 8007af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af6:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <std+0x44>)
 8007af8:	6224      	str	r4, [r4, #32]
 8007afa:	6323      	str	r3, [r4, #48]	; 0x30
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	08007e0d 	.word	0x08007e0d
 8007b04:	08007e2f 	.word	0x08007e2f
 8007b08:	08007e67 	.word	0x08007e67
 8007b0c:	08007e8b 	.word	0x08007e8b

08007b10 <_cleanup_r>:
 8007b10:	4901      	ldr	r1, [pc, #4]	; (8007b18 <_cleanup_r+0x8>)
 8007b12:	f000 b8af 	b.w	8007c74 <_fwalk_reent>
 8007b16:	bf00      	nop
 8007b18:	08007a51 	.word	0x08007a51

08007b1c <__sfmoreglue>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	2268      	movs	r2, #104	; 0x68
 8007b20:	1e4d      	subs	r5, r1, #1
 8007b22:	4355      	muls	r5, r2
 8007b24:	460e      	mov	r6, r1
 8007b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b2a:	f7fe fa05 	bl	8005f38 <_malloc_r>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	b140      	cbz	r0, 8007b44 <__sfmoreglue+0x28>
 8007b32:	2100      	movs	r1, #0
 8007b34:	e9c0 1600 	strd	r1, r6, [r0]
 8007b38:	300c      	adds	r0, #12
 8007b3a:	60a0      	str	r0, [r4, #8]
 8007b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b40:	f7fd fcc0 	bl	80054c4 <memset>
 8007b44:	4620      	mov	r0, r4
 8007b46:	bd70      	pop	{r4, r5, r6, pc}

08007b48 <__sfp_lock_acquire>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__sfp_lock_acquire+0x8>)
 8007b4a:	f000 b8b3 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	2000026d 	.word	0x2000026d

08007b54 <__sfp_lock_release>:
 8007b54:	4801      	ldr	r0, [pc, #4]	; (8007b5c <__sfp_lock_release+0x8>)
 8007b56:	f000 b8ae 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	2000026d 	.word	0x2000026d

08007b60 <__sinit_lock_acquire>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <__sinit_lock_acquire+0x8>)
 8007b62:	f000 b8a7 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007b66:	bf00      	nop
 8007b68:	2000026e 	.word	0x2000026e

08007b6c <__sinit_lock_release>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__sinit_lock_release+0x8>)
 8007b6e:	f000 b8a2 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007b72:	bf00      	nop
 8007b74:	2000026e 	.word	0x2000026e

08007b78 <__sinit>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f7ff fff0 	bl	8007b60 <__sinit_lock_acquire>
 8007b80:	69a3      	ldr	r3, [r4, #24]
 8007b82:	b11b      	cbz	r3, 8007b8c <__sinit+0x14>
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f7ff bff0 	b.w	8007b6c <__sinit_lock_release>
 8007b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b90:	6523      	str	r3, [r4, #80]	; 0x50
 8007b92:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <__sinit+0x68>)
 8007b94:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <__sinit+0x6c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	bf04      	itt	eq
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	61a3      	streq	r3, [r4, #24]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f820 	bl	8007be8 <__sfp>
 8007ba8:	6060      	str	r0, [r4, #4]
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f81c 	bl	8007be8 <__sfp>
 8007bb0:	60a0      	str	r0, [r4, #8]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 f818 	bl	8007be8 <__sfp>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	60e0      	str	r0, [r4, #12]
 8007bbc:	2104      	movs	r1, #4
 8007bbe:	6860      	ldr	r0, [r4, #4]
 8007bc0:	f7ff ff82 	bl	8007ac8 <std>
 8007bc4:	68a0      	ldr	r0, [r4, #8]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	2109      	movs	r1, #9
 8007bca:	f7ff ff7d 	bl	8007ac8 <std>
 8007bce:	68e0      	ldr	r0, [r4, #12]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	2112      	movs	r1, #18
 8007bd4:	f7ff ff78 	bl	8007ac8 <std>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	61a3      	str	r3, [r4, #24]
 8007bdc:	e7d2      	b.n	8007b84 <__sinit+0xc>
 8007bde:	bf00      	nop
 8007be0:	080086b4 	.word	0x080086b4
 8007be4:	08007b11 	.word	0x08007b11

08007be8 <__sfp>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4607      	mov	r7, r0
 8007bec:	f7ff ffac 	bl	8007b48 <__sfp_lock_acquire>
 8007bf0:	4b1e      	ldr	r3, [pc, #120]	; (8007c6c <__sfp+0x84>)
 8007bf2:	681e      	ldr	r6, [r3, #0]
 8007bf4:	69b3      	ldr	r3, [r6, #24]
 8007bf6:	b913      	cbnz	r3, 8007bfe <__sfp+0x16>
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7ff ffbd 	bl	8007b78 <__sinit>
 8007bfe:	3648      	adds	r6, #72	; 0x48
 8007c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	d503      	bpl.n	8007c10 <__sfp+0x28>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	b30b      	cbz	r3, 8007c50 <__sfp+0x68>
 8007c0c:	6836      	ldr	r6, [r6, #0]
 8007c0e:	e7f7      	b.n	8007c00 <__sfp+0x18>
 8007c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c14:	b9d5      	cbnz	r5, 8007c4c <__sfp+0x64>
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <__sfp+0x88>)
 8007c18:	60e3      	str	r3, [r4, #12]
 8007c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c20:	f000 f847 	bl	8007cb2 <__retarget_lock_init_recursive>
 8007c24:	f7ff ff96 	bl	8007b54 <__sfp_lock_release>
 8007c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c30:	6025      	str	r5, [r4, #0]
 8007c32:	61a5      	str	r5, [r4, #24]
 8007c34:	2208      	movs	r2, #8
 8007c36:	4629      	mov	r1, r5
 8007c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c3c:	f7fd fc42 	bl	80054c4 <memset>
 8007c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c48:	4620      	mov	r0, r4
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	3468      	adds	r4, #104	; 0x68
 8007c4e:	e7d9      	b.n	8007c04 <__sfp+0x1c>
 8007c50:	2104      	movs	r1, #4
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7ff ff62 	bl	8007b1c <__sfmoreglue>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	6030      	str	r0, [r6, #0]
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d1d5      	bne.n	8007c0c <__sfp+0x24>
 8007c60:	f7ff ff78 	bl	8007b54 <__sfp_lock_release>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	e7ee      	b.n	8007c48 <__sfp+0x60>
 8007c6a:	bf00      	nop
 8007c6c:	080086b4 	.word	0x080086b4
 8007c70:	ffff0001 	.word	0xffff0001

08007c74 <_fwalk_reent>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	4606      	mov	r6, r0
 8007c7a:	4688      	mov	r8, r1
 8007c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c80:	2700      	movs	r7, #0
 8007c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c86:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8a:	d505      	bpl.n	8007c98 <_fwalk_reent+0x24>
 8007c8c:	6824      	ldr	r4, [r4, #0]
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	d1f7      	bne.n	8007c82 <_fwalk_reent+0xe>
 8007c92:	4638      	mov	r0, r7
 8007c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c98:	89ab      	ldrh	r3, [r5, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d907      	bls.n	8007cae <_fwalk_reent+0x3a>
 8007c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	d003      	beq.n	8007cae <_fwalk_reent+0x3a>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	47c0      	blx	r8
 8007cac:	4307      	orrs	r7, r0
 8007cae:	3568      	adds	r5, #104	; 0x68
 8007cb0:	e7e9      	b.n	8007c86 <_fwalk_reent+0x12>

08007cb2 <__retarget_lock_init_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__retarget_lock_acquire_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <__retarget_lock_release_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <__swhatbuf_r>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	460e      	mov	r6, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	b096      	sub	sp, #88	; 0x58
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	da08      	bge.n	8007cdc <__swhatbuf_r+0x24>
 8007cca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	602a      	str	r2, [r5, #0]
 8007cd2:	061a      	lsls	r2, r3, #24
 8007cd4:	d410      	bmi.n	8007cf8 <__swhatbuf_r+0x40>
 8007cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cda:	e00e      	b.n	8007cfa <__swhatbuf_r+0x42>
 8007cdc:	466a      	mov	r2, sp
 8007cde:	f000 f8fb 	bl	8007ed8 <_fstat_r>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	dbf1      	blt.n	8007cca <__swhatbuf_r+0x12>
 8007ce6:	9a01      	ldr	r2, [sp, #4]
 8007ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cf0:	425a      	negs	r2, r3
 8007cf2:	415a      	adcs	r2, r3
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	e7ee      	b.n	8007cd6 <__swhatbuf_r+0x1e>
 8007cf8:	2340      	movs	r3, #64	; 0x40
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	b016      	add	sp, #88	; 0x58
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d04 <__smakebuf_r>:
 8007d04:	898b      	ldrh	r3, [r1, #12]
 8007d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d08:	079d      	lsls	r5, r3, #30
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	d507      	bpl.n	8007d20 <__smakebuf_r+0x1c>
 8007d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	6163      	str	r3, [r4, #20]
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	ab01      	add	r3, sp, #4
 8007d22:	466a      	mov	r2, sp
 8007d24:	f7ff ffc8 	bl	8007cb8 <__swhatbuf_r>
 8007d28:	9900      	ldr	r1, [sp, #0]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7fe f903 	bl	8005f38 <_malloc_r>
 8007d32:	b948      	cbnz	r0, 8007d48 <__smakebuf_r+0x44>
 8007d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d38:	059a      	lsls	r2, r3, #22
 8007d3a:	d4ef      	bmi.n	8007d1c <__smakebuf_r+0x18>
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	e7e3      	b.n	8007d10 <__smakebuf_r+0xc>
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <__smakebuf_r+0x7c>)
 8007d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	6020      	str	r0, [r4, #0]
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	6163      	str	r3, [r4, #20]
 8007d5a:	9b01      	ldr	r3, [sp, #4]
 8007d5c:	6120      	str	r0, [r4, #16]
 8007d5e:	b15b      	cbz	r3, 8007d78 <__smakebuf_r+0x74>
 8007d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 f8c9 	bl	8007efc <_isatty_r>
 8007d6a:	b128      	cbz	r0, 8007d78 <__smakebuf_r+0x74>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	89a0      	ldrh	r0, [r4, #12]
 8007d7a:	4305      	orrs	r5, r0
 8007d7c:	81a5      	strh	r5, [r4, #12]
 8007d7e:	e7cd      	b.n	8007d1c <__smakebuf_r+0x18>
 8007d80:	08007b11 	.word	0x08007b11

08007d84 <_raise_r>:
 8007d84:	291f      	cmp	r1, #31
 8007d86:	b538      	push	{r3, r4, r5, lr}
 8007d88:	4604      	mov	r4, r0
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	d904      	bls.n	8007d98 <_raise_r+0x14>
 8007d8e:	2316      	movs	r3, #22
 8007d90:	6003      	str	r3, [r0, #0]
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d9a:	b112      	cbz	r2, 8007da2 <_raise_r+0x1e>
 8007d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007da0:	b94b      	cbnz	r3, 8007db6 <_raise_r+0x32>
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f830 	bl	8007e08 <_getpid_r>
 8007da8:	462a      	mov	r2, r5
 8007daa:	4601      	mov	r1, r0
 8007dac:	4620      	mov	r0, r4
 8007dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db2:	f000 b817 	b.w	8007de4 <_kill_r>
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d00a      	beq.n	8007dd0 <_raise_r+0x4c>
 8007dba:	1c59      	adds	r1, r3, #1
 8007dbc:	d103      	bne.n	8007dc6 <_raise_r+0x42>
 8007dbe:	2316      	movs	r3, #22
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e7e7      	b.n	8007d96 <_raise_r+0x12>
 8007dc6:	2400      	movs	r4, #0
 8007dc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dcc:	4628      	mov	r0, r5
 8007dce:	4798      	blx	r3
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	e7e0      	b.n	8007d96 <_raise_r+0x12>

08007dd4 <raise>:
 8007dd4:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <raise+0xc>)
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	f7ff bfd3 	b.w	8007d84 <_raise_r>
 8007dde:	bf00      	nop
 8007de0:	2000009c 	.word	0x2000009c

08007de4 <_kill_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	; (8007e04 <_kill_r+0x20>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	f7fa f845 	bl	8001e80 <_kill>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d102      	bne.n	8007e00 <_kill_r+0x1c>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	b103      	cbz	r3, 8007e00 <_kill_r+0x1c>
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	bd38      	pop	{r3, r4, r5, pc}
 8007e02:	bf00      	nop
 8007e04:	20000268 	.word	0x20000268

08007e08 <_getpid_r>:
 8007e08:	f7fa b832 	b.w	8001e70 <_getpid>

08007e0c <__sread>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	460c      	mov	r4, r1
 8007e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e14:	f000 f894 	bl	8007f40 <_read_r>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	bfab      	itete	ge
 8007e1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007e20:	181b      	addge	r3, r3, r0
 8007e22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e26:	bfac      	ite	ge
 8007e28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e2a:	81a3      	strhlt	r3, [r4, #12]
 8007e2c:	bd10      	pop	{r4, pc}

08007e2e <__swrite>:
 8007e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e32:	461f      	mov	r7, r3
 8007e34:	898b      	ldrh	r3, [r1, #12]
 8007e36:	05db      	lsls	r3, r3, #23
 8007e38:	4605      	mov	r5, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4616      	mov	r6, r2
 8007e3e:	d505      	bpl.n	8007e4c <__swrite+0x1e>
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2302      	movs	r3, #2
 8007e46:	2200      	movs	r2, #0
 8007e48:	f000 f868 	bl	8007f1c <_lseek_r>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	f000 b817 	b.w	8007e94 <_write_r>

08007e66 <__sseek>:
 8007e66:	b510      	push	{r4, lr}
 8007e68:	460c      	mov	r4, r1
 8007e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6e:	f000 f855 	bl	8007f1c <_lseek_r>
 8007e72:	1c43      	adds	r3, r0, #1
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	bf15      	itete	ne
 8007e78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e82:	81a3      	strheq	r3, [r4, #12]
 8007e84:	bf18      	it	ne
 8007e86:	81a3      	strhne	r3, [r4, #12]
 8007e88:	bd10      	pop	{r4, pc}

08007e8a <__sclose>:
 8007e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8e:	f000 b813 	b.w	8007eb8 <_close_r>
	...

08007e94 <_write_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4d07      	ldr	r5, [pc, #28]	; (8007eb4 <_write_r+0x20>)
 8007e98:	4604      	mov	r4, r0
 8007e9a:	4608      	mov	r0, r1
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7fa f823 	bl	8001eee <_write>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_write_r+0x1e>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_write_r+0x1e>
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20000268 	.word	0x20000268

08007eb8 <_close_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	; (8007ed4 <_close_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7fa f82f 	bl	8001f26 <_close>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_close_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_close_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20000268 	.word	0x20000268

08007ed8 <_fstat_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d07      	ldr	r5, [pc, #28]	; (8007ef8 <_fstat_r+0x20>)
 8007edc:	2300      	movs	r3, #0
 8007ede:	4604      	mov	r4, r0
 8007ee0:	4608      	mov	r0, r1
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	f7fa f82a 	bl	8001f3e <_fstat>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	d102      	bne.n	8007ef4 <_fstat_r+0x1c>
 8007eee:	682b      	ldr	r3, [r5, #0]
 8007ef0:	b103      	cbz	r3, 8007ef4 <_fstat_r+0x1c>
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000268 	.word	0x20000268

08007efc <_isatty_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4d06      	ldr	r5, [pc, #24]	; (8007f18 <_isatty_r+0x1c>)
 8007f00:	2300      	movs	r3, #0
 8007f02:	4604      	mov	r4, r0
 8007f04:	4608      	mov	r0, r1
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	f7fa f829 	bl	8001f5e <_isatty>
 8007f0c:	1c43      	adds	r3, r0, #1
 8007f0e:	d102      	bne.n	8007f16 <_isatty_r+0x1a>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	b103      	cbz	r3, 8007f16 <_isatty_r+0x1a>
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	bd38      	pop	{r3, r4, r5, pc}
 8007f18:	20000268 	.word	0x20000268

08007f1c <_lseek_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d07      	ldr	r5, [pc, #28]	; (8007f3c <_lseek_r+0x20>)
 8007f20:	4604      	mov	r4, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	2200      	movs	r2, #0
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f7fa f822 	bl	8001f74 <_lseek>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_lseek_r+0x1e>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_lseek_r+0x1e>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000268 	.word	0x20000268

08007f40 <_read_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d07      	ldr	r5, [pc, #28]	; (8007f60 <_read_r+0x20>)
 8007f44:	4604      	mov	r4, r0
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7f9 ffb0 	bl	8001eb4 <_read>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_read_r+0x1e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_read_r+0x1e>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	20000268 	.word	0x20000268
 8007f64:	00000000 	.word	0x00000000

08007f68 <atan>:
 8007f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	ec55 4b10 	vmov	r4, r5, d0
 8007f70:	4bc3      	ldr	r3, [pc, #780]	; (8008280 <atan+0x318>)
 8007f72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f76:	429e      	cmp	r6, r3
 8007f78:	46ab      	mov	fp, r5
 8007f7a:	dd18      	ble.n	8007fae <atan+0x46>
 8007f7c:	4bc1      	ldr	r3, [pc, #772]	; (8008284 <atan+0x31c>)
 8007f7e:	429e      	cmp	r6, r3
 8007f80:	dc01      	bgt.n	8007f86 <atan+0x1e>
 8007f82:	d109      	bne.n	8007f98 <atan+0x30>
 8007f84:	b144      	cbz	r4, 8007f98 <atan+0x30>
 8007f86:	4622      	mov	r2, r4
 8007f88:	462b      	mov	r3, r5
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 f98d 	bl	80002ac <__adddf3>
 8007f92:	4604      	mov	r4, r0
 8007f94:	460d      	mov	r5, r1
 8007f96:	e006      	b.n	8007fa6 <atan+0x3e>
 8007f98:	f1bb 0f00 	cmp.w	fp, #0
 8007f9c:	f300 8131 	bgt.w	8008202 <atan+0x29a>
 8007fa0:	a59b      	add	r5, pc, #620	; (adr r5, 8008210 <atan+0x2a8>)
 8007fa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007fa6:	ec45 4b10 	vmov	d0, r4, r5
 8007faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fae:	4bb6      	ldr	r3, [pc, #728]	; (8008288 <atan+0x320>)
 8007fb0:	429e      	cmp	r6, r3
 8007fb2:	dc14      	bgt.n	8007fde <atan+0x76>
 8007fb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	dc0d      	bgt.n	8007fd8 <atan+0x70>
 8007fbc:	a396      	add	r3, pc, #600	; (adr r3, 8008218 <atan+0x2b0>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	ee10 0a10 	vmov	r0, s0
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f970 	bl	80002ac <__adddf3>
 8007fcc:	4baf      	ldr	r3, [pc, #700]	; (800828c <atan+0x324>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 fdb2 	bl	8000b38 <__aeabi_dcmpgt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1e6      	bne.n	8007fa6 <atan+0x3e>
 8007fd8:	f04f 3aff 	mov.w	sl, #4294967295
 8007fdc:	e02b      	b.n	8008036 <atan+0xce>
 8007fde:	f000 f963 	bl	80082a8 <fabs>
 8007fe2:	4bab      	ldr	r3, [pc, #684]	; (8008290 <atan+0x328>)
 8007fe4:	429e      	cmp	r6, r3
 8007fe6:	ec55 4b10 	vmov	r4, r5, d0
 8007fea:	f300 80bf 	bgt.w	800816c <atan+0x204>
 8007fee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	f300 80a0 	bgt.w	8008138 <atan+0x1d0>
 8007ff8:	ee10 2a10 	vmov	r2, s0
 8007ffc:	ee10 0a10 	vmov	r0, s0
 8008000:	462b      	mov	r3, r5
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f952 	bl	80002ac <__adddf3>
 8008008:	4ba0      	ldr	r3, [pc, #640]	; (800828c <atan+0x324>)
 800800a:	2200      	movs	r2, #0
 800800c:	f7f8 f94c 	bl	80002a8 <__aeabi_dsub>
 8008010:	2200      	movs	r2, #0
 8008012:	4606      	mov	r6, r0
 8008014:	460f      	mov	r7, r1
 8008016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800801a:	4620      	mov	r0, r4
 800801c:	4629      	mov	r1, r5
 800801e:	f7f8 f945 	bl	80002ac <__adddf3>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4630      	mov	r0, r6
 8008028:	4639      	mov	r1, r7
 800802a:	f7f8 fc1f 	bl	800086c <__aeabi_ddiv>
 800802e:	f04f 0a00 	mov.w	sl, #0
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	4622      	mov	r2, r4
 8008038:	462b      	mov	r3, r5
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 faeb 	bl	8000618 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	f7f8 fae5 	bl	8000618 <__aeabi_dmul>
 800804e:	a374      	add	r3, pc, #464	; (adr r3, 8008220 <atan+0x2b8>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	f7f8 fade 	bl	8000618 <__aeabi_dmul>
 800805c:	a372      	add	r3, pc, #456	; (adr r3, 8008228 <atan+0x2c0>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f923 	bl	80002ac <__adddf3>
 8008066:	4632      	mov	r2, r6
 8008068:	463b      	mov	r3, r7
 800806a:	f7f8 fad5 	bl	8000618 <__aeabi_dmul>
 800806e:	a370      	add	r3, pc, #448	; (adr r3, 8008230 <atan+0x2c8>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f91a 	bl	80002ac <__adddf3>
 8008078:	4632      	mov	r2, r6
 800807a:	463b      	mov	r3, r7
 800807c:	f7f8 facc 	bl	8000618 <__aeabi_dmul>
 8008080:	a36d      	add	r3, pc, #436	; (adr r3, 8008238 <atan+0x2d0>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 f911 	bl	80002ac <__adddf3>
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	f7f8 fac3 	bl	8000618 <__aeabi_dmul>
 8008092:	a36b      	add	r3, pc, #428	; (adr r3, 8008240 <atan+0x2d8>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f908 	bl	80002ac <__adddf3>
 800809c:	4632      	mov	r2, r6
 800809e:	463b      	mov	r3, r7
 80080a0:	f7f8 faba 	bl	8000618 <__aeabi_dmul>
 80080a4:	a368      	add	r3, pc, #416	; (adr r3, 8008248 <atan+0x2e0>)
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 f8ff 	bl	80002ac <__adddf3>
 80080ae:	4642      	mov	r2, r8
 80080b0:	464b      	mov	r3, r9
 80080b2:	f7f8 fab1 	bl	8000618 <__aeabi_dmul>
 80080b6:	a366      	add	r3, pc, #408	; (adr r3, 8008250 <atan+0x2e8>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	4680      	mov	r8, r0
 80080be:	4689      	mov	r9, r1
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 faa8 	bl	8000618 <__aeabi_dmul>
 80080c8:	a363      	add	r3, pc, #396	; (adr r3, 8008258 <atan+0x2f0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 f8eb 	bl	80002a8 <__aeabi_dsub>
 80080d2:	4632      	mov	r2, r6
 80080d4:	463b      	mov	r3, r7
 80080d6:	f7f8 fa9f 	bl	8000618 <__aeabi_dmul>
 80080da:	a361      	add	r3, pc, #388	; (adr r3, 8008260 <atan+0x2f8>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 f8e2 	bl	80002a8 <__aeabi_dsub>
 80080e4:	4632      	mov	r2, r6
 80080e6:	463b      	mov	r3, r7
 80080e8:	f7f8 fa96 	bl	8000618 <__aeabi_dmul>
 80080ec:	a35e      	add	r3, pc, #376	; (adr r3, 8008268 <atan+0x300>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 f8d9 	bl	80002a8 <__aeabi_dsub>
 80080f6:	4632      	mov	r2, r6
 80080f8:	463b      	mov	r3, r7
 80080fa:	f7f8 fa8d 	bl	8000618 <__aeabi_dmul>
 80080fe:	a35c      	add	r3, pc, #368	; (adr r3, 8008270 <atan+0x308>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 f8d0 	bl	80002a8 <__aeabi_dsub>
 8008108:	4632      	mov	r2, r6
 800810a:	463b      	mov	r3, r7
 800810c:	f7f8 fa84 	bl	8000618 <__aeabi_dmul>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4640      	mov	r0, r8
 8008116:	4649      	mov	r1, r9
 8008118:	f7f8 f8c8 	bl	80002ac <__adddf3>
 800811c:	4622      	mov	r2, r4
 800811e:	462b      	mov	r3, r5
 8008120:	f7f8 fa7a 	bl	8000618 <__aeabi_dmul>
 8008124:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	d14b      	bne.n	80081c6 <atan+0x25e>
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 f8b9 	bl	80002a8 <__aeabi_dsub>
 8008136:	e72c      	b.n	8007f92 <atan+0x2a>
 8008138:	ee10 0a10 	vmov	r0, s0
 800813c:	4b53      	ldr	r3, [pc, #332]	; (800828c <atan+0x324>)
 800813e:	2200      	movs	r2, #0
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 f8b1 	bl	80002a8 <__aeabi_dsub>
 8008146:	4b51      	ldr	r3, [pc, #324]	; (800828c <atan+0x324>)
 8008148:	4606      	mov	r6, r0
 800814a:	460f      	mov	r7, r1
 800814c:	2200      	movs	r2, #0
 800814e:	4620      	mov	r0, r4
 8008150:	4629      	mov	r1, r5
 8008152:	f7f8 f8ab 	bl	80002ac <__adddf3>
 8008156:	4602      	mov	r2, r0
 8008158:	460b      	mov	r3, r1
 800815a:	4630      	mov	r0, r6
 800815c:	4639      	mov	r1, r7
 800815e:	f7f8 fb85 	bl	800086c <__aeabi_ddiv>
 8008162:	f04f 0a01 	mov.w	sl, #1
 8008166:	4604      	mov	r4, r0
 8008168:	460d      	mov	r5, r1
 800816a:	e764      	b.n	8008036 <atan+0xce>
 800816c:	4b49      	ldr	r3, [pc, #292]	; (8008294 <atan+0x32c>)
 800816e:	429e      	cmp	r6, r3
 8008170:	da1d      	bge.n	80081ae <atan+0x246>
 8008172:	ee10 0a10 	vmov	r0, s0
 8008176:	4b48      	ldr	r3, [pc, #288]	; (8008298 <atan+0x330>)
 8008178:	2200      	movs	r2, #0
 800817a:	4629      	mov	r1, r5
 800817c:	f7f8 f894 	bl	80002a8 <__aeabi_dsub>
 8008180:	4b45      	ldr	r3, [pc, #276]	; (8008298 <atan+0x330>)
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	2200      	movs	r2, #0
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 fa44 	bl	8000618 <__aeabi_dmul>
 8008190:	4b3e      	ldr	r3, [pc, #248]	; (800828c <atan+0x324>)
 8008192:	2200      	movs	r2, #0
 8008194:	f7f8 f88a 	bl	80002ac <__adddf3>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 fb64 	bl	800086c <__aeabi_ddiv>
 80081a4:	f04f 0a02 	mov.w	sl, #2
 80081a8:	4604      	mov	r4, r0
 80081aa:	460d      	mov	r5, r1
 80081ac:	e743      	b.n	8008036 <atan+0xce>
 80081ae:	462b      	mov	r3, r5
 80081b0:	ee10 2a10 	vmov	r2, s0
 80081b4:	4939      	ldr	r1, [pc, #228]	; (800829c <atan+0x334>)
 80081b6:	2000      	movs	r0, #0
 80081b8:	f7f8 fb58 	bl	800086c <__aeabi_ddiv>
 80081bc:	f04f 0a03 	mov.w	sl, #3
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	e737      	b.n	8008036 <atan+0xce>
 80081c6:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <atan+0x338>)
 80081c8:	4e36      	ldr	r6, [pc, #216]	; (80082a4 <atan+0x33c>)
 80081ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80081ce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80081d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80081d6:	f7f8 f867 	bl	80002a8 <__aeabi_dsub>
 80081da:	4622      	mov	r2, r4
 80081dc:	462b      	mov	r3, r5
 80081de:	f7f8 f863 	bl	80002a8 <__aeabi_dsub>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80081ea:	f7f8 f85d 	bl	80002a8 <__aeabi_dsub>
 80081ee:	f1bb 0f00 	cmp.w	fp, #0
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	f6bf aed6 	bge.w	8007fa6 <atan+0x3e>
 80081fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081fe:	461d      	mov	r5, r3
 8008200:	e6d1      	b.n	8007fa6 <atan+0x3e>
 8008202:	a51d      	add	r5, pc, #116	; (adr r5, 8008278 <atan+0x310>)
 8008204:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008208:	e6cd      	b.n	8007fa6 <atan+0x3e>
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w
 8008210:	54442d18 	.word	0x54442d18
 8008214:	bff921fb 	.word	0xbff921fb
 8008218:	8800759c 	.word	0x8800759c
 800821c:	7e37e43c 	.word	0x7e37e43c
 8008220:	e322da11 	.word	0xe322da11
 8008224:	3f90ad3a 	.word	0x3f90ad3a
 8008228:	24760deb 	.word	0x24760deb
 800822c:	3fa97b4b 	.word	0x3fa97b4b
 8008230:	a0d03d51 	.word	0xa0d03d51
 8008234:	3fb10d66 	.word	0x3fb10d66
 8008238:	c54c206e 	.word	0xc54c206e
 800823c:	3fb745cd 	.word	0x3fb745cd
 8008240:	920083ff 	.word	0x920083ff
 8008244:	3fc24924 	.word	0x3fc24924
 8008248:	5555550d 	.word	0x5555550d
 800824c:	3fd55555 	.word	0x3fd55555
 8008250:	2c6a6c2f 	.word	0x2c6a6c2f
 8008254:	bfa2b444 	.word	0xbfa2b444
 8008258:	52defd9a 	.word	0x52defd9a
 800825c:	3fadde2d 	.word	0x3fadde2d
 8008260:	af749a6d 	.word	0xaf749a6d
 8008264:	3fb3b0f2 	.word	0x3fb3b0f2
 8008268:	fe231671 	.word	0xfe231671
 800826c:	3fbc71c6 	.word	0x3fbc71c6
 8008270:	9998ebc4 	.word	0x9998ebc4
 8008274:	3fc99999 	.word	0x3fc99999
 8008278:	54442d18 	.word	0x54442d18
 800827c:	3ff921fb 	.word	0x3ff921fb
 8008280:	440fffff 	.word	0x440fffff
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	3fdbffff 	.word	0x3fdbffff
 800828c:	3ff00000 	.word	0x3ff00000
 8008290:	3ff2ffff 	.word	0x3ff2ffff
 8008294:	40038000 	.word	0x40038000
 8008298:	3ff80000 	.word	0x3ff80000
 800829c:	bff00000 	.word	0xbff00000
 80082a0:	08008998 	.word	0x08008998
 80082a4:	08008978 	.word	0x08008978

080082a8 <fabs>:
 80082a8:	ec51 0b10 	vmov	r0, r1, d0
 80082ac:	ee10 2a10 	vmov	r2, s0
 80082b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082b4:	ec43 2b10 	vmov	d0, r2, r3
 80082b8:	4770      	bx	lr

080082ba <atan2>:
 80082ba:	f000 b82d 	b.w	8008318 <__ieee754_atan2>

080082be <sqrt>:
 80082be:	b538      	push	{r3, r4, r5, lr}
 80082c0:	ed2d 8b02 	vpush	{d8}
 80082c4:	ec55 4b10 	vmov	r4, r5, d0
 80082c8:	f000 f8f0 	bl	80084ac <__ieee754_sqrt>
 80082cc:	4622      	mov	r2, r4
 80082ce:	462b      	mov	r3, r5
 80082d0:	4620      	mov	r0, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	eeb0 8a40 	vmov.f32	s16, s0
 80082d8:	eef0 8a60 	vmov.f32	s17, s1
 80082dc:	f7f8 fc36 	bl	8000b4c <__aeabi_dcmpun>
 80082e0:	b990      	cbnz	r0, 8008308 <sqrt+0x4a>
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 fc07 	bl	8000afc <__aeabi_dcmplt>
 80082ee:	b158      	cbz	r0, 8008308 <sqrt+0x4a>
 80082f0:	f7fd f8be 	bl	8005470 <__errno>
 80082f4:	2321      	movs	r3, #33	; 0x21
 80082f6:	6003      	str	r3, [r0, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	2300      	movs	r3, #0
 80082fc:	4610      	mov	r0, r2
 80082fe:	4619      	mov	r1, r3
 8008300:	f7f8 fab4 	bl	800086c <__aeabi_ddiv>
 8008304:	ec41 0b18 	vmov	d8, r0, r1
 8008308:	eeb0 0a48 	vmov.f32	s0, s16
 800830c:	eef0 0a68 	vmov.f32	s1, s17
 8008310:	ecbd 8b02 	vpop	{d8}
 8008314:	bd38      	pop	{r3, r4, r5, pc}
	...

08008318 <__ieee754_atan2>:
 8008318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800831c:	ec57 6b11 	vmov	r6, r7, d1
 8008320:	4273      	negs	r3, r6
 8008322:	f8df e184 	ldr.w	lr, [pc, #388]	; 80084a8 <__ieee754_atan2+0x190>
 8008326:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800832a:	4333      	orrs	r3, r6
 800832c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008330:	4573      	cmp	r3, lr
 8008332:	ec51 0b10 	vmov	r0, r1, d0
 8008336:	ee11 8a10 	vmov	r8, s2
 800833a:	d80a      	bhi.n	8008352 <__ieee754_atan2+0x3a>
 800833c:	4244      	negs	r4, r0
 800833e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008342:	4304      	orrs	r4, r0
 8008344:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008348:	4574      	cmp	r4, lr
 800834a:	ee10 9a10 	vmov	r9, s0
 800834e:	468c      	mov	ip, r1
 8008350:	d907      	bls.n	8008362 <__ieee754_atan2+0x4a>
 8008352:	4632      	mov	r2, r6
 8008354:	463b      	mov	r3, r7
 8008356:	f7f7 ffa9 	bl	80002ac <__adddf3>
 800835a:	ec41 0b10 	vmov	d0, r0, r1
 800835e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008362:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008366:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800836a:	4334      	orrs	r4, r6
 800836c:	d103      	bne.n	8008376 <__ieee754_atan2+0x5e>
 800836e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008372:	f7ff bdf9 	b.w	8007f68 <atan>
 8008376:	17bc      	asrs	r4, r7, #30
 8008378:	f004 0402 	and.w	r4, r4, #2
 800837c:	ea53 0909 	orrs.w	r9, r3, r9
 8008380:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008384:	d107      	bne.n	8008396 <__ieee754_atan2+0x7e>
 8008386:	2c02      	cmp	r4, #2
 8008388:	d060      	beq.n	800844c <__ieee754_atan2+0x134>
 800838a:	2c03      	cmp	r4, #3
 800838c:	d1e5      	bne.n	800835a <__ieee754_atan2+0x42>
 800838e:	a142      	add	r1, pc, #264	; (adr r1, 8008498 <__ieee754_atan2+0x180>)
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	e7e1      	b.n	800835a <__ieee754_atan2+0x42>
 8008396:	ea52 0808 	orrs.w	r8, r2, r8
 800839a:	d106      	bne.n	80083aa <__ieee754_atan2+0x92>
 800839c:	f1bc 0f00 	cmp.w	ip, #0
 80083a0:	da5f      	bge.n	8008462 <__ieee754_atan2+0x14a>
 80083a2:	a13f      	add	r1, pc, #252	; (adr r1, 80084a0 <__ieee754_atan2+0x188>)
 80083a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a8:	e7d7      	b.n	800835a <__ieee754_atan2+0x42>
 80083aa:	4572      	cmp	r2, lr
 80083ac:	d10f      	bne.n	80083ce <__ieee754_atan2+0xb6>
 80083ae:	4293      	cmp	r3, r2
 80083b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80083b4:	d107      	bne.n	80083c6 <__ieee754_atan2+0xae>
 80083b6:	2c02      	cmp	r4, #2
 80083b8:	d84c      	bhi.n	8008454 <__ieee754_atan2+0x13c>
 80083ba:	4b35      	ldr	r3, [pc, #212]	; (8008490 <__ieee754_atan2+0x178>)
 80083bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80083c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80083c4:	e7c9      	b.n	800835a <__ieee754_atan2+0x42>
 80083c6:	2c02      	cmp	r4, #2
 80083c8:	d848      	bhi.n	800845c <__ieee754_atan2+0x144>
 80083ca:	4b32      	ldr	r3, [pc, #200]	; (8008494 <__ieee754_atan2+0x17c>)
 80083cc:	e7f6      	b.n	80083bc <__ieee754_atan2+0xa4>
 80083ce:	4573      	cmp	r3, lr
 80083d0:	d0e4      	beq.n	800839c <__ieee754_atan2+0x84>
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80083d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80083dc:	da1e      	bge.n	800841c <__ieee754_atan2+0x104>
 80083de:	2f00      	cmp	r7, #0
 80083e0:	da01      	bge.n	80083e6 <__ieee754_atan2+0xce>
 80083e2:	323c      	adds	r2, #60	; 0x3c
 80083e4:	db1e      	blt.n	8008424 <__ieee754_atan2+0x10c>
 80083e6:	4632      	mov	r2, r6
 80083e8:	463b      	mov	r3, r7
 80083ea:	f7f8 fa3f 	bl	800086c <__aeabi_ddiv>
 80083ee:	ec41 0b10 	vmov	d0, r0, r1
 80083f2:	f7ff ff59 	bl	80082a8 <fabs>
 80083f6:	f7ff fdb7 	bl	8007f68 <atan>
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	2c01      	cmp	r4, #1
 8008400:	d013      	beq.n	800842a <__ieee754_atan2+0x112>
 8008402:	2c02      	cmp	r4, #2
 8008404:	d015      	beq.n	8008432 <__ieee754_atan2+0x11a>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d0a7      	beq.n	800835a <__ieee754_atan2+0x42>
 800840a:	a319      	add	r3, pc, #100	; (adr r3, 8008470 <__ieee754_atan2+0x158>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	f7f7 ff4a 	bl	80002a8 <__aeabi_dsub>
 8008414:	a318      	add	r3, pc, #96	; (adr r3, 8008478 <__ieee754_atan2+0x160>)
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	e014      	b.n	8008446 <__ieee754_atan2+0x12e>
 800841c:	a118      	add	r1, pc, #96	; (adr r1, 8008480 <__ieee754_atan2+0x168>)
 800841e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008422:	e7ec      	b.n	80083fe <__ieee754_atan2+0xe6>
 8008424:	2000      	movs	r0, #0
 8008426:	2100      	movs	r1, #0
 8008428:	e7e9      	b.n	80083fe <__ieee754_atan2+0xe6>
 800842a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800842e:	4619      	mov	r1, r3
 8008430:	e793      	b.n	800835a <__ieee754_atan2+0x42>
 8008432:	a30f      	add	r3, pc, #60	; (adr r3, 8008470 <__ieee754_atan2+0x158>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 ff36 	bl	80002a8 <__aeabi_dsub>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	a10d      	add	r1, pc, #52	; (adr r1, 8008478 <__ieee754_atan2+0x160>)
 8008442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008446:	f7f7 ff2f 	bl	80002a8 <__aeabi_dsub>
 800844a:	e786      	b.n	800835a <__ieee754_atan2+0x42>
 800844c:	a10a      	add	r1, pc, #40	; (adr r1, 8008478 <__ieee754_atan2+0x160>)
 800844e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008452:	e782      	b.n	800835a <__ieee754_atan2+0x42>
 8008454:	a10c      	add	r1, pc, #48	; (adr r1, 8008488 <__ieee754_atan2+0x170>)
 8008456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845a:	e77e      	b.n	800835a <__ieee754_atan2+0x42>
 800845c:	2000      	movs	r0, #0
 800845e:	2100      	movs	r1, #0
 8008460:	e77b      	b.n	800835a <__ieee754_atan2+0x42>
 8008462:	a107      	add	r1, pc, #28	; (adr r1, 8008480 <__ieee754_atan2+0x168>)
 8008464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008468:	e777      	b.n	800835a <__ieee754_atan2+0x42>
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w
 8008470:	33145c07 	.word	0x33145c07
 8008474:	3ca1a626 	.word	0x3ca1a626
 8008478:	54442d18 	.word	0x54442d18
 800847c:	400921fb 	.word	0x400921fb
 8008480:	54442d18 	.word	0x54442d18
 8008484:	3ff921fb 	.word	0x3ff921fb
 8008488:	54442d18 	.word	0x54442d18
 800848c:	3fe921fb 	.word	0x3fe921fb
 8008490:	080089b8 	.word	0x080089b8
 8008494:	080089d0 	.word	0x080089d0
 8008498:	54442d18 	.word	0x54442d18
 800849c:	c00921fb 	.word	0xc00921fb
 80084a0:	54442d18 	.word	0x54442d18
 80084a4:	bff921fb 	.word	0xbff921fb
 80084a8:	7ff00000 	.word	0x7ff00000

080084ac <__ieee754_sqrt>:
 80084ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b0:	ec55 4b10 	vmov	r4, r5, d0
 80084b4:	4e55      	ldr	r6, [pc, #340]	; (800860c <__ieee754_sqrt+0x160>)
 80084b6:	43ae      	bics	r6, r5
 80084b8:	ee10 0a10 	vmov	r0, s0
 80084bc:	ee10 3a10 	vmov	r3, s0
 80084c0:	462a      	mov	r2, r5
 80084c2:	4629      	mov	r1, r5
 80084c4:	d110      	bne.n	80084e8 <__ieee754_sqrt+0x3c>
 80084c6:	ee10 2a10 	vmov	r2, s0
 80084ca:	462b      	mov	r3, r5
 80084cc:	f7f8 f8a4 	bl	8000618 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f7 fee8 	bl	80002ac <__adddf3>
 80084dc:	4604      	mov	r4, r0
 80084de:	460d      	mov	r5, r1
 80084e0:	ec45 4b10 	vmov	d0, r4, r5
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	dc10      	bgt.n	800850e <__ieee754_sqrt+0x62>
 80084ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80084f0:	4330      	orrs	r0, r6
 80084f2:	d0f5      	beq.n	80084e0 <__ieee754_sqrt+0x34>
 80084f4:	b15d      	cbz	r5, 800850e <__ieee754_sqrt+0x62>
 80084f6:	ee10 2a10 	vmov	r2, s0
 80084fa:	462b      	mov	r3, r5
 80084fc:	ee10 0a10 	vmov	r0, s0
 8008500:	f7f7 fed2 	bl	80002a8 <__aeabi_dsub>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	f7f8 f9b0 	bl	800086c <__aeabi_ddiv>
 800850c:	e7e6      	b.n	80084dc <__ieee754_sqrt+0x30>
 800850e:	1512      	asrs	r2, r2, #20
 8008510:	d074      	beq.n	80085fc <__ieee754_sqrt+0x150>
 8008512:	07d4      	lsls	r4, r2, #31
 8008514:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008518:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800851c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008520:	bf5e      	ittt	pl
 8008522:	0fda      	lsrpl	r2, r3, #31
 8008524:	005b      	lslpl	r3, r3, #1
 8008526:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800852a:	2400      	movs	r4, #0
 800852c:	0fda      	lsrs	r2, r3, #31
 800852e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008532:	107f      	asrs	r7, r7, #1
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	2516      	movs	r5, #22
 8008538:	4620      	mov	r0, r4
 800853a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800853e:	1886      	adds	r6, r0, r2
 8008540:	428e      	cmp	r6, r1
 8008542:	bfde      	ittt	le
 8008544:	1b89      	suble	r1, r1, r6
 8008546:	18b0      	addle	r0, r6, r2
 8008548:	18a4      	addle	r4, r4, r2
 800854a:	0049      	lsls	r1, r1, #1
 800854c:	3d01      	subs	r5, #1
 800854e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008552:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008556:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800855a:	d1f0      	bne.n	800853e <__ieee754_sqrt+0x92>
 800855c:	462a      	mov	r2, r5
 800855e:	f04f 0e20 	mov.w	lr, #32
 8008562:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008566:	4281      	cmp	r1, r0
 8008568:	eb06 0c05 	add.w	ip, r6, r5
 800856c:	dc02      	bgt.n	8008574 <__ieee754_sqrt+0xc8>
 800856e:	d113      	bne.n	8008598 <__ieee754_sqrt+0xec>
 8008570:	459c      	cmp	ip, r3
 8008572:	d811      	bhi.n	8008598 <__ieee754_sqrt+0xec>
 8008574:	f1bc 0f00 	cmp.w	ip, #0
 8008578:	eb0c 0506 	add.w	r5, ip, r6
 800857c:	da43      	bge.n	8008606 <__ieee754_sqrt+0x15a>
 800857e:	2d00      	cmp	r5, #0
 8008580:	db41      	blt.n	8008606 <__ieee754_sqrt+0x15a>
 8008582:	f100 0801 	add.w	r8, r0, #1
 8008586:	1a09      	subs	r1, r1, r0
 8008588:	459c      	cmp	ip, r3
 800858a:	bf88      	it	hi
 800858c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008590:	eba3 030c 	sub.w	r3, r3, ip
 8008594:	4432      	add	r2, r6
 8008596:	4640      	mov	r0, r8
 8008598:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800859c:	f1be 0e01 	subs.w	lr, lr, #1
 80085a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80085a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085ac:	d1db      	bne.n	8008566 <__ieee754_sqrt+0xba>
 80085ae:	430b      	orrs	r3, r1
 80085b0:	d006      	beq.n	80085c0 <__ieee754_sqrt+0x114>
 80085b2:	1c50      	adds	r0, r2, #1
 80085b4:	bf13      	iteet	ne
 80085b6:	3201      	addne	r2, #1
 80085b8:	3401      	addeq	r4, #1
 80085ba:	4672      	moveq	r2, lr
 80085bc:	f022 0201 	bicne.w	r2, r2, #1
 80085c0:	1063      	asrs	r3, r4, #1
 80085c2:	0852      	lsrs	r2, r2, #1
 80085c4:	07e1      	lsls	r1, r4, #31
 80085c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80085ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80085ce:	bf48      	it	mi
 80085d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80085d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80085d8:	4614      	mov	r4, r2
 80085da:	e781      	b.n	80084e0 <__ieee754_sqrt+0x34>
 80085dc:	0ad9      	lsrs	r1, r3, #11
 80085de:	3815      	subs	r0, #21
 80085e0:	055b      	lsls	r3, r3, #21
 80085e2:	2900      	cmp	r1, #0
 80085e4:	d0fa      	beq.n	80085dc <__ieee754_sqrt+0x130>
 80085e6:	02cd      	lsls	r5, r1, #11
 80085e8:	d50a      	bpl.n	8008600 <__ieee754_sqrt+0x154>
 80085ea:	f1c2 0420 	rsb	r4, r2, #32
 80085ee:	fa23 f404 	lsr.w	r4, r3, r4
 80085f2:	1e55      	subs	r5, r2, #1
 80085f4:	4093      	lsls	r3, r2
 80085f6:	4321      	orrs	r1, r4
 80085f8:	1b42      	subs	r2, r0, r5
 80085fa:	e78a      	b.n	8008512 <__ieee754_sqrt+0x66>
 80085fc:	4610      	mov	r0, r2
 80085fe:	e7f0      	b.n	80085e2 <__ieee754_sqrt+0x136>
 8008600:	0049      	lsls	r1, r1, #1
 8008602:	3201      	adds	r2, #1
 8008604:	e7ef      	b.n	80085e6 <__ieee754_sqrt+0x13a>
 8008606:	4680      	mov	r8, r0
 8008608:	e7bd      	b.n	8008586 <__ieee754_sqrt+0xda>
 800860a:	bf00      	nop
 800860c:	7ff00000 	.word	0x7ff00000

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
